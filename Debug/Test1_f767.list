
Test1_f767.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000880c  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000244  08008a0c  08008a0c  00009a0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008c50  08008c50  0000a0d8  2**0
                  CONTENTS
  4 .ARM          00000008  08008c50  08008c50  00009c50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008c58  08008c58  0000a0d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008c58  08008c58  00009c58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008c5c  08008c5c  00009c5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000d8  20000000  08008c60  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000be0  200000d8  08008d38  0000a0d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000cb8  08008d38  0000acb8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000a0d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017927  00000000  00000000  0000a106  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000399d  00000000  00000000  00021a2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001280  00000000  00000000  000253d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e32  00000000  00000000  00026650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002bd3a  00000000  00000000  00027482  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b251  00000000  00000000  000531bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00106d97  00000000  00000000  0006e40d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001751a4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000054c0  00000000  00000000  001751e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  0017a6a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200000d8 	.word	0x200000d8
 800021c:	00000000 	.word	0x00000000
 8000220:	080089f4 	.word	0x080089f4

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200000dc 	.word	0x200000dc
 800023c:	080089f4 	.word	0x080089f4

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr
	...

08000260 <memchr>:
 8000260:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000264:	2a10      	cmp	r2, #16
 8000266:	db2b      	blt.n	80002c0 <memchr+0x60>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	d008      	beq.n	8000280 <memchr+0x20>
 800026e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000272:	3a01      	subs	r2, #1
 8000274:	428b      	cmp	r3, r1
 8000276:	d02d      	beq.n	80002d4 <memchr+0x74>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	b342      	cbz	r2, 80002d0 <memchr+0x70>
 800027e:	d1f6      	bne.n	800026e <memchr+0xe>
 8000280:	b4f0      	push	{r4, r5, r6, r7}
 8000282:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000286:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800028a:	f022 0407 	bic.w	r4, r2, #7
 800028e:	f07f 0700 	mvns.w	r7, #0
 8000292:	2300      	movs	r3, #0
 8000294:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000298:	3c08      	subs	r4, #8
 800029a:	ea85 0501 	eor.w	r5, r5, r1
 800029e:	ea86 0601 	eor.w	r6, r6, r1
 80002a2:	fa85 f547 	uadd8	r5, r5, r7
 80002a6:	faa3 f587 	sel	r5, r3, r7
 80002aa:	fa86 f647 	uadd8	r6, r6, r7
 80002ae:	faa5 f687 	sel	r6, r5, r7
 80002b2:	b98e      	cbnz	r6, 80002d8 <memchr+0x78>
 80002b4:	d1ee      	bne.n	8000294 <memchr+0x34>
 80002b6:	bcf0      	pop	{r4, r5, r6, r7}
 80002b8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002bc:	f002 0207 	and.w	r2, r2, #7
 80002c0:	b132      	cbz	r2, 80002d0 <memchr+0x70>
 80002c2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002c6:	3a01      	subs	r2, #1
 80002c8:	ea83 0301 	eor.w	r3, r3, r1
 80002cc:	b113      	cbz	r3, 80002d4 <memchr+0x74>
 80002ce:	d1f8      	bne.n	80002c2 <memchr+0x62>
 80002d0:	2000      	movs	r0, #0
 80002d2:	4770      	bx	lr
 80002d4:	3801      	subs	r0, #1
 80002d6:	4770      	bx	lr
 80002d8:	2d00      	cmp	r5, #0
 80002da:	bf06      	itte	eq
 80002dc:	4635      	moveq	r5, r6
 80002de:	3803      	subeq	r0, #3
 80002e0:	3807      	subne	r0, #7
 80002e2:	f015 0f01 	tst.w	r5, #1
 80002e6:	d107      	bne.n	80002f8 <memchr+0x98>
 80002e8:	3001      	adds	r0, #1
 80002ea:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ee:	bf02      	ittt	eq
 80002f0:	3001      	addeq	r0, #1
 80002f2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002f6:	3001      	addeq	r0, #1
 80002f8:	bcf0      	pop	{r4, r5, r6, r7}
 80002fa:	3801      	subs	r0, #1
 80002fc:	4770      	bx	lr
 80002fe:	bf00      	nop

08000300 <__aeabi_uldivmod>:
 8000300:	b953      	cbnz	r3, 8000318 <__aeabi_uldivmod+0x18>
 8000302:	b94a      	cbnz	r2, 8000318 <__aeabi_uldivmod+0x18>
 8000304:	2900      	cmp	r1, #0
 8000306:	bf08      	it	eq
 8000308:	2800      	cmpeq	r0, #0
 800030a:	bf1c      	itt	ne
 800030c:	f04f 31ff 	movne.w	r1, #4294967295
 8000310:	f04f 30ff 	movne.w	r0, #4294967295
 8000314:	f000 b96a 	b.w	80005ec <__aeabi_idiv0>
 8000318:	f1ad 0c08 	sub.w	ip, sp, #8
 800031c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000320:	f000 f806 	bl	8000330 <__udivmoddi4>
 8000324:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000328:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800032c:	b004      	add	sp, #16
 800032e:	4770      	bx	lr

08000330 <__udivmoddi4>:
 8000330:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000334:	9d08      	ldr	r5, [sp, #32]
 8000336:	460c      	mov	r4, r1
 8000338:	2b00      	cmp	r3, #0
 800033a:	d14e      	bne.n	80003da <__udivmoddi4+0xaa>
 800033c:	4694      	mov	ip, r2
 800033e:	458c      	cmp	ip, r1
 8000340:	4686      	mov	lr, r0
 8000342:	fab2 f282 	clz	r2, r2
 8000346:	d962      	bls.n	800040e <__udivmoddi4+0xde>
 8000348:	b14a      	cbz	r2, 800035e <__udivmoddi4+0x2e>
 800034a:	f1c2 0320 	rsb	r3, r2, #32
 800034e:	4091      	lsls	r1, r2
 8000350:	fa20 f303 	lsr.w	r3, r0, r3
 8000354:	fa0c fc02 	lsl.w	ip, ip, r2
 8000358:	4319      	orrs	r1, r3
 800035a:	fa00 fe02 	lsl.w	lr, r0, r2
 800035e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000362:	fa1f f68c 	uxth.w	r6, ip
 8000366:	fbb1 f4f7 	udiv	r4, r1, r7
 800036a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800036e:	fb07 1114 	mls	r1, r7, r4, r1
 8000372:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000376:	fb04 f106 	mul.w	r1, r4, r6
 800037a:	4299      	cmp	r1, r3
 800037c:	d90a      	bls.n	8000394 <__udivmoddi4+0x64>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f104 30ff 	add.w	r0, r4, #4294967295
 8000386:	f080 8112 	bcs.w	80005ae <__udivmoddi4+0x27e>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 810f 	bls.w	80005ae <__udivmoddi4+0x27e>
 8000390:	3c02      	subs	r4, #2
 8000392:	4463      	add	r3, ip
 8000394:	1a59      	subs	r1, r3, r1
 8000396:	fa1f f38e 	uxth.w	r3, lr
 800039a:	fbb1 f0f7 	udiv	r0, r1, r7
 800039e:	fb07 1110 	mls	r1, r7, r0, r1
 80003a2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003a6:	fb00 f606 	mul.w	r6, r0, r6
 80003aa:	429e      	cmp	r6, r3
 80003ac:	d90a      	bls.n	80003c4 <__udivmoddi4+0x94>
 80003ae:	eb1c 0303 	adds.w	r3, ip, r3
 80003b2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003b6:	f080 80fc 	bcs.w	80005b2 <__udivmoddi4+0x282>
 80003ba:	429e      	cmp	r6, r3
 80003bc:	f240 80f9 	bls.w	80005b2 <__udivmoddi4+0x282>
 80003c0:	4463      	add	r3, ip
 80003c2:	3802      	subs	r0, #2
 80003c4:	1b9b      	subs	r3, r3, r6
 80003c6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ca:	2100      	movs	r1, #0
 80003cc:	b11d      	cbz	r5, 80003d6 <__udivmoddi4+0xa6>
 80003ce:	40d3      	lsrs	r3, r2
 80003d0:	2200      	movs	r2, #0
 80003d2:	e9c5 3200 	strd	r3, r2, [r5]
 80003d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003da:	428b      	cmp	r3, r1
 80003dc:	d905      	bls.n	80003ea <__udivmoddi4+0xba>
 80003de:	b10d      	cbz	r5, 80003e4 <__udivmoddi4+0xb4>
 80003e0:	e9c5 0100 	strd	r0, r1, [r5]
 80003e4:	2100      	movs	r1, #0
 80003e6:	4608      	mov	r0, r1
 80003e8:	e7f5      	b.n	80003d6 <__udivmoddi4+0xa6>
 80003ea:	fab3 f183 	clz	r1, r3
 80003ee:	2900      	cmp	r1, #0
 80003f0:	d146      	bne.n	8000480 <__udivmoddi4+0x150>
 80003f2:	42a3      	cmp	r3, r4
 80003f4:	d302      	bcc.n	80003fc <__udivmoddi4+0xcc>
 80003f6:	4290      	cmp	r0, r2
 80003f8:	f0c0 80f0 	bcc.w	80005dc <__udivmoddi4+0x2ac>
 80003fc:	1a86      	subs	r6, r0, r2
 80003fe:	eb64 0303 	sbc.w	r3, r4, r3
 8000402:	2001      	movs	r0, #1
 8000404:	2d00      	cmp	r5, #0
 8000406:	d0e6      	beq.n	80003d6 <__udivmoddi4+0xa6>
 8000408:	e9c5 6300 	strd	r6, r3, [r5]
 800040c:	e7e3      	b.n	80003d6 <__udivmoddi4+0xa6>
 800040e:	2a00      	cmp	r2, #0
 8000410:	f040 8090 	bne.w	8000534 <__udivmoddi4+0x204>
 8000414:	eba1 040c 	sub.w	r4, r1, ip
 8000418:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800041c:	fa1f f78c 	uxth.w	r7, ip
 8000420:	2101      	movs	r1, #1
 8000422:	fbb4 f6f8 	udiv	r6, r4, r8
 8000426:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800042a:	fb08 4416 	mls	r4, r8, r6, r4
 800042e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000432:	fb07 f006 	mul.w	r0, r7, r6
 8000436:	4298      	cmp	r0, r3
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x11c>
 800043a:	eb1c 0303 	adds.w	r3, ip, r3
 800043e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x11a>
 8000444:	4298      	cmp	r0, r3
 8000446:	f200 80cd 	bhi.w	80005e4 <__udivmoddi4+0x2b4>
 800044a:	4626      	mov	r6, r4
 800044c:	1a1c      	subs	r4, r3, r0
 800044e:	fa1f f38e 	uxth.w	r3, lr
 8000452:	fbb4 f0f8 	udiv	r0, r4, r8
 8000456:	fb08 4410 	mls	r4, r8, r0, r4
 800045a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800045e:	fb00 f707 	mul.w	r7, r0, r7
 8000462:	429f      	cmp	r7, r3
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x148>
 8000466:	eb1c 0303 	adds.w	r3, ip, r3
 800046a:	f100 34ff 	add.w	r4, r0, #4294967295
 800046e:	d202      	bcs.n	8000476 <__udivmoddi4+0x146>
 8000470:	429f      	cmp	r7, r3
 8000472:	f200 80b0 	bhi.w	80005d6 <__udivmoddi4+0x2a6>
 8000476:	4620      	mov	r0, r4
 8000478:	1bdb      	subs	r3, r3, r7
 800047a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800047e:	e7a5      	b.n	80003cc <__udivmoddi4+0x9c>
 8000480:	f1c1 0620 	rsb	r6, r1, #32
 8000484:	408b      	lsls	r3, r1
 8000486:	fa22 f706 	lsr.w	r7, r2, r6
 800048a:	431f      	orrs	r7, r3
 800048c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000490:	fa04 f301 	lsl.w	r3, r4, r1
 8000494:	ea43 030c 	orr.w	r3, r3, ip
 8000498:	40f4      	lsrs	r4, r6
 800049a:	fa00 f801 	lsl.w	r8, r0, r1
 800049e:	0c38      	lsrs	r0, r7, #16
 80004a0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80004a4:	fbb4 fef0 	udiv	lr, r4, r0
 80004a8:	fa1f fc87 	uxth.w	ip, r7
 80004ac:	fb00 441e 	mls	r4, r0, lr, r4
 80004b0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004b4:	fb0e f90c 	mul.w	r9, lr, ip
 80004b8:	45a1      	cmp	r9, r4
 80004ba:	fa02 f201 	lsl.w	r2, r2, r1
 80004be:	d90a      	bls.n	80004d6 <__udivmoddi4+0x1a6>
 80004c0:	193c      	adds	r4, r7, r4
 80004c2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004c6:	f080 8084 	bcs.w	80005d2 <__udivmoddi4+0x2a2>
 80004ca:	45a1      	cmp	r9, r4
 80004cc:	f240 8081 	bls.w	80005d2 <__udivmoddi4+0x2a2>
 80004d0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004d4:	443c      	add	r4, r7
 80004d6:	eba4 0409 	sub.w	r4, r4, r9
 80004da:	fa1f f983 	uxth.w	r9, r3
 80004de:	fbb4 f3f0 	udiv	r3, r4, r0
 80004e2:	fb00 4413 	mls	r4, r0, r3, r4
 80004e6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ea:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ee:	45a4      	cmp	ip, r4
 80004f0:	d907      	bls.n	8000502 <__udivmoddi4+0x1d2>
 80004f2:	193c      	adds	r4, r7, r4
 80004f4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004f8:	d267      	bcs.n	80005ca <__udivmoddi4+0x29a>
 80004fa:	45a4      	cmp	ip, r4
 80004fc:	d965      	bls.n	80005ca <__udivmoddi4+0x29a>
 80004fe:	3b02      	subs	r3, #2
 8000500:	443c      	add	r4, r7
 8000502:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000506:	fba0 9302 	umull	r9, r3, r0, r2
 800050a:	eba4 040c 	sub.w	r4, r4, ip
 800050e:	429c      	cmp	r4, r3
 8000510:	46ce      	mov	lr, r9
 8000512:	469c      	mov	ip, r3
 8000514:	d351      	bcc.n	80005ba <__udivmoddi4+0x28a>
 8000516:	d04e      	beq.n	80005b6 <__udivmoddi4+0x286>
 8000518:	b155      	cbz	r5, 8000530 <__udivmoddi4+0x200>
 800051a:	ebb8 030e 	subs.w	r3, r8, lr
 800051e:	eb64 040c 	sbc.w	r4, r4, ip
 8000522:	fa04 f606 	lsl.w	r6, r4, r6
 8000526:	40cb      	lsrs	r3, r1
 8000528:	431e      	orrs	r6, r3
 800052a:	40cc      	lsrs	r4, r1
 800052c:	e9c5 6400 	strd	r6, r4, [r5]
 8000530:	2100      	movs	r1, #0
 8000532:	e750      	b.n	80003d6 <__udivmoddi4+0xa6>
 8000534:	f1c2 0320 	rsb	r3, r2, #32
 8000538:	fa20 f103 	lsr.w	r1, r0, r3
 800053c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000540:	fa24 f303 	lsr.w	r3, r4, r3
 8000544:	4094      	lsls	r4, r2
 8000546:	430c      	orrs	r4, r1
 8000548:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800054c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000550:	fa1f f78c 	uxth.w	r7, ip
 8000554:	fbb3 f0f8 	udiv	r0, r3, r8
 8000558:	fb08 3110 	mls	r1, r8, r0, r3
 800055c:	0c23      	lsrs	r3, r4, #16
 800055e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000562:	fb00 f107 	mul.w	r1, r0, r7
 8000566:	4299      	cmp	r1, r3
 8000568:	d908      	bls.n	800057c <__udivmoddi4+0x24c>
 800056a:	eb1c 0303 	adds.w	r3, ip, r3
 800056e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000572:	d22c      	bcs.n	80005ce <__udivmoddi4+0x29e>
 8000574:	4299      	cmp	r1, r3
 8000576:	d92a      	bls.n	80005ce <__udivmoddi4+0x29e>
 8000578:	3802      	subs	r0, #2
 800057a:	4463      	add	r3, ip
 800057c:	1a5b      	subs	r3, r3, r1
 800057e:	b2a4      	uxth	r4, r4
 8000580:	fbb3 f1f8 	udiv	r1, r3, r8
 8000584:	fb08 3311 	mls	r3, r8, r1, r3
 8000588:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800058c:	fb01 f307 	mul.w	r3, r1, r7
 8000590:	42a3      	cmp	r3, r4
 8000592:	d908      	bls.n	80005a6 <__udivmoddi4+0x276>
 8000594:	eb1c 0404 	adds.w	r4, ip, r4
 8000598:	f101 36ff 	add.w	r6, r1, #4294967295
 800059c:	d213      	bcs.n	80005c6 <__udivmoddi4+0x296>
 800059e:	42a3      	cmp	r3, r4
 80005a0:	d911      	bls.n	80005c6 <__udivmoddi4+0x296>
 80005a2:	3902      	subs	r1, #2
 80005a4:	4464      	add	r4, ip
 80005a6:	1ae4      	subs	r4, r4, r3
 80005a8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80005ac:	e739      	b.n	8000422 <__udivmoddi4+0xf2>
 80005ae:	4604      	mov	r4, r0
 80005b0:	e6f0      	b.n	8000394 <__udivmoddi4+0x64>
 80005b2:	4608      	mov	r0, r1
 80005b4:	e706      	b.n	80003c4 <__udivmoddi4+0x94>
 80005b6:	45c8      	cmp	r8, r9
 80005b8:	d2ae      	bcs.n	8000518 <__udivmoddi4+0x1e8>
 80005ba:	ebb9 0e02 	subs.w	lr, r9, r2
 80005be:	eb63 0c07 	sbc.w	ip, r3, r7
 80005c2:	3801      	subs	r0, #1
 80005c4:	e7a8      	b.n	8000518 <__udivmoddi4+0x1e8>
 80005c6:	4631      	mov	r1, r6
 80005c8:	e7ed      	b.n	80005a6 <__udivmoddi4+0x276>
 80005ca:	4603      	mov	r3, r0
 80005cc:	e799      	b.n	8000502 <__udivmoddi4+0x1d2>
 80005ce:	4630      	mov	r0, r6
 80005d0:	e7d4      	b.n	800057c <__udivmoddi4+0x24c>
 80005d2:	46d6      	mov	lr, sl
 80005d4:	e77f      	b.n	80004d6 <__udivmoddi4+0x1a6>
 80005d6:	4463      	add	r3, ip
 80005d8:	3802      	subs	r0, #2
 80005da:	e74d      	b.n	8000478 <__udivmoddi4+0x148>
 80005dc:	4606      	mov	r6, r0
 80005de:	4623      	mov	r3, r4
 80005e0:	4608      	mov	r0, r1
 80005e2:	e70f      	b.n	8000404 <__udivmoddi4+0xd4>
 80005e4:	3e02      	subs	r6, #2
 80005e6:	4463      	add	r3, ip
 80005e8:	e730      	b.n	800044c <__udivmoddi4+0x11c>
 80005ea:	bf00      	nop

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <TIM7_IRQHandler>:
uint16_t adc_buf[ADC_BUF_LEN];

extern DAC_HandleTypeDef hdac;

void TIM7_IRQHandler(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
  if (__HAL_TIM_GET_FLAG(&hADC_Trigger, TIM_FLAG_UPDATE) != RESET)
 80005f4:	4b1f      	ldr	r3, [pc, #124]	@ (8000674 <TIM7_IRQHandler+0x84>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	691b      	ldr	r3, [r3, #16]
 80005fa:	f003 0301 	and.w	r3, r3, #1
 80005fe:	2b01      	cmp	r3, #1
 8000600:	d136      	bne.n	8000670 <TIM7_IRQHandler+0x80>
  {
        
  if (__HAL_TIM_GET_FLAG(&hADC_Trigger, TIM_FLAG_UPDATE) != RESET)
 8000602:	4b1c      	ldr	r3, [pc, #112]	@ (8000674 <TIM7_IRQHandler+0x84>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	691b      	ldr	r3, [r3, #16]
 8000608:	f003 0301 	and.w	r3, r3, #1
 800060c:	2b01      	cmp	r3, #1
 800060e:	d12f      	bne.n	8000670 <TIM7_IRQHandler+0x80>
  {
    if (__HAL_TIM_GET_IT_SOURCE(&hADC_Trigger, TIM_IT_UPDATE) != RESET)
 8000610:	4b18      	ldr	r3, [pc, #96]	@ (8000674 <TIM7_IRQHandler+0x84>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	68db      	ldr	r3, [r3, #12]
 8000616:	f003 0301 	and.w	r3, r3, #1
 800061a:	2b01      	cmp	r3, #1
 800061c:	d128      	bne.n	8000670 <TIM7_IRQHandler+0x80>
    {      
      __HAL_TIM_CLEAR_FLAG(&hADC_Trigger, TIM_IT_UPDATE);
 800061e:	4b15      	ldr	r3, [pc, #84]	@ (8000674 <TIM7_IRQHandler+0x84>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	f06f 0201 	mvn.w	r2, #1
 8000626:	611a      	str	r2, [r3, #16]
      g_ADCValue = adc_buf[0];
 8000628:	4b13      	ldr	r3, [pc, #76]	@ (8000678 <TIM7_IRQHandler+0x88>)
 800062a:	881a      	ldrh	r2, [r3, #0]
 800062c:	4b13      	ldr	r3, [pc, #76]	@ (800067c <TIM7_IRQHandler+0x8c>)
 800062e:	801a      	strh	r2, [r3, #0]
      HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, g_ADCValue);
 8000630:	4b12      	ldr	r3, [pc, #72]	@ (800067c <TIM7_IRQHandler+0x8c>)
 8000632:	881b      	ldrh	r3, [r3, #0]
 8000634:	2200      	movs	r2, #0
 8000636:	2110      	movs	r1, #16
 8000638:	4811      	ldr	r0, [pc, #68]	@ (8000680 <TIM7_IRQHandler+0x90>)
 800063a:	f003 fd37 	bl	80040ac <HAL_DAC_SetValue>
      g_ADC_TransferArray[g_ADC_TransferIndex] = g_ADCValue;
 800063e:	4b11      	ldr	r3, [pc, #68]	@ (8000684 <TIM7_IRQHandler+0x94>)
 8000640:	881b      	ldrh	r3, [r3, #0]
 8000642:	461a      	mov	r2, r3
 8000644:	4b0d      	ldr	r3, [pc, #52]	@ (800067c <TIM7_IRQHandler+0x8c>)
 8000646:	8819      	ldrh	r1, [r3, #0]
 8000648:	4b0f      	ldr	r3, [pc, #60]	@ (8000688 <TIM7_IRQHandler+0x98>)
 800064a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
      if (g_ADC_TransferIndex >= ADC_TransferLength - 1)
 800064e:	4b0d      	ldr	r3, [pc, #52]	@ (8000684 <TIM7_IRQHandler+0x94>)
 8000650:	881b      	ldrh	r3, [r3, #0]
 8000652:	2b3e      	cmp	r3, #62	@ 0x3e
 8000654:	d906      	bls.n	8000664 <TIM7_IRQHandler+0x74>
      {
        g_ADC_TransferIndex = 0;
 8000656:	4b0b      	ldr	r3, [pc, #44]	@ (8000684 <TIM7_IRQHandler+0x94>)
 8000658:	2200      	movs	r2, #0
 800065a:	801a      	strh	r2, [r3, #0]

        ADC_sample_complete = 1;
 800065c:	4b0b      	ldr	r3, [pc, #44]	@ (800068c <TIM7_IRQHandler+0x9c>)
 800065e:	2201      	movs	r2, #1
 8000660:	701a      	strb	r2, [r3, #0]
        g_ADC_TransferIndex++;
      }
    }
  }
  }
}
 8000662:	e005      	b.n	8000670 <TIM7_IRQHandler+0x80>
        g_ADC_TransferIndex++;
 8000664:	4b07      	ldr	r3, [pc, #28]	@ (8000684 <TIM7_IRQHandler+0x94>)
 8000666:	881b      	ldrh	r3, [r3, #0]
 8000668:	3301      	adds	r3, #1
 800066a:	b29a      	uxth	r2, r3
 800066c:	4b05      	ldr	r3, [pc, #20]	@ (8000684 <TIM7_IRQHandler+0x94>)
 800066e:	801a      	strh	r2, [r3, #0]
}
 8000670:	bf00      	nop
 8000672:	bd80      	pop	{r7, pc}
 8000674:	20000884 	.word	0x20000884
 8000678:	20000224 	.word	0x20000224
 800067c:	20000220 	.word	0x20000220
 8000680:	200002a4 	.word	0x200002a4
 8000684:	2000021c 	.word	0x2000021c
 8000688:	2000019c 	.word	0x2000019c
 800068c:	2000021e 	.word	0x2000021e

08000690 <MX_ADC1_Init>:

/* USER CODE END 0 */

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b084      	sub	sp, #16
 8000694:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000696:	463b      	mov	r3, r7
 8000698:	2200      	movs	r2, #0
 800069a:	601a      	str	r2, [r3, #0]
 800069c:	605a      	str	r2, [r3, #4]
 800069e:	609a      	str	r2, [r3, #8]
 80006a0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80006a2:	4b21      	ldr	r3, [pc, #132]	@ (8000728 <MX_ADC1_Init+0x98>)
 80006a4:	4a21      	ldr	r2, [pc, #132]	@ (800072c <MX_ADC1_Init+0x9c>)
 80006a6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006a8:	4b1f      	ldr	r3, [pc, #124]	@ (8000728 <MX_ADC1_Init+0x98>)
 80006aa:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80006ae:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006b0:	4b1d      	ldr	r3, [pc, #116]	@ (8000728 <MX_ADC1_Init+0x98>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006b6:	4b1c      	ldr	r3, [pc, #112]	@ (8000728 <MX_ADC1_Init+0x98>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80006bc:	4b1a      	ldr	r3, [pc, #104]	@ (8000728 <MX_ADC1_Init+0x98>)
 80006be:	2201      	movs	r2, #1
 80006c0:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006c2:	4b19      	ldr	r3, [pc, #100]	@ (8000728 <MX_ADC1_Init+0x98>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006ca:	4b17      	ldr	r3, [pc, #92]	@ (8000728 <MX_ADC1_Init+0x98>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006d0:	4b15      	ldr	r3, [pc, #84]	@ (8000728 <MX_ADC1_Init+0x98>)
 80006d2:	4a17      	ldr	r2, [pc, #92]	@ (8000730 <MX_ADC1_Init+0xa0>)
 80006d4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006d6:	4b14      	ldr	r3, [pc, #80]	@ (8000728 <MX_ADC1_Init+0x98>)
 80006d8:	2200      	movs	r2, #0
 80006da:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80006dc:	4b12      	ldr	r3, [pc, #72]	@ (8000728 <MX_ADC1_Init+0x98>)
 80006de:	2201      	movs	r2, #1
 80006e0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80006e2:	4b11      	ldr	r3, [pc, #68]	@ (8000728 <MX_ADC1_Init+0x98>)
 80006e4:	2201      	movs	r2, #1
 80006e6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006ea:	4b0f      	ldr	r3, [pc, #60]	@ (8000728 <MX_ADC1_Init+0x98>)
 80006ec:	2201      	movs	r2, #1
 80006ee:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006f0:	480d      	ldr	r0, [pc, #52]	@ (8000728 <MX_ADC1_Init+0x98>)
 80006f2:	f002 fef1 	bl	80034d8 <HAL_ADC_Init>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80006fc:	f001 feb2 	bl	8002464 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000700:	2304      	movs	r3, #4
 8000702:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000704:	2301      	movs	r3, #1
 8000706:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000708:	2301      	movs	r3, #1
 800070a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800070c:	463b      	mov	r3, r7
 800070e:	4619      	mov	r1, r3
 8000710:	4805      	ldr	r0, [pc, #20]	@ (8000728 <MX_ADC1_Init+0x98>)
 8000712:	f003 f83d 	bl	8003790 <HAL_ADC_ConfigChannel>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800071c:	f001 fea2 	bl	8002464 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000720:	bf00      	nop
 8000722:	3710      	adds	r7, #16
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	200000f4 	.word	0x200000f4
 800072c:	40012000 	.word	0x40012000
 8000730:	0f000001 	.word	0x0f000001

08000734 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b08a      	sub	sp, #40	@ 0x28
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800073c:	f107 0314 	add.w	r3, r7, #20
 8000740:	2200      	movs	r2, #0
 8000742:	601a      	str	r2, [r3, #0]
 8000744:	605a      	str	r2, [r3, #4]
 8000746:	609a      	str	r2, [r3, #8]
 8000748:	60da      	str	r2, [r3, #12]
 800074a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a2d      	ldr	r2, [pc, #180]	@ (8000808 <HAL_ADC_MspInit+0xd4>)
 8000752:	4293      	cmp	r3, r2
 8000754:	d153      	bne.n	80007fe <HAL_ADC_MspInit+0xca>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000756:	4b2d      	ldr	r3, [pc, #180]	@ (800080c <HAL_ADC_MspInit+0xd8>)
 8000758:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800075a:	4a2c      	ldr	r2, [pc, #176]	@ (800080c <HAL_ADC_MspInit+0xd8>)
 800075c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000760:	6453      	str	r3, [r2, #68]	@ 0x44
 8000762:	4b2a      	ldr	r3, [pc, #168]	@ (800080c <HAL_ADC_MspInit+0xd8>)
 8000764:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000766:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800076a:	613b      	str	r3, [r7, #16]
 800076c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800076e:	4b27      	ldr	r3, [pc, #156]	@ (800080c <HAL_ADC_MspInit+0xd8>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000772:	4a26      	ldr	r2, [pc, #152]	@ (800080c <HAL_ADC_MspInit+0xd8>)
 8000774:	f043 0301 	orr.w	r3, r3, #1
 8000778:	6313      	str	r3, [r2, #48]	@ 0x30
 800077a:	4b24      	ldr	r3, [pc, #144]	@ (800080c <HAL_ADC_MspInit+0xd8>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077e:	f003 0301 	and.w	r3, r3, #1
 8000782:	60fb      	str	r3, [r7, #12]
 8000784:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000786:	2310      	movs	r3, #16
 8000788:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800078a:	2303      	movs	r3, #3
 800078c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078e:	2300      	movs	r3, #0
 8000790:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000792:	f107 0314 	add.w	r3, r7, #20
 8000796:	4619      	mov	r1, r3
 8000798:	481d      	ldr	r0, [pc, #116]	@ (8000810 <HAL_ADC_MspInit+0xdc>)
 800079a:	f004 f915 	bl	80049c8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800079e:	4b1d      	ldr	r3, [pc, #116]	@ (8000814 <HAL_ADC_MspInit+0xe0>)
 80007a0:	4a1d      	ldr	r2, [pc, #116]	@ (8000818 <HAL_ADC_MspInit+0xe4>)
 80007a2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80007a4:	4b1b      	ldr	r3, [pc, #108]	@ (8000814 <HAL_ADC_MspInit+0xe0>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80007aa:	4b1a      	ldr	r3, [pc, #104]	@ (8000814 <HAL_ADC_MspInit+0xe0>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80007b0:	4b18      	ldr	r3, [pc, #96]	@ (8000814 <HAL_ADC_MspInit+0xe0>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80007b6:	4b17      	ldr	r3, [pc, #92]	@ (8000814 <HAL_ADC_MspInit+0xe0>)
 80007b8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80007bc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80007be:	4b15      	ldr	r3, [pc, #84]	@ (8000814 <HAL_ADC_MspInit+0xe0>)
 80007c0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80007c4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80007c6:	4b13      	ldr	r3, [pc, #76]	@ (8000814 <HAL_ADC_MspInit+0xe0>)
 80007c8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80007cc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80007ce:	4b11      	ldr	r3, [pc, #68]	@ (8000814 <HAL_ADC_MspInit+0xe0>)
 80007d0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80007d4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80007d6:	4b0f      	ldr	r3, [pc, #60]	@ (8000814 <HAL_ADC_MspInit+0xe0>)
 80007d8:	2200      	movs	r2, #0
 80007da:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80007dc:	4b0d      	ldr	r3, [pc, #52]	@ (8000814 <HAL_ADC_MspInit+0xe0>)
 80007de:	2200      	movs	r2, #0
 80007e0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80007e2:	480c      	ldr	r0, [pc, #48]	@ (8000814 <HAL_ADC_MspInit+0xe0>)
 80007e4:	f003 fce6 	bl	80041b4 <HAL_DMA_Init>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 80007ee:	f001 fe39 	bl	8002464 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	4a07      	ldr	r2, [pc, #28]	@ (8000814 <HAL_ADC_MspInit+0xe0>)
 80007f6:	639a      	str	r2, [r3, #56]	@ 0x38
 80007f8:	4a06      	ldr	r2, [pc, #24]	@ (8000814 <HAL_ADC_MspInit+0xe0>)
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80007fe:	bf00      	nop
 8000800:	3728      	adds	r7, #40	@ 0x28
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	40012000 	.word	0x40012000
 800080c:	40023800 	.word	0x40023800
 8000810:	40020000 	.word	0x40020000
 8000814:	2000013c 	.word	0x2000013c
 8000818:	40026410 	.word	0x40026410

0800081c <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000822:	463b      	mov	r3, r7
 8000824:	2200      	movs	r2, #0
 8000826:	601a      	str	r2, [r3, #0]
 8000828:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800082a:	4b14      	ldr	r3, [pc, #80]	@ (800087c <MX_DAC_Init+0x60>)
 800082c:	4a14      	ldr	r2, [pc, #80]	@ (8000880 <MX_DAC_Init+0x64>)
 800082e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000830:	4812      	ldr	r0, [pc, #72]	@ (800087c <MX_DAC_Init+0x60>)
 8000832:	f003 fbc2 	bl	8003fba <HAL_DAC_Init>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 800083c:	f001 fe12 	bl	8002464 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000840:	2300      	movs	r3, #0
 8000842:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000844:	2300      	movs	r3, #0
 8000846:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000848:	463b      	mov	r3, r7
 800084a:	2210      	movs	r2, #16
 800084c:	4619      	mov	r1, r3
 800084e:	480b      	ldr	r0, [pc, #44]	@ (800087c <MX_DAC_Init+0x60>)
 8000850:	f003 fc56 	bl	8004100 <HAL_DAC_ConfigChannel>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800085a:	f001 fe03 	bl	8002464 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */
  HAL_DAC_Start(&hdac, DAC_CHANNEL_2);
 800085e:	2110      	movs	r1, #16
 8000860:	4806      	ldr	r0, [pc, #24]	@ (800087c <MX_DAC_Init+0x60>)
 8000862:	f003 fbcc 	bl	8003ffe <HAL_DAC_Start>
  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 0U);
 8000866:	2300      	movs	r3, #0
 8000868:	2200      	movs	r2, #0
 800086a:	2110      	movs	r1, #16
 800086c:	4803      	ldr	r0, [pc, #12]	@ (800087c <MX_DAC_Init+0x60>)
 800086e:	f003 fc1d 	bl	80040ac <HAL_DAC_SetValue>
  /* USER CODE END DAC_Init 2 */

}
 8000872:	bf00      	nop
 8000874:	3708      	adds	r7, #8
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	200002a4 	.word	0x200002a4
 8000880:	40007400 	.word	0x40007400

08000884 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b08a      	sub	sp, #40	@ 0x28
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800088c:	f107 0314 	add.w	r3, r7, #20
 8000890:	2200      	movs	r2, #0
 8000892:	601a      	str	r2, [r3, #0]
 8000894:	605a      	str	r2, [r3, #4]
 8000896:	609a      	str	r2, [r3, #8]
 8000898:	60da      	str	r2, [r3, #12]
 800089a:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	4a19      	ldr	r2, [pc, #100]	@ (8000908 <HAL_DAC_MspInit+0x84>)
 80008a2:	4293      	cmp	r3, r2
 80008a4:	d12b      	bne.n	80008fe <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80008a6:	4b19      	ldr	r3, [pc, #100]	@ (800090c <HAL_DAC_MspInit+0x88>)
 80008a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008aa:	4a18      	ldr	r2, [pc, #96]	@ (800090c <HAL_DAC_MspInit+0x88>)
 80008ac:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80008b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80008b2:	4b16      	ldr	r3, [pc, #88]	@ (800090c <HAL_DAC_MspInit+0x88>)
 80008b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008b6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80008ba:	613b      	str	r3, [r7, #16]
 80008bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008be:	4b13      	ldr	r3, [pc, #76]	@ (800090c <HAL_DAC_MspInit+0x88>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c2:	4a12      	ldr	r2, [pc, #72]	@ (800090c <HAL_DAC_MspInit+0x88>)
 80008c4:	f043 0301 	orr.w	r3, r3, #1
 80008c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ca:	4b10      	ldr	r3, [pc, #64]	@ (800090c <HAL_DAC_MspInit+0x88>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ce:	f003 0301 	and.w	r3, r3, #1
 80008d2:	60fb      	str	r3, [r7, #12]
 80008d4:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80008d6:	2320      	movs	r3, #32
 80008d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008da:	2303      	movs	r3, #3
 80008dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008de:	2300      	movs	r3, #0
 80008e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e2:	f107 0314 	add.w	r3, r7, #20
 80008e6:	4619      	mov	r1, r3
 80008e8:	4809      	ldr	r0, [pc, #36]	@ (8000910 <HAL_DAC_MspInit+0x8c>)
 80008ea:	f004 f86d 	bl	80049c8 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80008ee:	2200      	movs	r2, #0
 80008f0:	2100      	movs	r1, #0
 80008f2:	2036      	movs	r0, #54	@ 0x36
 80008f4:	f003 fb1d 	bl	8003f32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80008f8:	2036      	movs	r0, #54	@ 0x36
 80008fa:	f003 fb36 	bl	8003f6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 80008fe:	bf00      	nop
 8000900:	3728      	adds	r7, #40	@ 0x28
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	40007400 	.word	0x40007400
 800090c:	40023800 	.word	0x40023800
 8000910:	40020000 	.word	0x40020000

08000914 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800091a:	4b0c      	ldr	r3, [pc, #48]	@ (800094c <MX_DMA_Init+0x38>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091e:	4a0b      	ldr	r2, [pc, #44]	@ (800094c <MX_DMA_Init+0x38>)
 8000920:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000924:	6313      	str	r3, [r2, #48]	@ 0x30
 8000926:	4b09      	ldr	r3, [pc, #36]	@ (800094c <MX_DMA_Init+0x38>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800092a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800092e:	607b      	str	r3, [r7, #4]
 8000930:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000932:	2200      	movs	r2, #0
 8000934:	2100      	movs	r1, #0
 8000936:	2038      	movs	r0, #56	@ 0x38
 8000938:	f003 fafb 	bl	8003f32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800093c:	2038      	movs	r0, #56	@ 0x38
 800093e:	f003 fb14 	bl	8003f6a <HAL_NVIC_EnableIRQ>

}
 8000942:	bf00      	nop
 8000944:	3708      	adds	r7, #8
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	40023800 	.word	0x40023800

08000950 <TIM1_UP_TIM10_IRQHandler>:

/**
 * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
 */
void TIM_STP_Elec_IRQHandler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
    if (__HAL_TIM_GET_FLAG(&hTIM_STP_Elec, TIM_FLAG_UPDATE) != RESET)
 8000954:	4b0f      	ldr	r3, [pc, #60]	@ (8000994 <TIM1_UP_TIM10_IRQHandler+0x44>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	691b      	ldr	r3, [r3, #16]
 800095a:	f003 0301 	and.w	r3, r3, #1
 800095e:	2b01      	cmp	r3, #1
 8000960:	d112      	bne.n	8000988 <TIM1_UP_TIM10_IRQHandler+0x38>
    {
        if (__HAL_TIM_GET_IT_SOURCE(&hTIM_STP_Elec, TIM_IT_UPDATE) != RESET)
 8000962:	4b0c      	ldr	r3, [pc, #48]	@ (8000994 <TIM1_UP_TIM10_IRQHandler+0x44>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	68db      	ldr	r3, [r3, #12]
 8000968:	f003 0301 	and.w	r3, r3, #1
 800096c:	2b01      	cmp	r3, #1
 800096e:	d10b      	bne.n	8000988 <TIM1_UP_TIM10_IRQHandler+0x38>
        {
            __HAL_TIM_SET_COUNTER(&hTIM_STP_Elec, 0);
 8000970:	4b08      	ldr	r3, [pc, #32]	@ (8000994 <TIM1_UP_TIM10_IRQHandler+0x44>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	2200      	movs	r2, #0
 8000976:	625a      	str	r2, [r3, #36]	@ 0x24
            __HAL_TIM_CLEAR_FLAG(&hTIM_STP_Elec, TIM_IT_UPDATE);
 8000978:	4b06      	ldr	r3, [pc, #24]	@ (8000994 <TIM1_UP_TIM10_IRQHandler+0x44>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	f06f 0201 	mvn.w	r2, #1
 8000980:	611a      	str	r2, [r3, #16]
            E_SPeriod_flag = 0;
 8000982:	4b05      	ldr	r3, [pc, #20]	@ (8000998 <TIM1_UP_TIM10_IRQHandler+0x48>)
 8000984:	2200      	movs	r2, #0
 8000986:	701a      	strb	r2, [r3, #0]
        }
    }
}
 8000988:	bf00      	nop
 800098a:	46bd      	mov	sp, r7
 800098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop
 8000994:	2000091c 	.word	0x2000091c
 8000998:	20000828 	.word	0x20000828

0800099c <TIM1_BRK_TIM9_IRQHandler>:

/**
 * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
 */
void TIM_Pulse_Elec_IRQHandler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
    if (__HAL_TIM_GET_FLAG(&hTIM_Pulse_Elec, TIM_FLAG_UPDATE) != RESET)
 80009a0:	4b0f      	ldr	r3, [pc, #60]	@ (80009e0 <TIM1_BRK_TIM9_IRQHandler+0x44>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	691b      	ldr	r3, [r3, #16]
 80009a6:	f003 0301 	and.w	r3, r3, #1
 80009aa:	2b01      	cmp	r3, #1
 80009ac:	d112      	bne.n	80009d4 <TIM1_BRK_TIM9_IRQHandler+0x38>
    {
        if (__HAL_TIM_GET_IT_SOURCE(&hTIM_Pulse_Elec, TIM_IT_UPDATE) != RESET)
 80009ae:	4b0c      	ldr	r3, [pc, #48]	@ (80009e0 <TIM1_BRK_TIM9_IRQHandler+0x44>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	68db      	ldr	r3, [r3, #12]
 80009b4:	f003 0301 	and.w	r3, r3, #1
 80009b8:	2b01      	cmp	r3, #1
 80009ba:	d10b      	bne.n	80009d4 <TIM1_BRK_TIM9_IRQHandler+0x38>
        {
//            __HAL_TIM_DISABLE(&hTIM_Pulse_Elec);
            __HAL_TIM_SET_COUNTER(&hTIM_Pulse_Elec, 0);
 80009bc:	4b08      	ldr	r3, [pc, #32]	@ (80009e0 <TIM1_BRK_TIM9_IRQHandler+0x44>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	2200      	movs	r2, #0
 80009c2:	625a      	str	r2, [r3, #36]	@ 0x24
            __HAL_TIM_CLEAR_FLAG(&hTIM_Pulse_Elec, TIM_IT_UPDATE);
 80009c4:	4b06      	ldr	r3, [pc, #24]	@ (80009e0 <TIM1_BRK_TIM9_IRQHandler+0x44>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	f06f 0201 	mvn.w	r2, #1
 80009cc:	611a      	str	r2, [r3, #16]
            E_Stimulating = 0;
 80009ce:	4b05      	ldr	r3, [pc, #20]	@ (80009e4 <TIM1_BRK_TIM9_IRQHandler+0x48>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	701a      	strb	r2, [r3, #0]
        }
    }
}
 80009d4:	bf00      	nop
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr
 80009de:	bf00      	nop
 80009e0:	200008d0 	.word	0x200008d0
 80009e4:	20000826 	.word	0x20000826

080009e8 <FloatState>:

void FloatState(Site_io_t Src_site, Site_io_t Dst_site)
{
 80009e8:	b490      	push	{r4, r7}
 80009ea:	b084      	sub	sp, #16
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	f107 0408 	add.w	r4, r7, #8
 80009f2:	e884 0003 	stmia.w	r4, {r0, r1}
 80009f6:	4639      	mov	r1, r7
 80009f8:	e881 000c 	stmia.w	r1, {r2, r3}
    Src_site.io_port->BSRR = Src_site.pin << 16;
 80009fc:	68fa      	ldr	r2, [r7, #12]
 80009fe:	68bb      	ldr	r3, [r7, #8]
 8000a00:	0412      	lsls	r2, r2, #16
 8000a02:	619a      	str	r2, [r3, #24]
    Dst_site.io_port->BSRR = Dst_site.pin << 16;
 8000a04:	687a      	ldr	r2, [r7, #4]
 8000a06:	683b      	ldr	r3, [r7, #0]
 8000a08:	0412      	lsls	r2, r2, #16
 8000a0a:	619a      	str	r2, [r3, #24]
}
 8000a0c:	bf00      	nop
 8000a0e:	3710      	adds	r7, #16
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bc90      	pop	{r4, r7}
 8000a14:	4770      	bx	lr

08000a16 <Current_steering>:

void Current_steering(Site_io_t Src_site, Site_io_t Dst_site)
{
 8000a16:	b490      	push	{r4, r7}
 8000a18:	b084      	sub	sp, #16
 8000a1a:	af00      	add	r7, sp, #0
 8000a1c:	f107 0408 	add.w	r4, r7, #8
 8000a20:	e884 0003 	stmia.w	r4, {r0, r1}
 8000a24:	4639      	mov	r1, r7
 8000a26:	e881 000c 	stmia.w	r1, {r2, r3}
    Src_site.io_port->BSRR = Src_site.pin;
 8000a2a:	68bb      	ldr	r3, [r7, #8]
 8000a2c:	68fa      	ldr	r2, [r7, #12]
 8000a2e:	619a      	str	r2, [r3, #24]
    Dst_site.io_port->BSRR = Dst_site.pin;
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	687a      	ldr	r2, [r7, #4]
 8000a34:	619a      	str	r2, [r3, #24]
}
 8000a36:	bf00      	nop
 8000a38:	3710      	adds	r7, #16
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bc90      	pop	{r4, r7}
 8000a3e:	4770      	bx	lr

08000a40 <elecstimulation>:

uint8_t elecstimulation(Site_t Src_site, Site_t Dst_site, uint8_t CathodType)
{
 8000a40:	b084      	sub	sp, #16
 8000a42:	b580      	push	{r7, lr}
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	f107 0c08 	add.w	ip, r7, #8
 8000a4a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    HAL_NVIC_DisableIRQ(ADC_Trigger_IRQn);
 8000a4e:	2037      	movs	r0, #55	@ 0x37
 8000a50:	f003 fa99 	bl	8003f86 <HAL_NVIC_DisableIRQ>
    
    __HAL_TIM_SET_AUTORELOAD(&hTIM_Pulse_Elec, E_PTime1);
 8000a54:	4b4f      	ldr	r3, [pc, #316]	@ (8000b94 <elecstimulation+0x154>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a4f      	ldr	r2, [pc, #316]	@ (8000b98 <elecstimulation+0x158>)
 8000a5a:	6812      	ldr	r2, [r2, #0]
 8000a5c:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000a5e:	4b4e      	ldr	r3, [pc, #312]	@ (8000b98 <elecstimulation+0x158>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	4a4c      	ldr	r2, [pc, #304]	@ (8000b94 <elecstimulation+0x154>)
 8000a64:	60d3      	str	r3, [r2, #12]
    __HAL_TIM_SET_COUNTER(&hTIM_Pulse_Elec, 0);
 8000a66:	4b4b      	ldr	r3, [pc, #300]	@ (8000b94 <elecstimulation+0x154>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	625a      	str	r2, [r3, #36]	@ 0x24
    HAL_TIM_Base_Start_IT(&hTIM_Pulse_Elec);
 8000a6e:	4849      	ldr	r0, [pc, #292]	@ (8000b94 <elecstimulation+0x154>)
 8000a70:	f005 fb44 	bl	80060fc <HAL_TIM_Base_Start_IT>

    if (CathodType)
 8000a74:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d008      	beq.n	8000a8e <elecstimulation+0x4e>
        Current_steering(Src_site.Cathode, Dst_site.GND);
 8000a7c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000a80:	cb0c      	ldmia	r3, {r2, r3}
 8000a82:	f107 0110 	add.w	r1, r7, #16
 8000a86:	c903      	ldmia	r1, {r0, r1}
 8000a88:	f7ff ffc5 	bl	8000a16 <Current_steering>
 8000a8c:	e007      	b.n	8000a9e <elecstimulation+0x5e>
    else
        Current_steering(Src_site.Cathode, Dst_site.Anode);
 8000a8e:	f107 0320 	add.w	r3, r7, #32
 8000a92:	cb0c      	ldmia	r3, {r2, r3}
 8000a94:	f107 0110 	add.w	r1, r7, #16
 8000a98:	c903      	ldmia	r1, {r0, r1}
 8000a9a:	f7ff ffbc 	bl	8000a16 <Current_steering>
    while (E_Stimulating)
 8000a9e:	bf00      	nop
 8000aa0:	4b3e      	ldr	r3, [pc, #248]	@ (8000b9c <elecstimulation+0x15c>)
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d1fb      	bne.n	8000aa0 <elecstimulation+0x60>
        ;

    if (CathodType)
 8000aa8:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d008      	beq.n	8000ac2 <elecstimulation+0x82>
        FloatState(Src_site.Cathode, Dst_site.GND);
 8000ab0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000ab4:	cb0c      	ldmia	r3, {r2, r3}
 8000ab6:	f107 0110 	add.w	r1, r7, #16
 8000aba:	c903      	ldmia	r1, {r0, r1}
 8000abc:	f7ff ff94 	bl	80009e8 <FloatState>
 8000ac0:	e007      	b.n	8000ad2 <elecstimulation+0x92>
    else
        FloatState(Src_site.Cathode, Dst_site.Anode);
 8000ac2:	f107 0320 	add.w	r3, r7, #32
 8000ac6:	cb0c      	ldmia	r3, {r2, r3}
 8000ac8:	f107 0110 	add.w	r1, r7, #16
 8000acc:	c903      	ldmia	r1, {r0, r1}
 8000ace:	f7ff ff8b 	bl	80009e8 <FloatState>

    EDAC_NSW_GPIO_Port->BSRR = EDAC_NSW_Pin; // DACC
 8000ad2:	4b33      	ldr	r3, [pc, #204]	@ (8000ba0 <elecstimulation+0x160>)
 8000ad4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000ad8:	619a      	str	r2, [r3, #24]
    EDAC_PSW_GPIO_Port->BSRR = EDAC_PSW_Pin; // DACA
 8000ada:	4b31      	ldr	r3, [pc, #196]	@ (8000ba0 <elecstimulation+0x160>)
 8000adc:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000ae0:	619a      	str	r2, [r3, #24]
    //    __HAL_TIM_ENABLE(&hTIM_Pulse_Elec);
    //    //    HAL_TIM_Base_Start_IT(&hTIM_Pulse_Elec);
    //    while (EStimulating)
    //        ;

    E_Stimulating = 1;
 8000ae2:	4b2e      	ldr	r3, [pc, #184]	@ (8000b9c <elecstimulation+0x15c>)
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	701a      	strb	r2, [r3, #0]
    __HAL_TIM_SET_AUTORELOAD(&hTIM_Pulse_Elec, E_PTime2);
 8000ae8:	4b2a      	ldr	r3, [pc, #168]	@ (8000b94 <elecstimulation+0x154>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4a2d      	ldr	r2, [pc, #180]	@ (8000ba4 <elecstimulation+0x164>)
 8000aee:	6812      	ldr	r2, [r2, #0]
 8000af0:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000af2:	4b2c      	ldr	r3, [pc, #176]	@ (8000ba4 <elecstimulation+0x164>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	4a27      	ldr	r2, [pc, #156]	@ (8000b94 <elecstimulation+0x154>)
 8000af8:	60d3      	str	r3, [r2, #12]
    __HAL_TIM_ENABLE(&hTIM_Pulse_Elec);
 8000afa:	4b26      	ldr	r3, [pc, #152]	@ (8000b94 <elecstimulation+0x154>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	681a      	ldr	r2, [r3, #0]
 8000b00:	4b24      	ldr	r3, [pc, #144]	@ (8000b94 <elecstimulation+0x154>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	f042 0201 	orr.w	r2, r2, #1
 8000b08:	601a      	str	r2, [r3, #0]

    if (CathodType)
 8000b0a:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d008      	beq.n	8000b24 <elecstimulation+0xe4>
        Current_steering(Dst_site.Cathode, Src_site.GND);
 8000b12:	f107 0318 	add.w	r3, r7, #24
 8000b16:	cb0c      	ldmia	r3, {r2, r3}
 8000b18:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8000b1c:	c903      	ldmia	r1, {r0, r1}
 8000b1e:	f7ff ff7a 	bl	8000a16 <Current_steering>
 8000b22:	e007      	b.n	8000b34 <elecstimulation+0xf4>
    else
        Current_steering(Dst_site.Cathode, Src_site.Anode);
 8000b24:	f107 0308 	add.w	r3, r7, #8
 8000b28:	cb0c      	ldmia	r3, {r2, r3}
 8000b2a:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8000b2e:	c903      	ldmia	r1, {r0, r1}
 8000b30:	f7ff ff71 	bl	8000a16 <Current_steering>
    while (E_Stimulating)
 8000b34:	bf00      	nop
 8000b36:	4b19      	ldr	r3, [pc, #100]	@ (8000b9c <elecstimulation+0x15c>)
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d1fb      	bne.n	8000b36 <elecstimulation+0xf6>
        ;

    if (CathodType)
 8000b3e:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d008      	beq.n	8000b58 <elecstimulation+0x118>
        FloatState(Dst_site.Cathode, Src_site.GND);
 8000b46:	f107 0318 	add.w	r3, r7, #24
 8000b4a:	cb0c      	ldmia	r3, {r2, r3}
 8000b4c:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8000b50:	c903      	ldmia	r1, {r0, r1}
 8000b52:	f7ff ff49 	bl	80009e8 <FloatState>
 8000b56:	e007      	b.n	8000b68 <elecstimulation+0x128>
    else
        FloatState(Dst_site.Cathode, Src_site.Anode);
 8000b58:	f107 0308 	add.w	r3, r7, #8
 8000b5c:	cb0c      	ldmia	r3, {r2, r3}
 8000b5e:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8000b62:	c903      	ldmia	r1, {r0, r1}
 8000b64:	f7ff ff40 	bl	80009e8 <FloatState>

    HAL_TIM_Base_Stop_IT(&hTIM_Pulse_Elec);
 8000b68:	480a      	ldr	r0, [pc, #40]	@ (8000b94 <elecstimulation+0x154>)
 8000b6a:	f005 fb3f 	bl	80061ec <HAL_TIM_Base_Stop_IT>

    EDAC_NSW_GPIO_Port->BSRR = EDAC_NSW_Pin << 16; // DACD
 8000b6e:	4b0c      	ldr	r3, [pc, #48]	@ (8000ba0 <elecstimulation+0x160>)
 8000b70:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000b74:	619a      	str	r2, [r3, #24]
    EDAC_PSW_GPIO_Port->BSRR = EDAC_PSW_Pin << 16; // DACB
 8000b76:	4b0a      	ldr	r3, [pc, #40]	@ (8000ba0 <elecstimulation+0x160>)
 8000b78:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b7c:	619a      	str	r2, [r3, #24]

    HAL_NVIC_EnableIRQ(ADC_Trigger_IRQn);
 8000b7e:	2037      	movs	r0, #55	@ 0x37
 8000b80:	f003 f9f3 	bl	8003f6a <HAL_NVIC_EnableIRQ>
    return 0;
 8000b84:	2300      	movs	r3, #0
    // default:
    //     break;
    // }

    // return 1;
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000b8e:	b004      	add	sp, #16
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	200008d0 	.word	0x200008d0
 8000b98:	200007fc 	.word	0x200007fc
 8000b9c:	20000826 	.word	0x20000826
 8000ba0:	40021800 	.word	0x40021800
 8000ba4:	200007fe 	.word	0x200007fe

08000ba8 <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b08e      	sub	sp, #56	@ 0x38
 8000bac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	601a      	str	r2, [r3, #0]
 8000bb6:	605a      	str	r2, [r3, #4]
 8000bb8:	609a      	str	r2, [r3, #8]
 8000bba:	60da      	str	r2, [r3, #12]
 8000bbc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bbe:	4bb4      	ldr	r3, [pc, #720]	@ (8000e90 <MX_GPIO_Init+0x2e8>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc2:	4ab3      	ldr	r2, [pc, #716]	@ (8000e90 <MX_GPIO_Init+0x2e8>)
 8000bc4:	f043 0304 	orr.w	r3, r3, #4
 8000bc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bca:	4bb1      	ldr	r3, [pc, #708]	@ (8000e90 <MX_GPIO_Init+0x2e8>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bce:	f003 0304 	and.w	r3, r3, #4
 8000bd2:	623b      	str	r3, [r7, #32]
 8000bd4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000bd6:	4bae      	ldr	r3, [pc, #696]	@ (8000e90 <MX_GPIO_Init+0x2e8>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bda:	4aad      	ldr	r2, [pc, #692]	@ (8000e90 <MX_GPIO_Init+0x2e8>)
 8000bdc:	f043 0320 	orr.w	r3, r3, #32
 8000be0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000be2:	4bab      	ldr	r3, [pc, #684]	@ (8000e90 <MX_GPIO_Init+0x2e8>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000be6:	f003 0320 	and.w	r3, r3, #32
 8000bea:	61fb      	str	r3, [r7, #28]
 8000bec:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bee:	4ba8      	ldr	r3, [pc, #672]	@ (8000e90 <MX_GPIO_Init+0x2e8>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bf2:	4aa7      	ldr	r2, [pc, #668]	@ (8000e90 <MX_GPIO_Init+0x2e8>)
 8000bf4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000bf8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bfa:	4ba5      	ldr	r3, [pc, #660]	@ (8000e90 <MX_GPIO_Init+0x2e8>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bfe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c02:	61bb      	str	r3, [r7, #24]
 8000c04:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c06:	4ba2      	ldr	r3, [pc, #648]	@ (8000e90 <MX_GPIO_Init+0x2e8>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c0a:	4aa1      	ldr	r2, [pc, #644]	@ (8000e90 <MX_GPIO_Init+0x2e8>)
 8000c0c:	f043 0301 	orr.w	r3, r3, #1
 8000c10:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c12:	4b9f      	ldr	r3, [pc, #636]	@ (8000e90 <MX_GPIO_Init+0x2e8>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c16:	f003 0301 	and.w	r3, r3, #1
 8000c1a:	617b      	str	r3, [r7, #20]
 8000c1c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c1e:	4b9c      	ldr	r3, [pc, #624]	@ (8000e90 <MX_GPIO_Init+0x2e8>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c22:	4a9b      	ldr	r2, [pc, #620]	@ (8000e90 <MX_GPIO_Init+0x2e8>)
 8000c24:	f043 0302 	orr.w	r3, r3, #2
 8000c28:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c2a:	4b99      	ldr	r3, [pc, #612]	@ (8000e90 <MX_GPIO_Init+0x2e8>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c2e:	f003 0302 	and.w	r3, r3, #2
 8000c32:	613b      	str	r3, [r7, #16]
 8000c34:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c36:	4b96      	ldr	r3, [pc, #600]	@ (8000e90 <MX_GPIO_Init+0x2e8>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c3a:	4a95      	ldr	r2, [pc, #596]	@ (8000e90 <MX_GPIO_Init+0x2e8>)
 8000c3c:	f043 0310 	orr.w	r3, r3, #16
 8000c40:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c42:	4b93      	ldr	r3, [pc, #588]	@ (8000e90 <MX_GPIO_Init+0x2e8>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c46:	f003 0310 	and.w	r3, r3, #16
 8000c4a:	60fb      	str	r3, [r7, #12]
 8000c4c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c4e:	4b90      	ldr	r3, [pc, #576]	@ (8000e90 <MX_GPIO_Init+0x2e8>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c52:	4a8f      	ldr	r2, [pc, #572]	@ (8000e90 <MX_GPIO_Init+0x2e8>)
 8000c54:	f043 0308 	orr.w	r3, r3, #8
 8000c58:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c5a:	4b8d      	ldr	r3, [pc, #564]	@ (8000e90 <MX_GPIO_Init+0x2e8>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c5e:	f003 0308 	and.w	r3, r3, #8
 8000c62:	60bb      	str	r3, [r7, #8]
 8000c64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c66:	4b8a      	ldr	r3, [pc, #552]	@ (8000e90 <MX_GPIO_Init+0x2e8>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c6a:	4a89      	ldr	r2, [pc, #548]	@ (8000e90 <MX_GPIO_Init+0x2e8>)
 8000c6c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c70:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c72:	4b87      	ldr	r3, [pc, #540]	@ (8000e90 <MX_GPIO_Init+0x2e8>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000c7a:	607b      	str	r3, [r7, #4]
 8000c7c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, O_For_Pin|O_Rev_Pin|EDAC_SDIN_Pin|EDAC_LDAC_Pin
 8000c7e:	2201      	movs	r2, #1
 8000c80:	f24e 0128 	movw	r1, #57384	@ 0xe028
 8000c84:	4883      	ldr	r0, [pc, #524]	@ (8000e94 <MX_GPIO_Init+0x2ec>)
 8000c86:	f004 f84b 	bl	8004d20 <HAL_GPIO_WritePin>
                          |EDAC_CLRSEL_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, O_Trigger_Pin|Site1_Anode_Pin, GPIO_PIN_RESET);
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	f44f 51a0 	mov.w	r1, #5120	@ 0x1400
 8000c90:	4880      	ldr	r0, [pc, #512]	@ (8000e94 <MX_GPIO_Init+0x2ec>)
 8000c92:	f004 f845 	bl	8004d20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, ODAC_CS_Pin|O_Fix_Pin, GPIO_PIN_SET);
 8000c96:	2201      	movs	r2, #1
 8000c98:	2109      	movs	r1, #9
 8000c9a:	487f      	ldr	r0, [pc, #508]	@ (8000e98 <MX_GPIO_Init+0x2f0>)
 8000c9c:	f004 f840 	bl	8004d20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ODAC_SDIN_GPIO_Port, ODAC_SDIN_Pin, GPIO_PIN_SET);
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	2108      	movs	r1, #8
 8000ca4:	487d      	ldr	r0, [pc, #500]	@ (8000e9c <MX_GPIO_Init+0x2f4>)
 8000ca6:	f004 f83b 	bl	8004d20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Site2_Cathode_Pin|Site2_Anode_Pin, GPIO_PIN_RESET);
 8000caa:	2200      	movs	r2, #0
 8000cac:	21c0      	movs	r1, #192	@ 0xc0
 8000cae:	487b      	ldr	r0, [pc, #492]	@ (8000e9c <MX_GPIO_Init+0x2f4>)
 8000cb0:	f004 f836 	bl	8004d20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|Site3_GND_Pin|LD2_Pin
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	f24c 3181 	movw	r1, #50049	@ 0xc381
 8000cba:	4879      	ldr	r0, [pc, #484]	@ (8000ea0 <MX_GPIO_Init+0x2f8>)
 8000cbc:	f004 f830 	bl	8004d20 <HAL_GPIO_WritePin>
                          |Site3_Anode_Pin|Site2_GND_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, EDAC_SCLK_Pin|EDAC_CS_Pin|EDAC_CLR_Pin, GPIO_PIN_SET);
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	f44f 5128 	mov.w	r1, #10752	@ 0x2a00
 8000cc6:	4877      	ldr	r0, [pc, #476]	@ (8000ea4 <MX_GPIO_Init+0x2fc>)
 8000cc8:	f004 f82a 	bl	8004d20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, Site1_GND_Pin|Site1_Cathode_Pin, GPIO_PIN_RESET);
 8000ccc:	2200      	movs	r2, #0
 8000cce:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 8000cd2:	4875      	ldr	r0, [pc, #468]	@ (8000ea8 <MX_GPIO_Init+0x300>)
 8000cd4:	f004 f824 	bl	8004d20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, USB_PowerSwitchOn_Pin|EDAC_NSW_Pin|EDAC_PSW_Pin, GPIO_PIN_RESET);
 8000cd8:	2200      	movs	r2, #0
 8000cda:	f244 2140 	movw	r1, #16960	@ 0x4240
 8000cde:	4873      	ldr	r0, [pc, #460]	@ (8000eac <MX_GPIO_Init+0x304>)
 8000ce0:	f004 f81e 	bl	8004d20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Site3_Cathode_GPIO_Port, Site3_Cathode_Pin, GPIO_PIN_RESET);
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	2140      	movs	r1, #64	@ 0x40
 8000ce8:	486b      	ldr	r0, [pc, #428]	@ (8000e98 <MX_GPIO_Init+0x2f0>)
 8000cea:	f004 f819 	bl	8004d20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ODAC_SCLK_GPIO_Port, ODAC_SCLK_Pin, GPIO_PIN_SET);
 8000cee:	2201      	movs	r2, #1
 8000cf0:	2108      	movs	r1, #8
 8000cf2:	486d      	ldr	r0, [pc, #436]	@ (8000ea8 <MX_GPIO_Init+0x300>)
 8000cf4:	f004 f814 	bl	8004d20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000cf8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000cfc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cfe:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000d02:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d04:	2300      	movs	r3, #0
 8000d06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000d08:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	4862      	ldr	r0, [pc, #392]	@ (8000e98 <MX_GPIO_Init+0x2f0>)
 8000d10:	f003 fe5a 	bl	80049c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = O_For_Pin|O_Rev_Pin;
 8000d14:	2328      	movs	r3, #40	@ 0x28
 8000d16:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d18:	2301      	movs	r3, #1
 8000d1a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d20:	2300      	movs	r3, #0
 8000d22:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000d24:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d28:	4619      	mov	r1, r3
 8000d2a:	485a      	ldr	r0, [pc, #360]	@ (8000e94 <MX_GPIO_Init+0x2ec>)
 8000d2c:	f003 fe4c 	bl	80049c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = O_Trigger_Pin;
 8000d30:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d34:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d36:	2301      	movs	r3, #1
 8000d38:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000d3a:	2302      	movs	r3, #2
 8000d3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(O_Trigger_GPIO_Port, &GPIO_InitStruct);
 8000d42:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d46:	4619      	mov	r1, r3
 8000d48:	4852      	ldr	r0, [pc, #328]	@ (8000e94 <MX_GPIO_Init+0x2ec>)
 8000d4a:	f003 fe3d 	bl	80049c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ODAC_CS_Pin;
 8000d4e:	2301      	movs	r3, #1
 8000d50:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d52:	2301      	movs	r3, #1
 8000d54:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d56:	2301      	movs	r3, #1
 8000d58:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d5a:	2302      	movs	r3, #2
 8000d5c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ODAC_CS_GPIO_Port, &GPIO_InitStruct);
 8000d5e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d62:	4619      	mov	r1, r3
 8000d64:	484c      	ldr	r0, [pc, #304]	@ (8000e98 <MX_GPIO_Init+0x2f0>)
 8000d66:	f003 fe2f 	bl	80049c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000d6a:	2332      	movs	r3, #50	@ 0x32
 8000d6c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d6e:	2302      	movs	r3, #2
 8000d70:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d72:	2300      	movs	r3, #0
 8000d74:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d76:	2303      	movs	r3, #3
 8000d78:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d7a:	230b      	movs	r3, #11
 8000d7c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d7e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d82:	4619      	mov	r1, r3
 8000d84:	4844      	ldr	r0, [pc, #272]	@ (8000e98 <MX_GPIO_Init+0x2f0>)
 8000d86:	f003 fe1f 	bl	80049c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = O_Fix_Pin;
 8000d8a:	2308      	movs	r3, #8
 8000d8c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000d92:	2302      	movs	r3, #2
 8000d94:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d96:	2300      	movs	r3, #0
 8000d98:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(O_Fix_GPIO_Port, &GPIO_InitStruct);
 8000d9a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d9e:	4619      	mov	r1, r3
 8000da0:	483d      	ldr	r0, [pc, #244]	@ (8000e98 <MX_GPIO_Init+0x2f0>)
 8000da2:	f003 fe11 	bl	80049c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin;
 8000da6:	2306      	movs	r3, #6
 8000da8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000daa:	2302      	movs	r3, #2
 8000dac:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dae:	2300      	movs	r3, #0
 8000db0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000db2:	2303      	movs	r3, #3
 8000db4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000db6:	230b      	movs	r3, #11
 8000db8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	4836      	ldr	r0, [pc, #216]	@ (8000e9c <MX_GPIO_Init+0x2f4>)
 8000dc2:	f003 fe01 	bl	80049c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ODAC_SDIN_Pin;
 8000dc6:	2308      	movs	r3, #8
 8000dc8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dd2:	2302      	movs	r3, #2
 8000dd4:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ODAC_SDIN_GPIO_Port, &GPIO_InitStruct);
 8000dd6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dda:	4619      	mov	r1, r3
 8000ddc:	482f      	ldr	r0, [pc, #188]	@ (8000e9c <MX_GPIO_Init+0x2f4>)
 8000dde:	f003 fdf3 	bl	80049c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = Site2_Cathode_Pin|Site2_Anode_Pin;
 8000de2:	23c0      	movs	r3, #192	@ 0xc0
 8000de4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000de6:	2301      	movs	r3, #1
 8000de8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dea:	2300      	movs	r3, #0
 8000dec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dee:	2302      	movs	r3, #2
 8000df0:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000df6:	4619      	mov	r1, r3
 8000df8:	4828      	ldr	r0, [pc, #160]	@ (8000e9c <MX_GPIO_Init+0x2f4>)
 8000dfa:	f003 fde5 	bl	80049c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000dfe:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000e02:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e04:	2301      	movs	r3, #1
 8000e06:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e10:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e14:	4619      	mov	r1, r3
 8000e16:	4822      	ldr	r0, [pc, #136]	@ (8000ea0 <MX_GPIO_Init+0x2f8>)
 8000e18:	f003 fdd6 	bl	80049c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Site1_Anode_Pin;
 8000e1c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e20:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e22:	2301      	movs	r3, #1
 8000e24:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e26:	2300      	movs	r3, #0
 8000e28:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e2a:	2302      	movs	r3, #2
 8000e2c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(Site1_Anode_GPIO_Port, &GPIO_InitStruct);
 8000e2e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e32:	4619      	mov	r1, r3
 8000e34:	4817      	ldr	r0, [pc, #92]	@ (8000e94 <MX_GPIO_Init+0x2ec>)
 8000e36:	f003 fdc7 	bl	80049c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = EDAC_SDIN_Pin|EDAC_LDAC_Pin;
 8000e3a:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000e3e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e40:	2301      	movs	r3, #1
 8000e42:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e44:	2301      	movs	r3, #1
 8000e46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e48:	2302      	movs	r3, #2
 8000e4a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e4c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e50:	4619      	mov	r1, r3
 8000e52:	4810      	ldr	r0, [pc, #64]	@ (8000e94 <MX_GPIO_Init+0x2ec>)
 8000e54:	f003 fdb8 	bl	80049c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EDAC_CLRSEL_Pin;
 8000e58:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000e5c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e62:	2300      	movs	r3, #0
 8000e64:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e66:	2300      	movs	r3, #0
 8000e68:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(EDAC_CLRSEL_GPIO_Port, &GPIO_InitStruct);
 8000e6a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e6e:	4619      	mov	r1, r3
 8000e70:	4808      	ldr	r0, [pc, #32]	@ (8000e94 <MX_GPIO_Init+0x2ec>)
 8000e72:	f003 fda9 	bl	80049c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = EDAC_SCLK_Pin|EDAC_CS_Pin;
 8000e76:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8000e7a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e80:	2301      	movs	r3, #1
 8000e82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e84:	2302      	movs	r3, #2
 8000e86:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e88:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	e00f      	b.n	8000eb0 <MX_GPIO_Init+0x308>
 8000e90:	40023800 	.word	0x40023800
 8000e94:	40021400 	.word	0x40021400
 8000e98:	40020800 	.word	0x40020800
 8000e9c:	40020000 	.word	0x40020000
 8000ea0:	40020400 	.word	0x40020400
 8000ea4:	40021000 	.word	0x40021000
 8000ea8:	40020c00 	.word	0x40020c00
 8000eac:	40021800 	.word	0x40021800
 8000eb0:	4850      	ldr	r0, [pc, #320]	@ (8000ff4 <MX_GPIO_Init+0x44c>)
 8000eb2:	f003 fd89 	bl	80049c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EDAC_CLR_Pin;
 8000eb6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000eba:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ec4:	2302      	movs	r3, #2
 8000ec6:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(EDAC_CLR_GPIO_Port, &GPIO_InitStruct);
 8000ec8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ecc:	4619      	mov	r1, r3
 8000ece:	4849      	ldr	r0, [pc, #292]	@ (8000ff4 <MX_GPIO_Init+0x44c>)
 8000ed0:	f003 fd7a 	bl	80049c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000ed4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ed8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eda:	2302      	movs	r3, #2
 8000edc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ee2:	2303      	movs	r3, #3
 8000ee4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ee6:	230b      	movs	r3, #11
 8000ee8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000eea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000eee:	4619      	mov	r1, r3
 8000ef0:	4841      	ldr	r0, [pc, #260]	@ (8000ff8 <MX_GPIO_Init+0x450>)
 8000ef2:	f003 fd69 	bl	80049c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = Site3_GND_Pin|Site3_Anode_Pin|Site2_GND_Pin;
 8000ef6:	f44f 4303 	mov.w	r3, #33536	@ 0x8300
 8000efa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000efc:	2301      	movs	r3, #1
 8000efe:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f00:	2300      	movs	r3, #0
 8000f02:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f04:	2302      	movs	r3, #2
 8000f06:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f08:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	483a      	ldr	r0, [pc, #232]	@ (8000ff8 <MX_GPIO_Init+0x450>)
 8000f10:	f003 fd5a 	bl	80049c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = Site1_GND_Pin|Site1_Cathode_Pin;
 8000f14:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000f18:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f22:	2302      	movs	r3, #2
 8000f24:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f26:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	4833      	ldr	r0, [pc, #204]	@ (8000ffc <MX_GPIO_Init+0x454>)
 8000f2e:	f003 fd4b 	bl	80049c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000f32:	2340      	movs	r3, #64	@ 0x40
 8000f34:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f36:	2301      	movs	r3, #1
 8000f38:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000f42:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f46:	4619      	mov	r1, r3
 8000f48:	482d      	ldr	r0, [pc, #180]	@ (8001000 <MX_GPIO_Init+0x458>)
 8000f4a:	f003 fd3d 	bl	80049c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000f4e:	2380      	movs	r3, #128	@ 0x80
 8000f50:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f52:	2300      	movs	r3, #0
 8000f54:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f56:	2300      	movs	r3, #0
 8000f58:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000f5a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f5e:	4619      	mov	r1, r3
 8000f60:	4827      	ldr	r0, [pc, #156]	@ (8001000 <MX_GPIO_Init+0x458>)
 8000f62:	f003 fd31 	bl	80049c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Site3_Cathode_Pin;
 8000f66:	2340      	movs	r3, #64	@ 0x40
 8000f68:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f72:	2302      	movs	r3, #2
 8000f74:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(Site3_Cathode_GPIO_Port, &GPIO_InitStruct);
 8000f76:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	4821      	ldr	r0, [pc, #132]	@ (8001004 <MX_GPIO_Init+0x45c>)
 8000f7e:	f003 fd23 	bl	80049c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ODAC_SCLK_Pin;
 8000f82:	2308      	movs	r3, #8
 8000f84:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f86:	2301      	movs	r3, #1
 8000f88:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f8e:	2302      	movs	r3, #2
 8000f90:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ODAC_SCLK_GPIO_Port, &GPIO_InitStruct);
 8000f92:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f96:	4619      	mov	r1, r3
 8000f98:	4818      	ldr	r0, [pc, #96]	@ (8000ffc <MX_GPIO_Init+0x454>)
 8000f9a:	f003 fd15 	bl	80049c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = EDAC_NSW_Pin|EDAC_PSW_Pin;
 8000f9e:	f44f 4384 	mov.w	r3, #16896	@ 0x4200
 8000fa2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fac:	2302      	movs	r3, #2
 8000fae:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000fb0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	4812      	ldr	r0, [pc, #72]	@ (8001000 <MX_GPIO_Init+0x458>)
 8000fb8:	f003 fd06 	bl	80049c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000fbc:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000fc0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fca:	2303      	movs	r3, #3
 8000fcc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fce:	230b      	movs	r3, #11
 8000fd0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000fd2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	4809      	ldr	r0, [pc, #36]	@ (8001000 <MX_GPIO_Init+0x458>)
 8000fda:	f003 fcf5 	bl	80049c8 <HAL_GPIO_Init>

  /**/
  HAL_I2CEx_EnableFastModePlus(SYSCFG_PMC_I2C_PB8_FMP);
 8000fde:	2040      	movs	r0, #64	@ 0x40
 8000fe0:	f003 feb8 	bl	8004d54 <HAL_I2CEx_EnableFastModePlus>

  /**/
  HAL_I2CEx_EnableFastModePlus(SYSCFG_PMC_I2C_PB9_FMP);
 8000fe4:	2080      	movs	r0, #128	@ 0x80
 8000fe6:	f003 feb5 	bl	8004d54 <HAL_I2CEx_EnableFastModePlus>

}
 8000fea:	bf00      	nop
 8000fec:	3738      	adds	r7, #56	@ 0x38
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	40021000 	.word	0x40021000
 8000ff8:	40020400 	.word	0x40020400
 8000ffc:	40020c00 	.word	0x40020c00
 8001000:	40021800 	.word	0x40021800
 8001004:	40020800 	.word	0x40020800

08001008 <TIM2_IRQHandler>:

/**
 * @brief This function handles TIM2 global interrupt.
 */
void TIM_Delay_IRQHandler(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
  if (__HAL_TIM_GET_FLAG(&hTIM_Delay, TIM_FLAG_UPDATE) != RESET)
 800100c:	4b26      	ldr	r3, [pc, #152]	@ (80010a8 <TIM2_IRQHandler+0xa0>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	691b      	ldr	r3, [r3, #16]
 8001012:	f003 0301 	and.w	r3, r3, #1
 8001016:	2b01      	cmp	r3, #1
 8001018:	d143      	bne.n	80010a2 <TIM2_IRQHandler+0x9a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(&hTIM_Delay, TIM_IT_UPDATE) != RESET)
 800101a:	4b23      	ldr	r3, [pc, #140]	@ (80010a8 <TIM2_IRQHandler+0xa0>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	68db      	ldr	r3, [r3, #12]
 8001020:	f003 0301 	and.w	r3, r3, #1
 8001024:	2b01      	cmp	r3, #1
 8001026:	d13c      	bne.n	80010a2 <TIM2_IRQHandler+0x9a>
    {
    	HAL_TIM_Base_Stop_IT(&hTIM_Delay);
 8001028:	481f      	ldr	r0, [pc, #124]	@ (80010a8 <TIM2_IRQHandler+0xa0>)
 800102a:	f005 f8df 	bl	80061ec <HAL_TIM_Base_Stop_IT>
      __HAL_TIM_SET_COUNTER(&hTIM_Delay, 0);
 800102e:	4b1e      	ldr	r3, [pc, #120]	@ (80010a8 <TIM2_IRQHandler+0xa0>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	2200      	movs	r2, #0
 8001034:	625a      	str	r2, [r3, #36]	@ 0x24
      __HAL_TIM_CLEAR_FLAG(&hTIM_Delay, TIM_IT_UPDATE);
 8001036:	4b1c      	ldr	r3, [pc, #112]	@ (80010a8 <TIM2_IRQHandler+0xa0>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f06f 0201 	mvn.w	r2, #1
 800103e:	611a      	str	r2, [r3, #16]
      if (LED_first_flag)
 8001040:	4b1a      	ldr	r3, [pc, #104]	@ (80010ac <TIM2_IRQHandler+0xa4>)
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d016      	beq.n	8001076 <TIM2_IRQHandler+0x6e>
      {
        E_stimallowed = 1;
 8001048:	4b19      	ldr	r3, [pc, #100]	@ (80010b0 <TIM2_IRQHandler+0xa8>)
 800104a:	2201      	movs	r2, #1
 800104c:	701a      	strb	r2, [r3, #0]
        __HAL_TIM_SET_AUTORELOAD(&hTIM_STP_Elec, E_PulsePeriod);
 800104e:	4b19      	ldr	r3, [pc, #100]	@ (80010b4 <TIM2_IRQHandler+0xac>)
 8001050:	881b      	ldrh	r3, [r3, #0]
 8001052:	b29a      	uxth	r2, r3
 8001054:	4b18      	ldr	r3, [pc, #96]	@ (80010b8 <TIM2_IRQHandler+0xb0>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	62da      	str	r2, [r3, #44]	@ 0x2c
 800105a:	4b16      	ldr	r3, [pc, #88]	@ (80010b4 <TIM2_IRQHandler+0xac>)
 800105c:	881b      	ldrh	r3, [r3, #0]
 800105e:	b29b      	uxth	r3, r3
 8001060:	461a      	mov	r2, r3
 8001062:	4b15      	ldr	r3, [pc, #84]	@ (80010b8 <TIM2_IRQHandler+0xb0>)
 8001064:	60da      	str	r2, [r3, #12]
        __HAL_TIM_SET_COUNTER(&hTIM_STP_Elec, 0);
 8001066:	4b14      	ldr	r3, [pc, #80]	@ (80010b8 <TIM2_IRQHandler+0xb0>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	2200      	movs	r2, #0
 800106c:	625a      	str	r2, [r3, #36]	@ 0x24
        HAL_TIM_Base_Start_IT(&hTIM_STP_Elec);
 800106e:	4812      	ldr	r0, [pc, #72]	@ (80010b8 <TIM2_IRQHandler+0xb0>)
 8001070:	f005 f844 	bl	80060fc <HAL_TIM_Base_Start_IT>
        __HAL_TIM_SET_COUNTER(&hTIM_STP_Opto, 0);
        HAL_TIM_Base_Start_IT(&hTIM_STP_Opto);
      }
    }
  }
}
 8001074:	e015      	b.n	80010a2 <TIM2_IRQHandler+0x9a>
        O_stimallowed = 1;
 8001076:	4b11      	ldr	r3, [pc, #68]	@ (80010bc <TIM2_IRQHandler+0xb4>)
 8001078:	2201      	movs	r2, #1
 800107a:	701a      	strb	r2, [r3, #0]
        __HAL_TIM_SET_AUTORELOAD(&hTIM_STP_Opto, O_PulsePeriod);
 800107c:	4b10      	ldr	r3, [pc, #64]	@ (80010c0 <TIM2_IRQHandler+0xb8>)
 800107e:	881b      	ldrh	r3, [r3, #0]
 8001080:	b29a      	uxth	r2, r3
 8001082:	4b10      	ldr	r3, [pc, #64]	@ (80010c4 <TIM2_IRQHandler+0xbc>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001088:	4b0d      	ldr	r3, [pc, #52]	@ (80010c0 <TIM2_IRQHandler+0xb8>)
 800108a:	881b      	ldrh	r3, [r3, #0]
 800108c:	b29b      	uxth	r3, r3
 800108e:	461a      	mov	r2, r3
 8001090:	4b0c      	ldr	r3, [pc, #48]	@ (80010c4 <TIM2_IRQHandler+0xbc>)
 8001092:	60da      	str	r2, [r3, #12]
        __HAL_TIM_SET_COUNTER(&hTIM_STP_Opto, 0);
 8001094:	4b0b      	ldr	r3, [pc, #44]	@ (80010c4 <TIM2_IRQHandler+0xbc>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	2200      	movs	r2, #0
 800109a:	625a      	str	r2, [r3, #36]	@ 0x24
        HAL_TIM_Base_Start_IT(&hTIM_STP_Opto);
 800109c:	4809      	ldr	r0, [pc, #36]	@ (80010c4 <TIM2_IRQHandler+0xbc>)
 800109e:	f005 f82d 	bl	80060fc <HAL_TIM_Base_Start_IT>
}
 80010a2:	bf00      	nop
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	20000838 	.word	0x20000838
 80010ac:	20000049 	.word	0x20000049
 80010b0:	20000830 	.word	0x20000830
 80010b4:	20000808 	.word	0x20000808
 80010b8:	2000091c 	.word	0x2000091c
 80010bc:	2000082f 	.word	0x2000082f
 80010c0:	20000816 	.word	0x20000816
 80010c4:	20000a00 	.word	0x20000a00

080010c8 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
 * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
 */
void TIM_LTP_IRQHandler(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */
  if (__HAL_TIM_GET_FLAG(&hTIM_LTP, TIM_FLAG_UPDATE) != RESET)
 80010cc:	4b0f      	ldr	r3, [pc, #60]	@ (800110c <TIM1_TRG_COM_TIM11_IRQHandler+0x44>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	691b      	ldr	r3, [r3, #16]
 80010d2:	f003 0301 	and.w	r3, r3, #1
 80010d6:	2b01      	cmp	r3, #1
 80010d8:	d112      	bne.n	8001100 <TIM1_TRG_COM_TIM11_IRQHandler+0x38>
  {
    if (__HAL_TIM_GET_IT_SOURCE(&hTIM_LTP, TIM_IT_UPDATE) != RESET)
 80010da:	4b0c      	ldr	r3, [pc, #48]	@ (800110c <TIM1_TRG_COM_TIM11_IRQHandler+0x44>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	68db      	ldr	r3, [r3, #12]
 80010e0:	f003 0301 	and.w	r3, r3, #1
 80010e4:	2b01      	cmp	r3, #1
 80010e6:	d10b      	bne.n	8001100 <TIM1_TRG_COM_TIM11_IRQHandler+0x38>
    {
      __HAL_TIM_SET_COUNTER(&hTIM_LTP, 0);
 80010e8:	4b08      	ldr	r3, [pc, #32]	@ (800110c <TIM1_TRG_COM_TIM11_IRQHandler+0x44>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	2200      	movs	r2, #0
 80010ee:	625a      	str	r2, [r3, #36]	@ 0x24
      __HAL_TIM_CLEAR_FLAG(&hTIM_LTP, TIM_IT_UPDATE);
 80010f0:	4b06      	ldr	r3, [pc, #24]	@ (800110c <TIM1_TRG_COM_TIM11_IRQHandler+0x44>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f06f 0201 	mvn.w	r2, #1
 80010f8:	611a      	str	r2, [r3, #16]
      LPeriod_flag = 1;
 80010fa:	4b05      	ldr	r3, [pc, #20]	@ (8001110 <TIM1_TRG_COM_TIM11_IRQHandler+0x48>)
 80010fc:	2201      	movs	r2, #1
 80010fe:	701a      	strb	r2, [r3, #0]
    }
  }
}
 8001100:	bf00      	nop
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	20000968 	.word	0x20000968
 8001110:	20000829 	.word	0x20000829

08001114 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001114:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001116:	b08b      	sub	sp, #44	@ 0x2c
 8001118:	af0a      	add	r7, sp, #40	@ 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800111a:	f002 f980 	bl	800341e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800111e:	f001 f92f 	bl	8002380 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001122:	f7ff fd41 	bl	8000ba8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001126:	f7ff fbf5 	bl	8000914 <MX_DMA_Init>
  MX_ADC1_Init();
 800112a:	f7ff fab1 	bl	8000690 <MX_ADC1_Init>
  MX_USART3_UART_Init();
 800112e:	f001 ff7d 	bl	800302c <MX_USART3_UART_Init>
  MX_DAC_Init();
 8001132:	f7ff fb73 	bl	800081c <MX_DAC_Init>
  MX_TIM9_Init();
 8001136:	f001 fcef 	bl	8002b18 <MX_TIM9_Init>
  MX_TIM10_Init();
 800113a:	f001 fd27 	bl	8002b8c <MX_TIM10_Init>
  MX_TIM7_Init();
 800113e:	f001 fcb5 	bl	8002aac <MX_TIM7_Init>
  MX_TIM11_Init();
 8001142:	f001 fd45 	bl	8002bd0 <MX_TIM11_Init>
  MX_TIM12_Init();
 8001146:	f001 fd67 	bl	8002c18 <MX_TIM12_Init>
  MX_TIM13_Init();
 800114a:	f001 fd9f 	bl	8002c8c <MX_TIM13_Init>
  MX_TIM14_Init();
 800114e:	f001 fdc1 	bl	8002cd4 <MX_TIM14_Init>
  MX_TIM2_Init();
 8001152:	f001 fc5d 	bl	8002a10 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  // HAL_ADC_Start(&hadc1);
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adc_buf, ADC_BUF_LEN);
 8001156:	2240      	movs	r2, #64	@ 0x40
 8001158:	499f      	ldr	r1, [pc, #636]	@ (80013d8 <main+0x2c4>)
 800115a:	48a0      	ldr	r0, [pc, #640]	@ (80013dc <main+0x2c8>)
 800115c:	f002 fa00 	bl	8003560 <HAL_ADC_Start_DMA>

  HAL_GPIO_WritePin(EDAC_CLRSEL_GPIO_Port, EDAC_CLRSEL_Pin, GPIO_PIN_SET); // Set EDAC to middle voltage
 8001160:	2201      	movs	r2, #1
 8001162:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001166:	489e      	ldr	r0, [pc, #632]	@ (80013e0 <main+0x2cc>)
 8001168:	f003 fdda 	bl	8004d20 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(EDAC_CLR_GPIO_Port, EDAC_CLR_Pin, GPIO_PIN_RESET);     // Set EDAC to middle voltage
 800116c:	2200      	movs	r2, #0
 800116e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001172:	489c      	ldr	r0, [pc, #624]	@ (80013e4 <main+0x2d0>)
 8001174:	f003 fdd4 	bl	8004d20 <HAL_GPIO_WritePin>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    if (program_stage == 1)
 8001178:	4b9b      	ldr	r3, [pc, #620]	@ (80013e8 <main+0x2d4>)
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	2b01      	cmp	r3, #1
 800117e:	f041 80dc 	bne.w	800233a <main+0x1226>
    {
      startprogram = 1;
 8001182:	4b9a      	ldr	r3, [pc, #616]	@ (80013ec <main+0x2d8>)
 8001184:	2201      	movs	r2, #1
 8001186:	701a      	strb	r2, [r3, #0]
      ParReceive_enable = 1;
 8001188:	4b99      	ldr	r3, [pc, #612]	@ (80013f0 <main+0x2dc>)
 800118a:	2201      	movs	r2, #1
 800118c:	701a      	strb	r2, [r3, #0]
      HAL_TIM_Base_Start_IT(&hADC_Trigger); // ADC timer
 800118e:	4899      	ldr	r0, [pc, #612]	@ (80013f4 <main+0x2e0>)
 8001190:	f004 ffb4 	bl	80060fc <HAL_TIM_Base_Start_IT>

      HAL_UART_Transmit(&huart3, (uint8_t *)&startconfirm, sizeof(startconfirm), HAL_MAX_DELAY);
 8001194:	f04f 33ff 	mov.w	r3, #4294967295
 8001198:	2209      	movs	r2, #9
 800119a:	4997      	ldr	r1, [pc, #604]	@ (80013f8 <main+0x2e4>)
 800119c:	4897      	ldr	r0, [pc, #604]	@ (80013fc <main+0x2e8>)
 800119e:	f005 fb41 	bl	8006824 <HAL_UART_Transmit>
    }

    while (startprogram)
 80011a2:	f001 b8ca 	b.w	800233a <main+0x1226>
    {
      switch (program_stage)
 80011a6:	4b90      	ldr	r3, [pc, #576]	@ (80013e8 <main+0x2d4>)
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	3b02      	subs	r3, #2
 80011ac:	2b03      	cmp	r3, #3
 80011ae:	f201 80b9 	bhi.w	8002324 <main+0x1210>
 80011b2:	a201      	add	r2, pc, #4	@ (adr r2, 80011b8 <main+0xa4>)
 80011b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011b8:	080011c9 	.word	0x080011c9
 80011bc:	08001221 	.word	0x08001221
 80011c0:	08001571 	.word	0x08001571
 80011c4:	08001a45 	.word	0x08001a45
      {
      case 2:
        program_stage = 0;
 80011c8:	4b87      	ldr	r3, [pc, #540]	@ (80013e8 <main+0x2d4>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	701a      	strb	r2, [r3, #0]
        startprogram = 0;
 80011ce:	4b87      	ldr	r3, [pc, #540]	@ (80013ec <main+0x2d8>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	701a      	strb	r2, [r3, #0]
        Opto_PhaseFlag = 1;
 80011d4:	4b8a      	ldr	r3, [pc, #552]	@ (8001400 <main+0x2ec>)
 80011d6:	2201      	movs	r2, #1
 80011d8:	701a      	strb	r2, [r3, #0]
        O_Stimulating = 0;
 80011da:	4b8a      	ldr	r3, [pc, #552]	@ (8001404 <main+0x2f0>)
 80011dc:	2200      	movs	r2, #0
 80011de:	701a      	strb	r2, [r3, #0]
        E_Stimulating = 0;
 80011e0:	4b89      	ldr	r3, [pc, #548]	@ (8001408 <main+0x2f4>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	701a      	strb	r2, [r3, #0]

        HAL_TIM_Base_Stop_IT(&hADC_Trigger); // ADC timer
 80011e6:	4883      	ldr	r0, [pc, #524]	@ (80013f4 <main+0x2e0>)
 80011e8:	f005 f800 	bl	80061ec <HAL_TIM_Base_Stop_IT>

        HAL_TIM_Base_Stop_IT(&hTIM_STP_Opto);
 80011ec:	4887      	ldr	r0, [pc, #540]	@ (800140c <main+0x2f8>)
 80011ee:	f004 fffd 	bl	80061ec <HAL_TIM_Base_Stop_IT>
        HAL_TIM_Base_Stop_IT(&hTIM_Pulse_Opto);
 80011f2:	4887      	ldr	r0, [pc, #540]	@ (8001410 <main+0x2fc>)
 80011f4:	f004 fffa 	bl	80061ec <HAL_TIM_Base_Stop_IT>

        HAL_TIM_Base_Stop_IT(&hTIM_STP_Elec);
 80011f8:	4886      	ldr	r0, [pc, #536]	@ (8001414 <main+0x300>)
 80011fa:	f004 fff7 	bl	80061ec <HAL_TIM_Base_Stop_IT>
        HAL_TIM_Base_Stop_IT(&hTIM_Pulse_Elec);
 80011fe:	4886      	ldr	r0, [pc, #536]	@ (8001418 <main+0x304>)
 8001200:	f004 fff4 	bl	80061ec <HAL_TIM_Base_Stop_IT>

        HAL_TIM_Base_Stop_IT(&hTIM_Delay);
 8001204:	4885      	ldr	r0, [pc, #532]	@ (800141c <main+0x308>)
 8001206:	f004 fff1 	bl	80061ec <HAL_TIM_Base_Stop_IT>
        HAL_TIM_Base_Stop_IT(&hTIM_LTP);
 800120a:	4885      	ldr	r0, [pc, #532]	@ (8001420 <main+0x30c>)
 800120c:	f004 ffee 	bl	80061ec <HAL_TIM_Base_Stop_IT>

        HAL_GPIO_WritePin(EDAC_CLR_GPIO_Port, EDAC_CLR_Pin, GPIO_PIN_RESET); // Set EDAC to middle voltage
 8001210:	2200      	movs	r2, #0
 8001212:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001216:	4873      	ldr	r0, [pc, #460]	@ (80013e4 <main+0x2d0>)
 8001218:	f003 fd82 	bl	8004d20 <HAL_GPIO_WritePin>
        break;
 800121c:	f001 b882 	b.w	8002324 <main+0x1210>
      case 3:
        if (ParReceive_enable)
 8001220:	4b73      	ldr	r3, [pc, #460]	@ (80013f0 <main+0x2dc>)
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	b2db      	uxtb	r3, r3
 8001226:	2b00      	cmp	r3, #0
 8001228:	f000 809f 	beq.w	800136a <main+0x256>
        {
          ParReceive_enable = 0;
 800122c:	4b70      	ldr	r3, [pc, #448]	@ (80013f0 <main+0x2dc>)
 800122e:	2200      	movs	r2, #0
 8001230:	701a      	strb	r2, [r3, #0]
          while (!getCmd(O_DATARx))
 8001232:	bf00      	nop
 8001234:	487b      	ldr	r0, [pc, #492]	@ (8001424 <main+0x310>)
 8001236:	f001 ff99 	bl	800316c <getCmd>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d0f9      	beq.n	8001234 <main+0x120>
            ;
          parseCmd_O(O_DATARx, O_PTime1_s, O_PTime2_s, O_Cur1_s, O_Cur2_s, Mode_s, O_PulsePeriod_s, O_Repeat_s, StimPeriod_s, O_Delay_s);
 8001240:	4b79      	ldr	r3, [pc, #484]	@ (8001428 <main+0x314>)
 8001242:	9305      	str	r3, [sp, #20]
 8001244:	4b79      	ldr	r3, [pc, #484]	@ (800142c <main+0x318>)
 8001246:	9304      	str	r3, [sp, #16]
 8001248:	4b79      	ldr	r3, [pc, #484]	@ (8001430 <main+0x31c>)
 800124a:	9303      	str	r3, [sp, #12]
 800124c:	4b79      	ldr	r3, [pc, #484]	@ (8001434 <main+0x320>)
 800124e:	9302      	str	r3, [sp, #8]
 8001250:	4b79      	ldr	r3, [pc, #484]	@ (8001438 <main+0x324>)
 8001252:	9301      	str	r3, [sp, #4]
 8001254:	4b79      	ldr	r3, [pc, #484]	@ (800143c <main+0x328>)
 8001256:	9300      	str	r3, [sp, #0]
 8001258:	4b79      	ldr	r3, [pc, #484]	@ (8001440 <main+0x32c>)
 800125a:	4a7a      	ldr	r2, [pc, #488]	@ (8001444 <main+0x330>)
 800125c:	497a      	ldr	r1, [pc, #488]	@ (8001448 <main+0x334>)
 800125e:	4871      	ldr	r0, [pc, #452]	@ (8001424 <main+0x310>)
 8001260:	f001 ffa8 	bl	80031b4 <parseCmd_O>
          O_PTime1 = atoi(O_PTime1_s) / 250 - 1;
 8001264:	4878      	ldr	r0, [pc, #480]	@ (8001448 <main+0x334>)
 8001266:	f006 fb38 	bl	80078da <atoi>
 800126a:	4603      	mov	r3, r0
 800126c:	4a77      	ldr	r2, [pc, #476]	@ (800144c <main+0x338>)
 800126e:	fb82 1203 	smull	r1, r2, r2, r3
 8001272:	1112      	asrs	r2, r2, #4
 8001274:	17db      	asrs	r3, r3, #31
 8001276:	1ad3      	subs	r3, r2, r3
 8001278:	b29b      	uxth	r3, r3
 800127a:	3b01      	subs	r3, #1
 800127c:	b29a      	uxth	r2, r3
 800127e:	4b74      	ldr	r3, [pc, #464]	@ (8001450 <main+0x33c>)
 8001280:	801a      	strh	r2, [r3, #0]
          O_PTime2 = atoi(O_PTime2_s) / 250 - 1;
 8001282:	4870      	ldr	r0, [pc, #448]	@ (8001444 <main+0x330>)
 8001284:	f006 fb29 	bl	80078da <atoi>
 8001288:	4603      	mov	r3, r0
 800128a:	4a70      	ldr	r2, [pc, #448]	@ (800144c <main+0x338>)
 800128c:	fb82 1203 	smull	r1, r2, r2, r3
 8001290:	1112      	asrs	r2, r2, #4
 8001292:	17db      	asrs	r3, r3, #31
 8001294:	1ad3      	subs	r3, r2, r3
 8001296:	b29b      	uxth	r3, r3
 8001298:	3b01      	subs	r3, #1
 800129a:	b29a      	uxth	r2, r3
 800129c:	4b6d      	ldr	r3, [pc, #436]	@ (8001454 <main+0x340>)
 800129e:	801a      	strh	r2, [r3, #0]
          O_Cur1 = 0x100 + atoi(O_Cur1_s);
 80012a0:	4867      	ldr	r0, [pc, #412]	@ (8001440 <main+0x32c>)
 80012a2:	f006 fb1a 	bl	80078da <atoi>
 80012a6:	4603      	mov	r3, r0
 80012a8:	b29b      	uxth	r3, r3
 80012aa:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80012ae:	b29a      	uxth	r2, r3
 80012b0:	4b69      	ldr	r3, [pc, #420]	@ (8001458 <main+0x344>)
 80012b2:	801a      	strh	r2, [r3, #0]
          O_Cur2 = 0x100 + atoi(O_Cur2_s);
 80012b4:	4861      	ldr	r0, [pc, #388]	@ (800143c <main+0x328>)
 80012b6:	f006 fb10 	bl	80078da <atoi>
 80012ba:	4603      	mov	r3, r0
 80012bc:	b29b      	uxth	r3, r3
 80012be:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80012c2:	b29a      	uxth	r2, r3
 80012c4:	4b65      	ldr	r3, [pc, #404]	@ (800145c <main+0x348>)
 80012c6:	801a      	strh	r2, [r3, #0]
          Mode = atoi(Mode_s);
 80012c8:	485b      	ldr	r0, [pc, #364]	@ (8001438 <main+0x324>)
 80012ca:	f006 fb06 	bl	80078da <atoi>
 80012ce:	4603      	mov	r3, r0
 80012d0:	b29a      	uxth	r2, r3
 80012d2:	4b63      	ldr	r3, [pc, #396]	@ (8001460 <main+0x34c>)
 80012d4:	801a      	strh	r2, [r3, #0]
          O_PulsePeriod = atoi(O_PulsePeriod_s) / 250 - 1;
 80012d6:	4857      	ldr	r0, [pc, #348]	@ (8001434 <main+0x320>)
 80012d8:	f006 faff 	bl	80078da <atoi>
 80012dc:	4603      	mov	r3, r0
 80012de:	4a5b      	ldr	r2, [pc, #364]	@ (800144c <main+0x338>)
 80012e0:	fb82 1203 	smull	r1, r2, r2, r3
 80012e4:	1112      	asrs	r2, r2, #4
 80012e6:	17db      	asrs	r3, r3, #31
 80012e8:	1ad3      	subs	r3, r2, r3
 80012ea:	b29b      	uxth	r3, r3
 80012ec:	3b01      	subs	r3, #1
 80012ee:	b29a      	uxth	r2, r3
 80012f0:	4b5c      	ldr	r3, [pc, #368]	@ (8001464 <main+0x350>)
 80012f2:	801a      	strh	r2, [r3, #0]

          O_Repeat = atoi(O_Repeat_s);
 80012f4:	484e      	ldr	r0, [pc, #312]	@ (8001430 <main+0x31c>)
 80012f6:	f006 faf0 	bl	80078da <atoi>
 80012fa:	4603      	mov	r3, r0
 80012fc:	b29a      	uxth	r2, r3
 80012fe:	4b5a      	ldr	r3, [pc, #360]	@ (8001468 <main+0x354>)
 8001300:	801a      	strh	r2, [r3, #0]
          StimPeriod = atoi(StimPeriod_s) - 1;
 8001302:	484a      	ldr	r0, [pc, #296]	@ (800142c <main+0x318>)
 8001304:	f006 fae9 	bl	80078da <atoi>
 8001308:	4603      	mov	r3, r0
 800130a:	b29b      	uxth	r3, r3
 800130c:	3b01      	subs	r3, #1
 800130e:	b29a      	uxth	r2, r3
 8001310:	4b56      	ldr	r3, [pc, #344]	@ (800146c <main+0x358>)
 8001312:	801a      	strh	r2, [r3, #0]

          if (Mode)
 8001314:	4b52      	ldr	r3, [pc, #328]	@ (8001460 <main+0x34c>)
 8001316:	881b      	ldrh	r3, [r3, #0]
 8001318:	b29b      	uxth	r3, r3
 800131a:	2b00      	cmp	r3, #0
 800131c:	d012      	beq.n	8001344 <main+0x230>
          {
            __HAL_TIM_SET_AUTORELOAD(&hTIM_LTP, StimPeriod);
 800131e:	4b53      	ldr	r3, [pc, #332]	@ (800146c <main+0x358>)
 8001320:	881b      	ldrh	r3, [r3, #0]
 8001322:	b29a      	uxth	r2, r3
 8001324:	4b3e      	ldr	r3, [pc, #248]	@ (8001420 <main+0x30c>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	62da      	str	r2, [r3, #44]	@ 0x2c
 800132a:	4b50      	ldr	r3, [pc, #320]	@ (800146c <main+0x358>)
 800132c:	881b      	ldrh	r3, [r3, #0]
 800132e:	b29b      	uxth	r3, r3
 8001330:	461a      	mov	r2, r3
 8001332:	4b3b      	ldr	r3, [pc, #236]	@ (8001420 <main+0x30c>)
 8001334:	60da      	str	r2, [r3, #12]
            __HAL_TIM_SET_COUNTER(&hTIM_LTP, 0);
 8001336:	4b3a      	ldr	r3, [pc, #232]	@ (8001420 <main+0x30c>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	2200      	movs	r2, #0
 800133c:	625a      	str	r2, [r3, #36]	@ 0x24
            HAL_TIM_Base_Start_IT(&hTIM_LTP);
 800133e:	4838      	ldr	r0, [pc, #224]	@ (8001420 <main+0x30c>)
 8001340:	f004 fedc 	bl	80060fc <HAL_TIM_Base_Start_IT>
          }

          __HAL_TIM_SET_AUTORELOAD(&hTIM_STP_Opto, O_PulsePeriod);
 8001344:	4b47      	ldr	r3, [pc, #284]	@ (8001464 <main+0x350>)
 8001346:	881b      	ldrh	r3, [r3, #0]
 8001348:	b29a      	uxth	r2, r3
 800134a:	4b30      	ldr	r3, [pc, #192]	@ (800140c <main+0x2f8>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001350:	4b44      	ldr	r3, [pc, #272]	@ (8001464 <main+0x350>)
 8001352:	881b      	ldrh	r3, [r3, #0]
 8001354:	b29b      	uxth	r3, r3
 8001356:	461a      	mov	r2, r3
 8001358:	4b2c      	ldr	r3, [pc, #176]	@ (800140c <main+0x2f8>)
 800135a:	60da      	str	r2, [r3, #12]
          __HAL_TIM_SET_COUNTER(&hTIM_STP_Opto, 0);
 800135c:	4b2b      	ldr	r3, [pc, #172]	@ (800140c <main+0x2f8>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	2200      	movs	r2, #0
 8001362:	625a      	str	r2, [r3, #36]	@ 0x24
          HAL_TIM_Base_Start_IT(&hTIM_STP_Opto);
 8001364:	4829      	ldr	r0, [pc, #164]	@ (800140c <main+0x2f8>)
 8001366:	f004 fec9 	bl	80060fc <HAL_TIM_Base_Start_IT>
        }
        if (Mode)
 800136a:	4b3d      	ldr	r3, [pc, #244]	@ (8001460 <main+0x34c>)
 800136c:	881b      	ldrh	r3, [r3, #0]
 800136e:	b29b      	uxth	r3, r3
 8001370:	2b00      	cmp	r3, #0
 8001372:	f000 80b2 	beq.w	80014da <main+0x3c6>
        {
          if (!LPeriod_flag)
 8001376:	4b3e      	ldr	r3, [pc, #248]	@ (8001470 <main+0x35c>)
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	b2db      	uxtb	r3, r3
 800137c:	2b00      	cmp	r3, #0
 800137e:	f040 8099 	bne.w	80014b4 <main+0x3a0>
          {
            if (!O_SPeriod_flag)
 8001382:	4b3c      	ldr	r3, [pc, #240]	@ (8001474 <main+0x360>)
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	b2db      	uxtb	r3, r3
 8001388:	2b00      	cmp	r3, #0
 800138a:	f040 87c8 	bne.w	800231e <main+0x120a>
            {
              if (O_Sti_Count < O_Repeat)
 800138e:	4b3a      	ldr	r3, [pc, #232]	@ (8001478 <main+0x364>)
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	b2db      	uxtb	r3, r3
 8001394:	461a      	mov	r2, r3
 8001396:	4b34      	ldr	r3, [pc, #208]	@ (8001468 <main+0x354>)
 8001398:	881b      	ldrh	r3, [r3, #0]
 800139a:	b29b      	uxth	r3, r3
 800139c:	429a      	cmp	r2, r3
 800139e:	d26d      	bcs.n	800147c <main+0x368>
              {
                if (!O_Stimulating)
 80013a0:	4b18      	ldr	r3, [pc, #96]	@ (8001404 <main+0x2f0>)
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	b2db      	uxtb	r3, r3
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	f040 87b9 	bne.w	800231e <main+0x120a>
                {
                  O_Stimulating = 1;
 80013ac:	4b15      	ldr	r3, [pc, #84]	@ (8001404 <main+0x2f0>)
 80013ae:	2201      	movs	r2, #1
 80013b0:	701a      	strb	r2, [r3, #0]
                  if (!optostimulation())
 80013b2:	f001 f991 	bl	80026d8 <optostimulation>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	f040 87b0 	bne.w	800231e <main+0x120a>
                  {
                    O_Sti_Count++;
 80013be:	4b2e      	ldr	r3, [pc, #184]	@ (8001478 <main+0x364>)
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	3301      	adds	r3, #1
 80013c6:	b2da      	uxtb	r2, r3
 80013c8:	4b2b      	ldr	r3, [pc, #172]	@ (8001478 <main+0x364>)
 80013ca:	701a      	strb	r2, [r3, #0]
                    O_SPeriod_flag = 1;
 80013cc:	4b29      	ldr	r3, [pc, #164]	@ (8001474 <main+0x360>)
 80013ce:	2201      	movs	r2, #1
 80013d0:	701a      	strb	r2, [r3, #0]
              O_Sti_Count = 0;
              HAL_TIM_Base_Stop_IT(&hTIM_STP_Opto);
            }
          }
        }
        break;
 80013d2:	f000 bfa4 	b.w	800231e <main+0x120a>
 80013d6:	bf00      	nop
 80013d8:	20000224 	.word	0x20000224
 80013dc:	200000f4 	.word	0x200000f4
 80013e0:	40021400 	.word	0x40021400
 80013e4:	40021000 	.word	0x40021000
 80013e8:	200002b8 	.word	0x200002b8
 80013ec:	200002b9 	.word	0x200002b9
 80013f0:	20000048 	.word	0x20000048
 80013f4:	20000884 	.word	0x20000884
 80013f8:	08008a10 	.word	0x08008a10
 80013fc:	20000ae0 	.word	0x20000ae0
 8001400:	2000004a 	.word	0x2000004a
 8001404:	2000082a 	.word	0x2000082a
 8001408:	20000826 	.word	0x20000826
 800140c:	20000a00 	.word	0x20000a00
 8001410:	200009b4 	.word	0x200009b4
 8001414:	2000091c 	.word	0x2000091c
 8001418:	200008d0 	.word	0x200008d0
 800141c:	20000838 	.word	0x20000838
 8001420:	20000968 	.word	0x20000968
 8001424:	200004bc 	.word	0x200004bc
 8001428:	2000067c 	.word	0x2000067c
 800142c:	200007bc 	.word	0x200007bc
 8001430:	2000063c 	.word	0x2000063c
 8001434:	200005fc 	.word	0x200005fc
 8001438:	2000077c 	.word	0x2000077c
 800143c:	200005bc 	.word	0x200005bc
 8001440:	2000057c 	.word	0x2000057c
 8001444:	2000053c 	.word	0x2000053c
 8001448:	200004fc 	.word	0x200004fc
 800144c:	10624dd3 	.word	0x10624dd3
 8001450:	2000080e 	.word	0x2000080e
 8001454:	20000810 	.word	0x20000810
 8001458:	20000812 	.word	0x20000812
 800145c:	20000814 	.word	0x20000814
 8001460:	20000822 	.word	0x20000822
 8001464:	20000816 	.word	0x20000816
 8001468:	20000818 	.word	0x20000818
 800146c:	20000824 	.word	0x20000824
 8001470:	20000829 	.word	0x20000829
 8001474:	2000082c 	.word	0x2000082c
 8001478:	2000082b 	.word	0x2000082b
                __HAL_TIM_DISABLE(&hTIM_STP_Opto);
 800147c:	4b34      	ldr	r3, [pc, #208]	@ (8001550 <main+0x43c>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	6a1a      	ldr	r2, [r3, #32]
 8001482:	f241 1311 	movw	r3, #4369	@ 0x1111
 8001486:	4013      	ands	r3, r2
 8001488:	2b00      	cmp	r3, #0
 800148a:	f040 8748 	bne.w	800231e <main+0x120a>
 800148e:	4b30      	ldr	r3, [pc, #192]	@ (8001550 <main+0x43c>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	6a1a      	ldr	r2, [r3, #32]
 8001494:	f240 4344 	movw	r3, #1092	@ 0x444
 8001498:	4013      	ands	r3, r2
 800149a:	2b00      	cmp	r3, #0
 800149c:	f040 873f 	bne.w	800231e <main+0x120a>
 80014a0:	4b2b      	ldr	r3, [pc, #172]	@ (8001550 <main+0x43c>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	4b2a      	ldr	r3, [pc, #168]	@ (8001550 <main+0x43c>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f022 0201 	bic.w	r2, r2, #1
 80014ae:	601a      	str	r2, [r3, #0]
        break;
 80014b0:	f000 bf35 	b.w	800231e <main+0x120a>
            LPeriod_flag = 0;
 80014b4:	4b27      	ldr	r3, [pc, #156]	@ (8001554 <main+0x440>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	701a      	strb	r2, [r3, #0]
            O_SPeriod_flag = 0;
 80014ba:	4b27      	ldr	r3, [pc, #156]	@ (8001558 <main+0x444>)
 80014bc:	2200      	movs	r2, #0
 80014be:	701a      	strb	r2, [r3, #0]
            O_Sti_Count = 0;
 80014c0:	4b26      	ldr	r3, [pc, #152]	@ (800155c <main+0x448>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	701a      	strb	r2, [r3, #0]
            __HAL_TIM_ENABLE(&hTIM_STP_Opto);
 80014c6:	4b22      	ldr	r3, [pc, #136]	@ (8001550 <main+0x43c>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	4b20      	ldr	r3, [pc, #128]	@ (8001550 <main+0x43c>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f042 0201 	orr.w	r2, r2, #1
 80014d4:	601a      	str	r2, [r3, #0]
        break;
 80014d6:	f000 bf22 	b.w	800231e <main+0x120a>
          if (!O_SPeriod_flag)
 80014da:	4b1f      	ldr	r3, [pc, #124]	@ (8001558 <main+0x444>)
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	b2db      	uxtb	r3, r3
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	f040 871c 	bne.w	800231e <main+0x120a>
            if (O_Sti_Count < O_Repeat)
 80014e6:	4b1d      	ldr	r3, [pc, #116]	@ (800155c <main+0x448>)
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	b2db      	uxtb	r3, r3
 80014ec:	461a      	mov	r2, r3
 80014ee:	4b1c      	ldr	r3, [pc, #112]	@ (8001560 <main+0x44c>)
 80014f0:	881b      	ldrh	r3, [r3, #0]
 80014f2:	b29b      	uxth	r3, r3
 80014f4:	429a      	cmp	r2, r3
 80014f6:	d21a      	bcs.n	800152e <main+0x41a>
              if (!O_Stimulating)
 80014f8:	4b1a      	ldr	r3, [pc, #104]	@ (8001564 <main+0x450>)
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	2b00      	cmp	r3, #0
 8001500:	f040 870d 	bne.w	800231e <main+0x120a>
                O_Stimulating = 1;
 8001504:	4b17      	ldr	r3, [pc, #92]	@ (8001564 <main+0x450>)
 8001506:	2201      	movs	r2, #1
 8001508:	701a      	strb	r2, [r3, #0]
                if (!optostimulation())
 800150a:	f001 f8e5 	bl	80026d8 <optostimulation>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	f040 8704 	bne.w	800231e <main+0x120a>
                  O_Sti_Count++;
 8001516:	4b11      	ldr	r3, [pc, #68]	@ (800155c <main+0x448>)
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	b2db      	uxtb	r3, r3
 800151c:	3301      	adds	r3, #1
 800151e:	b2da      	uxtb	r2, r3
 8001520:	4b0e      	ldr	r3, [pc, #56]	@ (800155c <main+0x448>)
 8001522:	701a      	strb	r2, [r3, #0]
                  O_SPeriod_flag = 1;
 8001524:	4b0c      	ldr	r3, [pc, #48]	@ (8001558 <main+0x444>)
 8001526:	2201      	movs	r2, #1
 8001528:	701a      	strb	r2, [r3, #0]
        break;
 800152a:	f000 bef8 	b.w	800231e <main+0x120a>
              program_stage = 1;
 800152e:	4b0e      	ldr	r3, [pc, #56]	@ (8001568 <main+0x454>)
 8001530:	2201      	movs	r2, #1
 8001532:	701a      	strb	r2, [r3, #0]
              ParReceive_enable = 1;
 8001534:	4b0d      	ldr	r3, [pc, #52]	@ (800156c <main+0x458>)
 8001536:	2201      	movs	r2, #1
 8001538:	701a      	strb	r2, [r3, #0]
              O_SPeriod_flag = 0;
 800153a:	4b07      	ldr	r3, [pc, #28]	@ (8001558 <main+0x444>)
 800153c:	2200      	movs	r2, #0
 800153e:	701a      	strb	r2, [r3, #0]
              O_Sti_Count = 0;
 8001540:	4b06      	ldr	r3, [pc, #24]	@ (800155c <main+0x448>)
 8001542:	2200      	movs	r2, #0
 8001544:	701a      	strb	r2, [r3, #0]
              HAL_TIM_Base_Stop_IT(&hTIM_STP_Opto);
 8001546:	4802      	ldr	r0, [pc, #8]	@ (8001550 <main+0x43c>)
 8001548:	f004 fe50 	bl	80061ec <HAL_TIM_Base_Stop_IT>
        break;
 800154c:	f000 bee7 	b.w	800231e <main+0x120a>
 8001550:	20000a00 	.word	0x20000a00
 8001554:	20000829 	.word	0x20000829
 8001558:	2000082c 	.word	0x2000082c
 800155c:	2000082b 	.word	0x2000082b
 8001560:	20000818 	.word	0x20000818
 8001564:	2000082a 	.word	0x2000082a
 8001568:	200002b8 	.word	0x200002b8
 800156c:	20000048 	.word	0x20000048
      case 4:
        if (ParReceive_enable)
 8001570:	4ba2      	ldr	r3, [pc, #648]	@ (80017fc <main+0x6e8>)
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	b2db      	uxtb	r3, r3
 8001576:	2b00      	cmp	r3, #0
 8001578:	f000 8110 	beq.w	800179c <main+0x688>
        {
          ParReceive_enable = 0;
 800157c:	4b9f      	ldr	r3, [pc, #636]	@ (80017fc <main+0x6e8>)
 800157e:	2200      	movs	r2, #0
 8001580:	701a      	strb	r2, [r3, #0]
          while (!getCmd(E_DATARx))
 8001582:	bf00      	nop
 8001584:	489e      	ldr	r0, [pc, #632]	@ (8001800 <main+0x6ec>)
 8001586:	f001 fdf1 	bl	800316c <getCmd>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d0f9      	beq.n	8001584 <main+0x470>
            ;
          parseCmd_E(E_DATARx, E_PTime1_s, E_PTime2_s, E_Cur1_s, E_Cur2_s, Src_Site_s, CathodType_s, DstSite_s,
 8001590:	4b9c      	ldr	r3, [pc, #624]	@ (8001804 <main+0x6f0>)
 8001592:	9308      	str	r3, [sp, #32]
 8001594:	4b9c      	ldr	r3, [pc, #624]	@ (8001808 <main+0x6f4>)
 8001596:	9307      	str	r3, [sp, #28]
 8001598:	4b9c      	ldr	r3, [pc, #624]	@ (800180c <main+0x6f8>)
 800159a:	9306      	str	r3, [sp, #24]
 800159c:	4b9c      	ldr	r3, [pc, #624]	@ (8001810 <main+0x6fc>)
 800159e:	9305      	str	r3, [sp, #20]
 80015a0:	4b9c      	ldr	r3, [pc, #624]	@ (8001814 <main+0x700>)
 80015a2:	9304      	str	r3, [sp, #16]
 80015a4:	4b9c      	ldr	r3, [pc, #624]	@ (8001818 <main+0x704>)
 80015a6:	9303      	str	r3, [sp, #12]
 80015a8:	4b9c      	ldr	r3, [pc, #624]	@ (800181c <main+0x708>)
 80015aa:	9302      	str	r3, [sp, #8]
 80015ac:	4b9c      	ldr	r3, [pc, #624]	@ (8001820 <main+0x70c>)
 80015ae:	9301      	str	r3, [sp, #4]
 80015b0:	4b9c      	ldr	r3, [pc, #624]	@ (8001824 <main+0x710>)
 80015b2:	9300      	str	r3, [sp, #0]
 80015b4:	4b9c      	ldr	r3, [pc, #624]	@ (8001828 <main+0x714>)
 80015b6:	4a9d      	ldr	r2, [pc, #628]	@ (800182c <main+0x718>)
 80015b8:	499d      	ldr	r1, [pc, #628]	@ (8001830 <main+0x71c>)
 80015ba:	4891      	ldr	r0, [pc, #580]	@ (8001800 <main+0x6ec>)
 80015bc:	f001 fe68 	bl	8003290 <parseCmd_E>
                     Mode_s, E_PulsePeriod_s, E_Repeat_s, StimPeriod_s, E_Delay_s);

          E_PTime1 = (uint16_t)atoi(E_PTime1_s) * 4 - 1 - 3;
 80015c0:	489b      	ldr	r0, [pc, #620]	@ (8001830 <main+0x71c>)
 80015c2:	f006 f98a 	bl	80078da <atoi>
 80015c6:	4603      	mov	r3, r0
 80015c8:	b29b      	uxth	r3, r3
 80015ca:	3b01      	subs	r3, #1
 80015cc:	b29b      	uxth	r3, r3
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	b29a      	uxth	r2, r3
 80015d2:	4b98      	ldr	r3, [pc, #608]	@ (8001834 <main+0x720>)
 80015d4:	801a      	strh	r2, [r3, #0]
          E_PTime2 = (uint16_t)atoi(E_PTime2_s) * 4 +1;
 80015d6:	4895      	ldr	r0, [pc, #596]	@ (800182c <main+0x718>)
 80015d8:	f006 f97f 	bl	80078da <atoi>
 80015dc:	4603      	mov	r3, r0
 80015de:	b29b      	uxth	r3, r3
 80015e0:	009b      	lsls	r3, r3, #2
 80015e2:	b29b      	uxth	r3, r3
 80015e4:	3301      	adds	r3, #1
 80015e6:	b29a      	uxth	r2, r3
 80015e8:	4b93      	ldr	r3, [pc, #588]	@ (8001838 <main+0x724>)
 80015ea:	801a      	strh	r2, [r3, #0]
          E_CurD = (0b11 << 14) + (uint16_t)atoi(E_Cur1_s);        // Negtive High Current
 80015ec:	488e      	ldr	r0, [pc, #568]	@ (8001828 <main+0x714>)
 80015ee:	f006 f974 	bl	80078da <atoi>
 80015f2:	4603      	mov	r3, r0
 80015f4:	b29b      	uxth	r3, r3
 80015f6:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 80015fa:	b29a      	uxth	r2, r3
 80015fc:	4b8f      	ldr	r3, [pc, #572]	@ (800183c <main+0x728>)
 80015fe:	801a      	strh	r2, [r3, #0]
          E_CurC = (0b10 << 14) + (uint16_t)atoi(E_Cur2_s);        // Negtive Low Current
 8001600:	4888      	ldr	r0, [pc, #544]	@ (8001824 <main+0x710>)
 8001602:	f006 f96a 	bl	80078da <atoi>
 8001606:	4603      	mov	r3, r0
 8001608:	b29b      	uxth	r3, r3
 800160a:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 800160e:	b29a      	uxth	r2, r3
 8001610:	4b8b      	ldr	r3, [pc, #556]	@ (8001840 <main+0x72c>)
 8001612:	801a      	strh	r2, [r3, #0]
          E_CurB = (0b01 << 14) + 4095 - (uint16_t)atoi(E_Cur1_s); // Positive High Current
 8001614:	4884      	ldr	r0, [pc, #528]	@ (8001828 <main+0x714>)
 8001616:	f006 f960 	bl	80078da <atoi>
 800161a:	4603      	mov	r3, r0
 800161c:	b29a      	uxth	r2, r3
 800161e:	f644 73ff 	movw	r3, #20479	@ 0x4fff
 8001622:	1a9b      	subs	r3, r3, r2
 8001624:	b29a      	uxth	r2, r3
 8001626:	4b87      	ldr	r3, [pc, #540]	@ (8001844 <main+0x730>)
 8001628:	801a      	strh	r2, [r3, #0]
          E_CurA = (0b00 << 14) + 4095 - (uint16_t)atoi(E_Cur2_s); // Positive Low Current
 800162a:	487e      	ldr	r0, [pc, #504]	@ (8001824 <main+0x710>)
 800162c:	f006 f955 	bl	80078da <atoi>
 8001630:	4603      	mov	r3, r0
 8001632:	b29a      	uxth	r2, r3
 8001634:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8001638:	1a9b      	subs	r3, r3, r2
 800163a:	b29a      	uxth	r2, r3
 800163c:	4b82      	ldr	r3, [pc, #520]	@ (8001848 <main+0x734>)
 800163e:	801a      	strh	r2, [r3, #0]
          Src_Site = (uint16_t)atoi(Src_Site_s);
 8001640:	4877      	ldr	r0, [pc, #476]	@ (8001820 <main+0x70c>)
 8001642:	f006 f94a 	bl	80078da <atoi>
 8001646:	4603      	mov	r3, r0
 8001648:	b29a      	uxth	r2, r3
 800164a:	4b80      	ldr	r3, [pc, #512]	@ (800184c <main+0x738>)
 800164c:	801a      	strh	r2, [r3, #0]
          CathodType = (uint16_t)atoi(CathodType_s);
 800164e:	4873      	ldr	r0, [pc, #460]	@ (800181c <main+0x708>)
 8001650:	f006 f943 	bl	80078da <atoi>
 8001654:	4603      	mov	r3, r0
 8001656:	b29a      	uxth	r2, r3
 8001658:	4b7d      	ldr	r3, [pc, #500]	@ (8001850 <main+0x73c>)
 800165a:	801a      	strh	r2, [r3, #0]
          DstSite = (uint16_t)atoi(DstSite_s);
 800165c:	486e      	ldr	r0, [pc, #440]	@ (8001818 <main+0x704>)
 800165e:	f006 f93c 	bl	80078da <atoi>
 8001662:	4603      	mov	r3, r0
 8001664:	b29a      	uxth	r2, r3
 8001666:	4b7b      	ldr	r3, [pc, #492]	@ (8001854 <main+0x740>)
 8001668:	801a      	strh	r2, [r3, #0]
          Mode = (uint16_t)atoi(Mode_s);
 800166a:	486a      	ldr	r0, [pc, #424]	@ (8001814 <main+0x700>)
 800166c:	f006 f935 	bl	80078da <atoi>
 8001670:	4603      	mov	r3, r0
 8001672:	b29a      	uxth	r2, r3
 8001674:	4b78      	ldr	r3, [pc, #480]	@ (8001858 <main+0x744>)
 8001676:	801a      	strh	r2, [r3, #0]
          E_PulsePeriod = (uint16_t)atoi(E_PulsePeriod_s) - 1;
 8001678:	4865      	ldr	r0, [pc, #404]	@ (8001810 <main+0x6fc>)
 800167a:	f006 f92e 	bl	80078da <atoi>
 800167e:	4603      	mov	r3, r0
 8001680:	b29b      	uxth	r3, r3
 8001682:	3b01      	subs	r3, #1
 8001684:	b29a      	uxth	r2, r3
 8001686:	4b75      	ldr	r3, [pc, #468]	@ (800185c <main+0x748>)
 8001688:	801a      	strh	r2, [r3, #0]

          E_Repeat = (uint16_t)atoi(E_Repeat_s);
 800168a:	4860      	ldr	r0, [pc, #384]	@ (800180c <main+0x6f8>)
 800168c:	f006 f925 	bl	80078da <atoi>
 8001690:	4603      	mov	r3, r0
 8001692:	b29a      	uxth	r2, r3
 8001694:	4b72      	ldr	r3, [pc, #456]	@ (8001860 <main+0x74c>)
 8001696:	801a      	strh	r2, [r3, #0]
          StimPeriod = (uint16_t)atoi(StimPeriod_s) - 1;
 8001698:	485b      	ldr	r0, [pc, #364]	@ (8001808 <main+0x6f4>)
 800169a:	f006 f91e 	bl	80078da <atoi>
 800169e:	4603      	mov	r3, r0
 80016a0:	b29b      	uxth	r3, r3
 80016a2:	3b01      	subs	r3, #1
 80016a4:	b29a      	uxth	r2, r3
 80016a6:	4b6f      	ldr	r3, [pc, #444]	@ (8001864 <main+0x750>)
 80016a8:	801a      	strh	r2, [r3, #0]

          HAL_GPIO_WritePin(EDAC_CLR_GPIO_Port, EDAC_CLR_Pin, GPIO_PIN_SET);
 80016aa:	2201      	movs	r2, #1
 80016ac:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80016b0:	486d      	ldr	r0, [pc, #436]	@ (8001868 <main+0x754>)
 80016b2:	f003 fb35 	bl	8004d20 <HAL_GPIO_WritePin>

          MySPI_SendByte2AD5726(EVO, E_CurA); // VO+ when switch PG14 to 1
 80016b6:	4b64      	ldr	r3, [pc, #400]	@ (8001848 <main+0x734>)
 80016b8:	881b      	ldrh	r3, [r3, #0]
 80016ba:	b29b      	uxth	r3, r3
 80016bc:	4e6b      	ldr	r6, [pc, #428]	@ (800186c <main+0x758>)
 80016be:	9308      	str	r3, [sp, #32]
 80016c0:	466d      	mov	r5, sp
 80016c2:	f106 0410 	add.w	r4, r6, #16
 80016c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016ca:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80016ce:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80016d2:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80016d6:	f000 fecb 	bl	8002470 <MySPI_SendByte2AD5726>
          MySPI_SendByte2AD5726(EVO, E_CurB); // VO+ when switch PG14 to 0 (default)
 80016da:	4b5a      	ldr	r3, [pc, #360]	@ (8001844 <main+0x730>)
 80016dc:	881b      	ldrh	r3, [r3, #0]
 80016de:	b29b      	uxth	r3, r3
 80016e0:	4e62      	ldr	r6, [pc, #392]	@ (800186c <main+0x758>)
 80016e2:	9308      	str	r3, [sp, #32]
 80016e4:	466d      	mov	r5, sp
 80016e6:	f106 0410 	add.w	r4, r6, #16
 80016ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016ee:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80016f2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80016f6:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80016fa:	f000 feb9 	bl	8002470 <MySPI_SendByte2AD5726>
          MySPI_SendByte2AD5726(EVO, E_CurC); // VO- when switch PG9 to 1
 80016fe:	4b50      	ldr	r3, [pc, #320]	@ (8001840 <main+0x72c>)
 8001700:	881b      	ldrh	r3, [r3, #0]
 8001702:	b29b      	uxth	r3, r3
 8001704:	4e59      	ldr	r6, [pc, #356]	@ (800186c <main+0x758>)
 8001706:	9308      	str	r3, [sp, #32]
 8001708:	466d      	mov	r5, sp
 800170a:	f106 0410 	add.w	r4, r6, #16
 800170e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001710:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001712:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001716:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800171a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800171e:	f000 fea7 	bl	8002470 <MySPI_SendByte2AD5726>
          MySPI_SendByte2AD5726(EVO, E_CurD); // VO- when switch PG9 to 0 (default)
 8001722:	4b46      	ldr	r3, [pc, #280]	@ (800183c <main+0x728>)
 8001724:	881b      	ldrh	r3, [r3, #0]
 8001726:	b29b      	uxth	r3, r3
 8001728:	4e50      	ldr	r6, [pc, #320]	@ (800186c <main+0x758>)
 800172a:	9308      	str	r3, [sp, #32]
 800172c:	466d      	mov	r5, sp
 800172e:	f106 0410 	add.w	r4, r6, #16
 8001732:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001734:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001736:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800173a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800173e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001742:	f000 fe95 	bl	8002470 <MySPI_SendByte2AD5726>
          if (Mode)
 8001746:	4b44      	ldr	r3, [pc, #272]	@ (8001858 <main+0x744>)
 8001748:	881b      	ldrh	r3, [r3, #0]
 800174a:	b29b      	uxth	r3, r3
 800174c:	2b00      	cmp	r3, #0
 800174e:	d012      	beq.n	8001776 <main+0x662>
          {
            __HAL_TIM_SET_AUTORELOAD(&hTIM_LTP, StimPeriod);
 8001750:	4b44      	ldr	r3, [pc, #272]	@ (8001864 <main+0x750>)
 8001752:	881b      	ldrh	r3, [r3, #0]
 8001754:	b29a      	uxth	r2, r3
 8001756:	4b46      	ldr	r3, [pc, #280]	@ (8001870 <main+0x75c>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800175c:	4b41      	ldr	r3, [pc, #260]	@ (8001864 <main+0x750>)
 800175e:	881b      	ldrh	r3, [r3, #0]
 8001760:	b29b      	uxth	r3, r3
 8001762:	461a      	mov	r2, r3
 8001764:	4b42      	ldr	r3, [pc, #264]	@ (8001870 <main+0x75c>)
 8001766:	60da      	str	r2, [r3, #12]
            __HAL_TIM_SET_COUNTER(&hTIM_LTP, 0);
 8001768:	4b41      	ldr	r3, [pc, #260]	@ (8001870 <main+0x75c>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	2200      	movs	r2, #0
 800176e:	625a      	str	r2, [r3, #36]	@ 0x24
            HAL_TIM_Base_Start_IT(&hTIM_LTP);
 8001770:	483f      	ldr	r0, [pc, #252]	@ (8001870 <main+0x75c>)
 8001772:	f004 fcc3 	bl	80060fc <HAL_TIM_Base_Start_IT>
          }

          __HAL_TIM_SET_AUTORELOAD(&hTIM_STP_Elec, E_PulsePeriod);
 8001776:	4b39      	ldr	r3, [pc, #228]	@ (800185c <main+0x748>)
 8001778:	881b      	ldrh	r3, [r3, #0]
 800177a:	b29a      	uxth	r2, r3
 800177c:	4b3d      	ldr	r3, [pc, #244]	@ (8001874 <main+0x760>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001782:	4b36      	ldr	r3, [pc, #216]	@ (800185c <main+0x748>)
 8001784:	881b      	ldrh	r3, [r3, #0]
 8001786:	b29b      	uxth	r3, r3
 8001788:	461a      	mov	r2, r3
 800178a:	4b3a      	ldr	r3, [pc, #232]	@ (8001874 <main+0x760>)
 800178c:	60da      	str	r2, [r3, #12]
          __HAL_TIM_SET_COUNTER(&hTIM_STP_Elec, 0);
 800178e:	4b39      	ldr	r3, [pc, #228]	@ (8001874 <main+0x760>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	2200      	movs	r2, #0
 8001794:	625a      	str	r2, [r3, #36]	@ 0x24
          HAL_TIM_Base_Start_IT(&hTIM_STP_Elec);
 8001796:	4837      	ldr	r0, [pc, #220]	@ (8001874 <main+0x760>)
 8001798:	f004 fcb0 	bl	80060fc <HAL_TIM_Base_Start_IT>
        }
        if (Mode)
 800179c:	4b2e      	ldr	r3, [pc, #184]	@ (8001858 <main+0x744>)
 800179e:	881b      	ldrh	r3, [r3, #0]
 80017a0:	b29b      	uxth	r3, r3
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	f000 80d1 	beq.w	800194a <main+0x836>
        {
          if (!LPeriod_flag)
 80017a8:	4b33      	ldr	r3, [pc, #204]	@ (8001878 <main+0x764>)
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	f040 80b8 	bne.w	8001924 <main+0x810>
          {
            if (!E_SPeriod_flag)
 80017b4:	4b31      	ldr	r3, [pc, #196]	@ (800187c <main+0x768>)
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	f040 85b1 	bne.w	8002322 <main+0x120e>
            {
              if (E_Sti_Count < E_Repeat)
 80017c0:	4b2f      	ldr	r3, [pc, #188]	@ (8001880 <main+0x76c>)
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	461a      	mov	r2, r3
 80017c8:	4b25      	ldr	r3, [pc, #148]	@ (8001860 <main+0x74c>)
 80017ca:	881b      	ldrh	r3, [r3, #0]
 80017cc:	b29b      	uxth	r3, r3
 80017ce:	429a      	cmp	r2, r3
 80017d0:	f080 808c 	bcs.w	80018ec <main+0x7d8>
              {
                if (!E_Stimulating)
 80017d4:	4b2b      	ldr	r3, [pc, #172]	@ (8001884 <main+0x770>)
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	2b00      	cmp	r3, #0
 80017dc:	f040 85a1 	bne.w	8002322 <main+0x120e>
                {
                  E_Stimulating = 1;
 80017e0:	4b28      	ldr	r3, [pc, #160]	@ (8001884 <main+0x770>)
 80017e2:	2201      	movs	r2, #1
 80017e4:	701a      	strb	r2, [r3, #0]
                  if (!elecstimulation(Site_group[Src_Site], Site_group[DstSite], CathodType))
 80017e6:	4b19      	ldr	r3, [pc, #100]	@ (800184c <main+0x738>)
 80017e8:	881b      	ldrh	r3, [r3, #0]
 80017ea:	b29b      	uxth	r3, r3
 80017ec:	461c      	mov	r4, r3
 80017ee:	4b19      	ldr	r3, [pc, #100]	@ (8001854 <main+0x740>)
 80017f0:	881b      	ldrh	r3, [r3, #0]
 80017f2:	b29b      	uxth	r3, r3
 80017f4:	4618      	mov	r0, r3
 80017f6:	4b16      	ldr	r3, [pc, #88]	@ (8001850 <main+0x73c>)
 80017f8:	881b      	ldrh	r3, [r3, #0]
 80017fa:	e045      	b.n	8001888 <main+0x774>
 80017fc:	20000048 	.word	0x20000048
 8001800:	200002bc 	.word	0x200002bc
 8001804:	2000047c 	.word	0x2000047c
 8001808:	200007bc 	.word	0x200007bc
 800180c:	2000043c 	.word	0x2000043c
 8001810:	200003fc 	.word	0x200003fc
 8001814:	2000077c 	.word	0x2000077c
 8001818:	2000073c 	.word	0x2000073c
 800181c:	200006fc 	.word	0x200006fc
 8001820:	200006bc 	.word	0x200006bc
 8001824:	200003bc 	.word	0x200003bc
 8001828:	2000037c 	.word	0x2000037c
 800182c:	2000033c 	.word	0x2000033c
 8001830:	200002fc 	.word	0x200002fc
 8001834:	200007fc 	.word	0x200007fc
 8001838:	200007fe 	.word	0x200007fe
 800183c:	20000806 	.word	0x20000806
 8001840:	20000804 	.word	0x20000804
 8001844:	20000802 	.word	0x20000802
 8001848:	20000800 	.word	0x20000800
 800184c:	2000081c 	.word	0x2000081c
 8001850:	2000081e 	.word	0x2000081e
 8001854:	20000820 	.word	0x20000820
 8001858:	20000822 	.word	0x20000822
 800185c:	20000808 	.word	0x20000808
 8001860:	2000080a 	.word	0x2000080a
 8001864:	20000824 	.word	0x20000824
 8001868:	40021000 	.word	0x40021000
 800186c:	08008a1c 	.word	0x08008a1c
 8001870:	20000968 	.word	0x20000968
 8001874:	2000091c 	.word	0x2000091c
 8001878:	20000829 	.word	0x20000829
 800187c:	20000828 	.word	0x20000828
 8001880:	20000827 	.word	0x20000827
 8001884:	20000826 	.word	0x20000826
 8001888:	b29b      	uxth	r3, r3
 800188a:	b2da      	uxtb	r2, r3
 800188c:	4961      	ldr	r1, [pc, #388]	@ (8001a14 <main+0x900>)
 800188e:	4623      	mov	r3, r4
 8001890:	005b      	lsls	r3, r3, #1
 8001892:	4423      	add	r3, r4
 8001894:	00db      	lsls	r3, r3, #3
 8001896:	18ce      	adds	r6, r1, r3
 8001898:	9208      	str	r2, [sp, #32]
 800189a:	4a5e      	ldr	r2, [pc, #376]	@ (8001a14 <main+0x900>)
 800189c:	4603      	mov	r3, r0
 800189e:	005b      	lsls	r3, r3, #1
 80018a0:	4403      	add	r3, r0
 80018a2:	00db      	lsls	r3, r3, #3
 80018a4:	4413      	add	r3, r2
 80018a6:	ac02      	add	r4, sp, #8
 80018a8:	461d      	mov	r5, r3
 80018aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018ae:	e895 0003 	ldmia.w	r5, {r0, r1}
 80018b2:	e884 0003 	stmia.w	r4, {r0, r1}
 80018b6:	466a      	mov	r2, sp
 80018b8:	f106 0310 	add.w	r3, r6, #16
 80018bc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80018c0:	e882 0003 	stmia.w	r2, {r0, r1}
 80018c4:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80018c8:	f7ff f8ba 	bl	8000a40 <elecstimulation>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	f040 8527 	bne.w	8002322 <main+0x120e>
                  {
                    E_Sti_Count++;
 80018d4:	4b50      	ldr	r3, [pc, #320]	@ (8001a18 <main+0x904>)
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	b2db      	uxtb	r3, r3
 80018da:	3301      	adds	r3, #1
 80018dc:	b2da      	uxtb	r2, r3
 80018de:	4b4e      	ldr	r3, [pc, #312]	@ (8001a18 <main+0x904>)
 80018e0:	701a      	strb	r2, [r3, #0]
                    E_SPeriod_flag = 1;
 80018e2:	4b4e      	ldr	r3, [pc, #312]	@ (8001a1c <main+0x908>)
 80018e4:	2201      	movs	r2, #1
 80018e6:	701a      	strb	r2, [r3, #0]
              E_Sti_Count = 0;
              HAL_TIM_Base_Stop_IT(&hTIM_STP_Elec);
            }
          }
        }
        break;
 80018e8:	f000 bd1b 	b.w	8002322 <main+0x120e>
                __HAL_TIM_DISABLE(&hTIM_STP_Elec);
 80018ec:	4b4c      	ldr	r3, [pc, #304]	@ (8001a20 <main+0x90c>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	6a1a      	ldr	r2, [r3, #32]
 80018f2:	f241 1311 	movw	r3, #4369	@ 0x1111
 80018f6:	4013      	ands	r3, r2
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	f040 8512 	bne.w	8002322 <main+0x120e>
 80018fe:	4b48      	ldr	r3, [pc, #288]	@ (8001a20 <main+0x90c>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	6a1a      	ldr	r2, [r3, #32]
 8001904:	f240 4344 	movw	r3, #1092	@ 0x444
 8001908:	4013      	ands	r3, r2
 800190a:	2b00      	cmp	r3, #0
 800190c:	f040 8509 	bne.w	8002322 <main+0x120e>
 8001910:	4b43      	ldr	r3, [pc, #268]	@ (8001a20 <main+0x90c>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	4b42      	ldr	r3, [pc, #264]	@ (8001a20 <main+0x90c>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f022 0201 	bic.w	r2, r2, #1
 800191e:	601a      	str	r2, [r3, #0]
        break;
 8001920:	f000 bcff 	b.w	8002322 <main+0x120e>
            LPeriod_flag = 0;
 8001924:	4b3f      	ldr	r3, [pc, #252]	@ (8001a24 <main+0x910>)
 8001926:	2200      	movs	r2, #0
 8001928:	701a      	strb	r2, [r3, #0]
            E_SPeriod_flag = 0;
 800192a:	4b3c      	ldr	r3, [pc, #240]	@ (8001a1c <main+0x908>)
 800192c:	2200      	movs	r2, #0
 800192e:	701a      	strb	r2, [r3, #0]
            E_Sti_Count = 0;
 8001930:	4b39      	ldr	r3, [pc, #228]	@ (8001a18 <main+0x904>)
 8001932:	2200      	movs	r2, #0
 8001934:	701a      	strb	r2, [r3, #0]
            __HAL_TIM_ENABLE(&hTIM_STP_Elec);
 8001936:	4b3a      	ldr	r3, [pc, #232]	@ (8001a20 <main+0x90c>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	4b38      	ldr	r3, [pc, #224]	@ (8001a20 <main+0x90c>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f042 0201 	orr.w	r2, r2, #1
 8001944:	601a      	str	r2, [r3, #0]
        break;
 8001946:	f000 bcec 	b.w	8002322 <main+0x120e>
          if (!E_SPeriod_flag)
 800194a:	4b34      	ldr	r3, [pc, #208]	@ (8001a1c <main+0x908>)
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	b2db      	uxtb	r3, r3
 8001950:	2b00      	cmp	r3, #0
 8001952:	f040 84e6 	bne.w	8002322 <main+0x120e>
            if (E_Sti_Count < E_Repeat)
 8001956:	4b30      	ldr	r3, [pc, #192]	@ (8001a18 <main+0x904>)
 8001958:	781b      	ldrb	r3, [r3, #0]
 800195a:	b2db      	uxtb	r3, r3
 800195c:	461a      	mov	r2, r3
 800195e:	4b32      	ldr	r3, [pc, #200]	@ (8001a28 <main+0x914>)
 8001960:	881b      	ldrh	r3, [r3, #0]
 8001962:	b29b      	uxth	r3, r3
 8001964:	429a      	cmp	r2, r3
 8001966:	d244      	bcs.n	80019f2 <main+0x8de>
              if (!E_Stimulating)
 8001968:	4b30      	ldr	r3, [pc, #192]	@ (8001a2c <main+0x918>)
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	b2db      	uxtb	r3, r3
 800196e:	2b00      	cmp	r3, #0
 8001970:	f040 84d7 	bne.w	8002322 <main+0x120e>
                E_Stimulating = 1;
 8001974:	4b2d      	ldr	r3, [pc, #180]	@ (8001a2c <main+0x918>)
 8001976:	2201      	movs	r2, #1
 8001978:	701a      	strb	r2, [r3, #0]
                if (!elecstimulation(Site_group[Src_Site], Site_group[DstSite], CathodType))
 800197a:	4b2d      	ldr	r3, [pc, #180]	@ (8001a30 <main+0x91c>)
 800197c:	881b      	ldrh	r3, [r3, #0]
 800197e:	b29b      	uxth	r3, r3
 8001980:	461c      	mov	r4, r3
 8001982:	4b2c      	ldr	r3, [pc, #176]	@ (8001a34 <main+0x920>)
 8001984:	881b      	ldrh	r3, [r3, #0]
 8001986:	b29b      	uxth	r3, r3
 8001988:	4618      	mov	r0, r3
 800198a:	4b2b      	ldr	r3, [pc, #172]	@ (8001a38 <main+0x924>)
 800198c:	881b      	ldrh	r3, [r3, #0]
 800198e:	b29b      	uxth	r3, r3
 8001990:	b2da      	uxtb	r2, r3
 8001992:	4920      	ldr	r1, [pc, #128]	@ (8001a14 <main+0x900>)
 8001994:	4623      	mov	r3, r4
 8001996:	005b      	lsls	r3, r3, #1
 8001998:	4423      	add	r3, r4
 800199a:	00db      	lsls	r3, r3, #3
 800199c:	18ce      	adds	r6, r1, r3
 800199e:	9208      	str	r2, [sp, #32]
 80019a0:	4a1c      	ldr	r2, [pc, #112]	@ (8001a14 <main+0x900>)
 80019a2:	4603      	mov	r3, r0
 80019a4:	005b      	lsls	r3, r3, #1
 80019a6:	4403      	add	r3, r0
 80019a8:	00db      	lsls	r3, r3, #3
 80019aa:	4413      	add	r3, r2
 80019ac:	ac02      	add	r4, sp, #8
 80019ae:	461d      	mov	r5, r3
 80019b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019b4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80019b8:	e884 0003 	stmia.w	r4, {r0, r1}
 80019bc:	466a      	mov	r2, sp
 80019be:	f106 0310 	add.w	r3, r6, #16
 80019c2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80019c6:	e882 0003 	stmia.w	r2, {r0, r1}
 80019ca:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80019ce:	f7ff f837 	bl	8000a40 <elecstimulation>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	f040 84a4 	bne.w	8002322 <main+0x120e>
                  E_Sti_Count++;
 80019da:	4b0f      	ldr	r3, [pc, #60]	@ (8001a18 <main+0x904>)
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	b2db      	uxtb	r3, r3
 80019e0:	3301      	adds	r3, #1
 80019e2:	b2da      	uxtb	r2, r3
 80019e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001a18 <main+0x904>)
 80019e6:	701a      	strb	r2, [r3, #0]
                  E_SPeriod_flag = 1;
 80019e8:	4b0c      	ldr	r3, [pc, #48]	@ (8001a1c <main+0x908>)
 80019ea:	2201      	movs	r2, #1
 80019ec:	701a      	strb	r2, [r3, #0]
        break;
 80019ee:	f000 bc98 	b.w	8002322 <main+0x120e>
              program_stage = 1;
 80019f2:	4b12      	ldr	r3, [pc, #72]	@ (8001a3c <main+0x928>)
 80019f4:	2201      	movs	r2, #1
 80019f6:	701a      	strb	r2, [r3, #0]
              ParReceive_enable = 1;
 80019f8:	4b11      	ldr	r3, [pc, #68]	@ (8001a40 <main+0x92c>)
 80019fa:	2201      	movs	r2, #1
 80019fc:	701a      	strb	r2, [r3, #0]
              E_SPeriod_flag = 0;
 80019fe:	4b07      	ldr	r3, [pc, #28]	@ (8001a1c <main+0x908>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	701a      	strb	r2, [r3, #0]
              E_Sti_Count = 0;
 8001a04:	4b04      	ldr	r3, [pc, #16]	@ (8001a18 <main+0x904>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	701a      	strb	r2, [r3, #0]
              HAL_TIM_Base_Stop_IT(&hTIM_STP_Elec);
 8001a0a:	4805      	ldr	r0, [pc, #20]	@ (8001a20 <main+0x90c>)
 8001a0c:	f004 fbee 	bl	80061ec <HAL_TIM_Base_Stop_IT>
        break;
 8001a10:	f000 bc87 	b.w	8002322 <main+0x120e>
 8001a14:	20000000 	.word	0x20000000
 8001a18:	20000827 	.word	0x20000827
 8001a1c:	20000828 	.word	0x20000828
 8001a20:	2000091c 	.word	0x2000091c
 8001a24:	20000829 	.word	0x20000829
 8001a28:	2000080a 	.word	0x2000080a
 8001a2c:	20000826 	.word	0x20000826
 8001a30:	2000081c 	.word	0x2000081c
 8001a34:	20000820 	.word	0x20000820
 8001a38:	2000081e 	.word	0x2000081e
 8001a3c:	200002b8 	.word	0x200002b8
 8001a40:	20000048 	.word	0x20000048
      case 5:
        if (ParReceive_enable)
 8001a44:	4ba6      	ldr	r3, [pc, #664]	@ (8001ce0 <main+0xbcc>)
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	f000 8267 	beq.w	8001f1e <main+0xe0a>
        {
          ParReceive_enable = 0;
 8001a50:	4ba3      	ldr	r3, [pc, #652]	@ (8001ce0 <main+0xbcc>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	701a      	strb	r2, [r3, #0]
          while (!getCmd(O_DATARx))
 8001a56:	bf00      	nop
 8001a58:	48a2      	ldr	r0, [pc, #648]	@ (8001ce4 <main+0xbd0>)
 8001a5a:	f001 fb87 	bl	800316c <getCmd>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d0f9      	beq.n	8001a58 <main+0x944>
            ;
          while (!getCmd(E_DATARx))
 8001a64:	bf00      	nop
 8001a66:	48a0      	ldr	r0, [pc, #640]	@ (8001ce8 <main+0xbd4>)
 8001a68:	f001 fb80 	bl	800316c <getCmd>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d0f9      	beq.n	8001a66 <main+0x952>
            ;
          parseCmd_O(O_DATARx, O_PTime1_s, O_PTime2_s, O_Cur1_s, O_Cur2_s, Mode_s, O_PulsePeriod_s, O_Repeat_s, StimPeriod_s, O_Delay_s);
 8001a72:	4b9e      	ldr	r3, [pc, #632]	@ (8001cec <main+0xbd8>)
 8001a74:	9305      	str	r3, [sp, #20]
 8001a76:	4b9e      	ldr	r3, [pc, #632]	@ (8001cf0 <main+0xbdc>)
 8001a78:	9304      	str	r3, [sp, #16]
 8001a7a:	4b9e      	ldr	r3, [pc, #632]	@ (8001cf4 <main+0xbe0>)
 8001a7c:	9303      	str	r3, [sp, #12]
 8001a7e:	4b9e      	ldr	r3, [pc, #632]	@ (8001cf8 <main+0xbe4>)
 8001a80:	9302      	str	r3, [sp, #8]
 8001a82:	4b9e      	ldr	r3, [pc, #632]	@ (8001cfc <main+0xbe8>)
 8001a84:	9301      	str	r3, [sp, #4]
 8001a86:	4b9e      	ldr	r3, [pc, #632]	@ (8001d00 <main+0xbec>)
 8001a88:	9300      	str	r3, [sp, #0]
 8001a8a:	4b9e      	ldr	r3, [pc, #632]	@ (8001d04 <main+0xbf0>)
 8001a8c:	4a9e      	ldr	r2, [pc, #632]	@ (8001d08 <main+0xbf4>)
 8001a8e:	499f      	ldr	r1, [pc, #636]	@ (8001d0c <main+0xbf8>)
 8001a90:	4894      	ldr	r0, [pc, #592]	@ (8001ce4 <main+0xbd0>)
 8001a92:	f001 fb8f 	bl	80031b4 <parseCmd_O>
          O_PTime1 = atoi(O_PTime1_s) / 250 - 1;
 8001a96:	489d      	ldr	r0, [pc, #628]	@ (8001d0c <main+0xbf8>)
 8001a98:	f005 ff1f 	bl	80078da <atoi>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	4a9c      	ldr	r2, [pc, #624]	@ (8001d10 <main+0xbfc>)
 8001aa0:	fb82 1203 	smull	r1, r2, r2, r3
 8001aa4:	1112      	asrs	r2, r2, #4
 8001aa6:	17db      	asrs	r3, r3, #31
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	b29b      	uxth	r3, r3
 8001aac:	3b01      	subs	r3, #1
 8001aae:	b29a      	uxth	r2, r3
 8001ab0:	4b98      	ldr	r3, [pc, #608]	@ (8001d14 <main+0xc00>)
 8001ab2:	801a      	strh	r2, [r3, #0]
          O_PTime2 = atoi(O_PTime2_s) / 250 - 1;
 8001ab4:	4894      	ldr	r0, [pc, #592]	@ (8001d08 <main+0xbf4>)
 8001ab6:	f005 ff10 	bl	80078da <atoi>
 8001aba:	4603      	mov	r3, r0
 8001abc:	4a94      	ldr	r2, [pc, #592]	@ (8001d10 <main+0xbfc>)
 8001abe:	fb82 1203 	smull	r1, r2, r2, r3
 8001ac2:	1112      	asrs	r2, r2, #4
 8001ac4:	17db      	asrs	r3, r3, #31
 8001ac6:	1ad3      	subs	r3, r2, r3
 8001ac8:	b29b      	uxth	r3, r3
 8001aca:	3b01      	subs	r3, #1
 8001acc:	b29a      	uxth	r2, r3
 8001ace:	4b92      	ldr	r3, [pc, #584]	@ (8001d18 <main+0xc04>)
 8001ad0:	801a      	strh	r2, [r3, #0]
          O_Cur1 = 0x100 + atoi(O_Cur1_s);
 8001ad2:	488c      	ldr	r0, [pc, #560]	@ (8001d04 <main+0xbf0>)
 8001ad4:	f005 ff01 	bl	80078da <atoi>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	b29b      	uxth	r3, r3
 8001adc:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8001ae0:	b29a      	uxth	r2, r3
 8001ae2:	4b8e      	ldr	r3, [pc, #568]	@ (8001d1c <main+0xc08>)
 8001ae4:	801a      	strh	r2, [r3, #0]
          O_Cur2 = 0x100 + atoi(O_Cur2_s);
 8001ae6:	4886      	ldr	r0, [pc, #536]	@ (8001d00 <main+0xbec>)
 8001ae8:	f005 fef7 	bl	80078da <atoi>
 8001aec:	4603      	mov	r3, r0
 8001aee:	b29b      	uxth	r3, r3
 8001af0:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8001af4:	b29a      	uxth	r2, r3
 8001af6:	4b8a      	ldr	r3, [pc, #552]	@ (8001d20 <main+0xc0c>)
 8001af8:	801a      	strh	r2, [r3, #0]
          O_PulsePeriod = atoi(O_PulsePeriod_s) / 250 - 1;
 8001afa:	487f      	ldr	r0, [pc, #508]	@ (8001cf8 <main+0xbe4>)
 8001afc:	f005 feed 	bl	80078da <atoi>
 8001b00:	4603      	mov	r3, r0
 8001b02:	4a83      	ldr	r2, [pc, #524]	@ (8001d10 <main+0xbfc>)
 8001b04:	fb82 1203 	smull	r1, r2, r2, r3
 8001b08:	1112      	asrs	r2, r2, #4
 8001b0a:	17db      	asrs	r3, r3, #31
 8001b0c:	1ad3      	subs	r3, r2, r3
 8001b0e:	b29b      	uxth	r3, r3
 8001b10:	3b01      	subs	r3, #1
 8001b12:	b29a      	uxth	r2, r3
 8001b14:	4b83      	ldr	r3, [pc, #524]	@ (8001d24 <main+0xc10>)
 8001b16:	801a      	strh	r2, [r3, #0]
          O_Repeat = atoi(O_Repeat_s);
 8001b18:	4876      	ldr	r0, [pc, #472]	@ (8001cf4 <main+0xbe0>)
 8001b1a:	f005 fede 	bl	80078da <atoi>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	b29a      	uxth	r2, r3
 8001b22:	4b81      	ldr	r3, [pc, #516]	@ (8001d28 <main+0xc14>)
 8001b24:	801a      	strh	r2, [r3, #0]
          O_Delay = atoi(O_Delay_s);
 8001b26:	4871      	ldr	r0, [pc, #452]	@ (8001cec <main+0xbd8>)
 8001b28:	f005 fed7 	bl	80078da <atoi>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	b29a      	uxth	r2, r3
 8001b30:	4b7e      	ldr	r3, [pc, #504]	@ (8001d2c <main+0xc18>)
 8001b32:	801a      	strh	r2, [r3, #0]

          parseCmd_E(E_DATARx, E_PTime1_s, E_PTime2_s, E_Cur1_s, E_Cur2_s, Src_Site_s, CathodType_s, DstSite_s,
 8001b34:	4b7e      	ldr	r3, [pc, #504]	@ (8001d30 <main+0xc1c>)
 8001b36:	9308      	str	r3, [sp, #32]
 8001b38:	4b6d      	ldr	r3, [pc, #436]	@ (8001cf0 <main+0xbdc>)
 8001b3a:	9307      	str	r3, [sp, #28]
 8001b3c:	4b7d      	ldr	r3, [pc, #500]	@ (8001d34 <main+0xc20>)
 8001b3e:	9306      	str	r3, [sp, #24]
 8001b40:	4b7d      	ldr	r3, [pc, #500]	@ (8001d38 <main+0xc24>)
 8001b42:	9305      	str	r3, [sp, #20]
 8001b44:	4b6d      	ldr	r3, [pc, #436]	@ (8001cfc <main+0xbe8>)
 8001b46:	9304      	str	r3, [sp, #16]
 8001b48:	4b7c      	ldr	r3, [pc, #496]	@ (8001d3c <main+0xc28>)
 8001b4a:	9303      	str	r3, [sp, #12]
 8001b4c:	4b7c      	ldr	r3, [pc, #496]	@ (8001d40 <main+0xc2c>)
 8001b4e:	9302      	str	r3, [sp, #8]
 8001b50:	4b7c      	ldr	r3, [pc, #496]	@ (8001d44 <main+0xc30>)
 8001b52:	9301      	str	r3, [sp, #4]
 8001b54:	4b7c      	ldr	r3, [pc, #496]	@ (8001d48 <main+0xc34>)
 8001b56:	9300      	str	r3, [sp, #0]
 8001b58:	4b7c      	ldr	r3, [pc, #496]	@ (8001d4c <main+0xc38>)
 8001b5a:	4a7d      	ldr	r2, [pc, #500]	@ (8001d50 <main+0xc3c>)
 8001b5c:	497d      	ldr	r1, [pc, #500]	@ (8001d54 <main+0xc40>)
 8001b5e:	4862      	ldr	r0, [pc, #392]	@ (8001ce8 <main+0xbd4>)
 8001b60:	f001 fb96 	bl	8003290 <parseCmd_E>
                     Mode_s, E_PulsePeriod_s, E_Repeat_s, StimPeriod_s, E_Delay_s);
          E_PTime1 = (uint32_t)atoi(E_PTime1_s) * 4 - 1 - 7;
 8001b64:	487b      	ldr	r0, [pc, #492]	@ (8001d54 <main+0xc40>)
 8001b66:	f005 feb8 	bl	80078da <atoi>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	461a      	mov	r2, r3
 8001b6e:	4b7a      	ldr	r3, [pc, #488]	@ (8001d58 <main+0xc44>)
 8001b70:	4413      	add	r3, r2
 8001b72:	b29b      	uxth	r3, r3
 8001b74:	009b      	lsls	r3, r3, #2
 8001b76:	b29a      	uxth	r2, r3
 8001b78:	4b78      	ldr	r3, [pc, #480]	@ (8001d5c <main+0xc48>)
 8001b7a:	801a      	strh	r2, [r3, #0]
          E_PTime2 = (uint32_t)atoi(E_PTime2_s) * 4 - 1 - 10;
 8001b7c:	4874      	ldr	r0, [pc, #464]	@ (8001d50 <main+0xc3c>)
 8001b7e:	f005 feac 	bl	80078da <atoi>
 8001b82:	4603      	mov	r3, r0
 8001b84:	b29b      	uxth	r3, r3
 8001b86:	009b      	lsls	r3, r3, #2
 8001b88:	b29b      	uxth	r3, r3
 8001b8a:	3b0b      	subs	r3, #11
 8001b8c:	b29a      	uxth	r2, r3
 8001b8e:	4b74      	ldr	r3, [pc, #464]	@ (8001d60 <main+0xc4c>)
 8001b90:	801a      	strh	r2, [r3, #0]
          E_CurD = (0b11 << 14) + (uint32_t)atoi(E_Cur1_s);        // Negtive High Current
 8001b92:	486e      	ldr	r0, [pc, #440]	@ (8001d4c <main+0xc38>)
 8001b94:	f005 fea1 	bl	80078da <atoi>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	b29b      	uxth	r3, r3
 8001b9c:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8001ba0:	b29a      	uxth	r2, r3
 8001ba2:	4b70      	ldr	r3, [pc, #448]	@ (8001d64 <main+0xc50>)
 8001ba4:	801a      	strh	r2, [r3, #0]
          E_CurC = (0b10 << 14) + (uint32_t)atoi(E_Cur2_s);        // Negtive Low Current
 8001ba6:	4868      	ldr	r0, [pc, #416]	@ (8001d48 <main+0xc34>)
 8001ba8:	f005 fe97 	bl	80078da <atoi>
 8001bac:	4603      	mov	r3, r0
 8001bae:	b29b      	uxth	r3, r3
 8001bb0:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 8001bb4:	b29a      	uxth	r2, r3
 8001bb6:	4b6c      	ldr	r3, [pc, #432]	@ (8001d68 <main+0xc54>)
 8001bb8:	801a      	strh	r2, [r3, #0]
          E_CurB = (0b01 << 14) + 4095 - (uint32_t)atoi(E_Cur1_s); // Positive High Current
 8001bba:	4864      	ldr	r0, [pc, #400]	@ (8001d4c <main+0xc38>)
 8001bbc:	f005 fe8d 	bl	80078da <atoi>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	b29a      	uxth	r2, r3
 8001bc4:	f644 73ff 	movw	r3, #20479	@ 0x4fff
 8001bc8:	1a9b      	subs	r3, r3, r2
 8001bca:	b29a      	uxth	r2, r3
 8001bcc:	4b67      	ldr	r3, [pc, #412]	@ (8001d6c <main+0xc58>)
 8001bce:	801a      	strh	r2, [r3, #0]
          E_CurA = (0b00 << 14) + 4095 - (uint32_t)atoi(E_Cur2_s); // Positive Low Current
 8001bd0:	485d      	ldr	r0, [pc, #372]	@ (8001d48 <main+0xc34>)
 8001bd2:	f005 fe82 	bl	80078da <atoi>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	b29a      	uxth	r2, r3
 8001bda:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8001bde:	1a9b      	subs	r3, r3, r2
 8001be0:	b29a      	uxth	r2, r3
 8001be2:	4b63      	ldr	r3, [pc, #396]	@ (8001d70 <main+0xc5c>)
 8001be4:	801a      	strh	r2, [r3, #0]
          Src_Site = (uint32_t)atoi(Src_Site_s);
 8001be6:	4857      	ldr	r0, [pc, #348]	@ (8001d44 <main+0xc30>)
 8001be8:	f005 fe77 	bl	80078da <atoi>
 8001bec:	4603      	mov	r3, r0
 8001bee:	b29a      	uxth	r2, r3
 8001bf0:	4b60      	ldr	r3, [pc, #384]	@ (8001d74 <main+0xc60>)
 8001bf2:	801a      	strh	r2, [r3, #0]
          CathodType = (uint32_t)atoi(CathodType_s);
 8001bf4:	4852      	ldr	r0, [pc, #328]	@ (8001d40 <main+0xc2c>)
 8001bf6:	f005 fe70 	bl	80078da <atoi>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	b29a      	uxth	r2, r3
 8001bfe:	4b5e      	ldr	r3, [pc, #376]	@ (8001d78 <main+0xc64>)
 8001c00:	801a      	strh	r2, [r3, #0]
          DstSite = (uint32_t)atoi(DstSite_s);
 8001c02:	484e      	ldr	r0, [pc, #312]	@ (8001d3c <main+0xc28>)
 8001c04:	f005 fe69 	bl	80078da <atoi>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	b29a      	uxth	r2, r3
 8001c0c:	4b5b      	ldr	r3, [pc, #364]	@ (8001d7c <main+0xc68>)
 8001c0e:	801a      	strh	r2, [r3, #0]
          Mode = (uint32_t)atoi(Mode_s);
 8001c10:	483a      	ldr	r0, [pc, #232]	@ (8001cfc <main+0xbe8>)
 8001c12:	f005 fe62 	bl	80078da <atoi>
 8001c16:	4603      	mov	r3, r0
 8001c18:	b29a      	uxth	r2, r3
 8001c1a:	4b59      	ldr	r3, [pc, #356]	@ (8001d80 <main+0xc6c>)
 8001c1c:	801a      	strh	r2, [r3, #0]
          E_PulsePeriod = (uint32_t)atoi(E_PulsePeriod_s) - 1;
 8001c1e:	4846      	ldr	r0, [pc, #280]	@ (8001d38 <main+0xc24>)
 8001c20:	f005 fe5b 	bl	80078da <atoi>
 8001c24:	4603      	mov	r3, r0
 8001c26:	b29b      	uxth	r3, r3
 8001c28:	3b01      	subs	r3, #1
 8001c2a:	b29a      	uxth	r2, r3
 8001c2c:	4b55      	ldr	r3, [pc, #340]	@ (8001d84 <main+0xc70>)
 8001c2e:	801a      	strh	r2, [r3, #0]
          E_Repeat = (uint32_t)atoi(E_Repeat_s);
 8001c30:	4840      	ldr	r0, [pc, #256]	@ (8001d34 <main+0xc20>)
 8001c32:	f005 fe52 	bl	80078da <atoi>
 8001c36:	4603      	mov	r3, r0
 8001c38:	b29a      	uxth	r2, r3
 8001c3a:	4b53      	ldr	r3, [pc, #332]	@ (8001d88 <main+0xc74>)
 8001c3c:	801a      	strh	r2, [r3, #0]
          StimPeriod = (uint32_t)atoi(StimPeriod_s) - 1;
 8001c3e:	482c      	ldr	r0, [pc, #176]	@ (8001cf0 <main+0xbdc>)
 8001c40:	f005 fe4b 	bl	80078da <atoi>
 8001c44:	4603      	mov	r3, r0
 8001c46:	b29b      	uxth	r3, r3
 8001c48:	3b01      	subs	r3, #1
 8001c4a:	b29a      	uxth	r2, r3
 8001c4c:	4b4f      	ldr	r3, [pc, #316]	@ (8001d8c <main+0xc78>)
 8001c4e:	801a      	strh	r2, [r3, #0]
          E_Delay = (uint32_t)atoi(E_Delay_s);
 8001c50:	4837      	ldr	r0, [pc, #220]	@ (8001d30 <main+0xc1c>)
 8001c52:	f005 fe42 	bl	80078da <atoi>
 8001c56:	4603      	mov	r3, r0
 8001c58:	b29a      	uxth	r2, r3
 8001c5a:	4b4d      	ldr	r3, [pc, #308]	@ (8001d90 <main+0xc7c>)
 8001c5c:	801a      	strh	r2, [r3, #0]

          HAL_GPIO_WritePin(EDAC_CLR_GPIO_Port, EDAC_CLR_Pin, GPIO_PIN_SET);
 8001c5e:	2201      	movs	r2, #1
 8001c60:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001c64:	484b      	ldr	r0, [pc, #300]	@ (8001d94 <main+0xc80>)
 8001c66:	f003 f85b 	bl	8004d20 <HAL_GPIO_WritePin>
          MySPI_SendByte2AD5726(EVO, E_CurA); // VO+ when switch PG14 to 1
 8001c6a:	4b41      	ldr	r3, [pc, #260]	@ (8001d70 <main+0xc5c>)
 8001c6c:	881b      	ldrh	r3, [r3, #0]
 8001c6e:	b29b      	uxth	r3, r3
 8001c70:	4e49      	ldr	r6, [pc, #292]	@ (8001d98 <main+0xc84>)
 8001c72:	9308      	str	r3, [sp, #32]
 8001c74:	466d      	mov	r5, sp
 8001c76:	f106 0410 	add.w	r4, r6, #16
 8001c7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c7c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c7e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001c82:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001c86:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001c8a:	f000 fbf1 	bl	8002470 <MySPI_SendByte2AD5726>
          MySPI_SendByte2AD5726(EVO, E_CurB); // VO+ when switch PG14 to 0 (default)
 8001c8e:	4b37      	ldr	r3, [pc, #220]	@ (8001d6c <main+0xc58>)
 8001c90:	881b      	ldrh	r3, [r3, #0]
 8001c92:	b29b      	uxth	r3, r3
 8001c94:	4e40      	ldr	r6, [pc, #256]	@ (8001d98 <main+0xc84>)
 8001c96:	9308      	str	r3, [sp, #32]
 8001c98:	466d      	mov	r5, sp
 8001c9a:	f106 0410 	add.w	r4, r6, #16
 8001c9e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ca0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ca2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001ca6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001caa:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001cae:	f000 fbdf 	bl	8002470 <MySPI_SendByte2AD5726>
          MySPI_SendByte2AD5726(EVO, E_CurC); // VO- when switch PG9 to 1
 8001cb2:	4b2d      	ldr	r3, [pc, #180]	@ (8001d68 <main+0xc54>)
 8001cb4:	881b      	ldrh	r3, [r3, #0]
 8001cb6:	b29b      	uxth	r3, r3
 8001cb8:	4e37      	ldr	r6, [pc, #220]	@ (8001d98 <main+0xc84>)
 8001cba:	9308      	str	r3, [sp, #32]
 8001cbc:	466d      	mov	r5, sp
 8001cbe:	f106 0410 	add.w	r4, r6, #16
 8001cc2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cc4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cc6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001cca:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001cce:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001cd2:	f000 fbcd 	bl	8002470 <MySPI_SendByte2AD5726>
          MySPI_SendByte2AD5726(EVO, E_CurD); // VO- when switch PG9 to 0 (default)
 8001cd6:	4b23      	ldr	r3, [pc, #140]	@ (8001d64 <main+0xc50>)
 8001cd8:	881b      	ldrh	r3, [r3, #0]
 8001cda:	b29b      	uxth	r3, r3
 8001cdc:	e05e      	b.n	8001d9c <main+0xc88>
 8001cde:	bf00      	nop
 8001ce0:	20000048 	.word	0x20000048
 8001ce4:	200004bc 	.word	0x200004bc
 8001ce8:	200002bc 	.word	0x200002bc
 8001cec:	2000067c 	.word	0x2000067c
 8001cf0:	200007bc 	.word	0x200007bc
 8001cf4:	2000063c 	.word	0x2000063c
 8001cf8:	200005fc 	.word	0x200005fc
 8001cfc:	2000077c 	.word	0x2000077c
 8001d00:	200005bc 	.word	0x200005bc
 8001d04:	2000057c 	.word	0x2000057c
 8001d08:	2000053c 	.word	0x2000053c
 8001d0c:	200004fc 	.word	0x200004fc
 8001d10:	10624dd3 	.word	0x10624dd3
 8001d14:	2000080e 	.word	0x2000080e
 8001d18:	20000810 	.word	0x20000810
 8001d1c:	20000812 	.word	0x20000812
 8001d20:	20000814 	.word	0x20000814
 8001d24:	20000816 	.word	0x20000816
 8001d28:	20000818 	.word	0x20000818
 8001d2c:	2000081a 	.word	0x2000081a
 8001d30:	2000047c 	.word	0x2000047c
 8001d34:	2000043c 	.word	0x2000043c
 8001d38:	200003fc 	.word	0x200003fc
 8001d3c:	2000073c 	.word	0x2000073c
 8001d40:	200006fc 	.word	0x200006fc
 8001d44:	200006bc 	.word	0x200006bc
 8001d48:	200003bc 	.word	0x200003bc
 8001d4c:	2000037c 	.word	0x2000037c
 8001d50:	2000033c 	.word	0x2000033c
 8001d54:	200002fc 	.word	0x200002fc
 8001d58:	3ffffffe 	.word	0x3ffffffe
 8001d5c:	200007fc 	.word	0x200007fc
 8001d60:	200007fe 	.word	0x200007fe
 8001d64:	20000806 	.word	0x20000806
 8001d68:	20000804 	.word	0x20000804
 8001d6c:	20000802 	.word	0x20000802
 8001d70:	20000800 	.word	0x20000800
 8001d74:	2000081c 	.word	0x2000081c
 8001d78:	2000081e 	.word	0x2000081e
 8001d7c:	20000820 	.word	0x20000820
 8001d80:	20000822 	.word	0x20000822
 8001d84:	20000808 	.word	0x20000808
 8001d88:	2000080a 	.word	0x2000080a
 8001d8c:	20000824 	.word	0x20000824
 8001d90:	2000080c 	.word	0x2000080c
 8001d94:	40021000 	.word	0x40021000
 8001d98:	08008a1c 	.word	0x08008a1c
 8001d9c:	4e7b      	ldr	r6, [pc, #492]	@ (8001f8c <main+0xe78>)
 8001d9e:	9308      	str	r3, [sp, #32]
 8001da0:	466d      	mov	r5, sp
 8001da2:	f106 0410 	add.w	r4, r6, #16
 8001da6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001da8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001daa:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001dae:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001db2:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001db6:	f000 fb5b 	bl	8002470 <MySPI_SendByte2AD5726>

          if (Mode)
 8001dba:	4b75      	ldr	r3, [pc, #468]	@ (8001f90 <main+0xe7c>)
 8001dbc:	881b      	ldrh	r3, [r3, #0]
 8001dbe:	b29b      	uxth	r3, r3
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d012      	beq.n	8001dea <main+0xcd6>
          {
            __HAL_TIM_SET_AUTORELOAD(&hTIM_LTP, StimPeriod);
 8001dc4:	4b73      	ldr	r3, [pc, #460]	@ (8001f94 <main+0xe80>)
 8001dc6:	881b      	ldrh	r3, [r3, #0]
 8001dc8:	b29a      	uxth	r2, r3
 8001dca:	4b73      	ldr	r3, [pc, #460]	@ (8001f98 <main+0xe84>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001dd0:	4b70      	ldr	r3, [pc, #448]	@ (8001f94 <main+0xe80>)
 8001dd2:	881b      	ldrh	r3, [r3, #0]
 8001dd4:	b29b      	uxth	r3, r3
 8001dd6:	461a      	mov	r2, r3
 8001dd8:	4b6f      	ldr	r3, [pc, #444]	@ (8001f98 <main+0xe84>)
 8001dda:	60da      	str	r2, [r3, #12]
            __HAL_TIM_SET_COUNTER(&hTIM_LTP, 0);
 8001ddc:	4b6e      	ldr	r3, [pc, #440]	@ (8001f98 <main+0xe84>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	2200      	movs	r2, #0
 8001de2:	625a      	str	r2, [r3, #36]	@ 0x24
            HAL_TIM_Base_Start_IT(&hTIM_LTP);
 8001de4:	486c      	ldr	r0, [pc, #432]	@ (8001f98 <main+0xe84>)
 8001de6:	f004 f989 	bl	80060fc <HAL_TIM_Base_Start_IT>
          }

          if (O_Delay < E_Delay)
 8001dea:	4b6c      	ldr	r3, [pc, #432]	@ (8001f9c <main+0xe88>)
 8001dec:	881b      	ldrh	r3, [r3, #0]
 8001dee:	b29a      	uxth	r2, r3
 8001df0:	4b6b      	ldr	r3, [pc, #428]	@ (8001fa0 <main+0xe8c>)
 8001df2:	881b      	ldrh	r3, [r3, #0]
 8001df4:	b29b      	uxth	r3, r3
 8001df6:	429a      	cmp	r2, r3
 8001df8:	d22e      	bcs.n	8001e58 <main+0xd44>
          {
            LED_first_flag = 1;
 8001dfa:	4b6a      	ldr	r3, [pc, #424]	@ (8001fa4 <main+0xe90>)
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	701a      	strb	r2, [r3, #0]
            O_stimallowed = 1;
 8001e00:	4b69      	ldr	r3, [pc, #420]	@ (8001fa8 <main+0xe94>)
 8001e02:	2201      	movs	r2, #1
 8001e04:	701a      	strb	r2, [r3, #0]
            __HAL_TIM_SET_AUTORELOAD(&hTIM_STP_Opto, O_PulsePeriod);
 8001e06:	4b69      	ldr	r3, [pc, #420]	@ (8001fac <main+0xe98>)
 8001e08:	881b      	ldrh	r3, [r3, #0]
 8001e0a:	b29a      	uxth	r2, r3
 8001e0c:	4b68      	ldr	r3, [pc, #416]	@ (8001fb0 <main+0xe9c>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001e12:	4b66      	ldr	r3, [pc, #408]	@ (8001fac <main+0xe98>)
 8001e14:	881b      	ldrh	r3, [r3, #0]
 8001e16:	b29b      	uxth	r3, r3
 8001e18:	461a      	mov	r2, r3
 8001e1a:	4b65      	ldr	r3, [pc, #404]	@ (8001fb0 <main+0xe9c>)
 8001e1c:	60da      	str	r2, [r3, #12]
            __HAL_TIM_SET_COUNTER(&hTIM_STP_Opto, 0);
 8001e1e:	4b64      	ldr	r3, [pc, #400]	@ (8001fb0 <main+0xe9c>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	2200      	movs	r2, #0
 8001e24:	625a      	str	r2, [r3, #36]	@ 0x24
            HAL_TIM_Base_Start_IT(&hTIM_STP_Opto);
 8001e26:	4862      	ldr	r0, [pc, #392]	@ (8001fb0 <main+0xe9c>)
 8001e28:	f004 f968 	bl	80060fc <HAL_TIM_Base_Start_IT>

            __HAL_TIM_SET_AUTORELOAD(&hTIM_Delay, E_Delay - 1);
 8001e2c:	4b5c      	ldr	r3, [pc, #368]	@ (8001fa0 <main+0xe8c>)
 8001e2e:	881b      	ldrh	r3, [r3, #0]
 8001e30:	b29b      	uxth	r3, r3
 8001e32:	1e5a      	subs	r2, r3, #1
 8001e34:	4b5f      	ldr	r3, [pc, #380]	@ (8001fb4 <main+0xea0>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001e3a:	4b59      	ldr	r3, [pc, #356]	@ (8001fa0 <main+0xe8c>)
 8001e3c:	881b      	ldrh	r3, [r3, #0]
 8001e3e:	b29b      	uxth	r3, r3
 8001e40:	3b01      	subs	r3, #1
 8001e42:	461a      	mov	r2, r3
 8001e44:	4b5b      	ldr	r3, [pc, #364]	@ (8001fb4 <main+0xea0>)
 8001e46:	60da      	str	r2, [r3, #12]
            __HAL_TIM_SET_COUNTER(&hTIM_Delay, 0);
 8001e48:	4b5a      	ldr	r3, [pc, #360]	@ (8001fb4 <main+0xea0>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	625a      	str	r2, [r3, #36]	@ 0x24
            HAL_TIM_Base_Start_IT(&hTIM_Delay);
 8001e50:	4858      	ldr	r0, [pc, #352]	@ (8001fb4 <main+0xea0>)
 8001e52:	f004 f953 	bl	80060fc <HAL_TIM_Base_Start_IT>
 8001e56:	e062      	b.n	8001f1e <main+0xe0a>
          }
          else if (O_Delay > E_Delay)
 8001e58:	4b50      	ldr	r3, [pc, #320]	@ (8001f9c <main+0xe88>)
 8001e5a:	881b      	ldrh	r3, [r3, #0]
 8001e5c:	b29a      	uxth	r2, r3
 8001e5e:	4b50      	ldr	r3, [pc, #320]	@ (8001fa0 <main+0xe8c>)
 8001e60:	881b      	ldrh	r3, [r3, #0]
 8001e62:	b29b      	uxth	r3, r3
 8001e64:	429a      	cmp	r2, r3
 8001e66:	d92e      	bls.n	8001ec6 <main+0xdb2>
          {
            LED_first_flag = 0;
 8001e68:	4b4e      	ldr	r3, [pc, #312]	@ (8001fa4 <main+0xe90>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	701a      	strb	r2, [r3, #0]
            E_stimallowed = 1;
 8001e6e:	4b52      	ldr	r3, [pc, #328]	@ (8001fb8 <main+0xea4>)
 8001e70:	2201      	movs	r2, #1
 8001e72:	701a      	strb	r2, [r3, #0]
            __HAL_TIM_SET_AUTORELOAD(&hTIM_STP_Elec, E_PulsePeriod);
 8001e74:	4b51      	ldr	r3, [pc, #324]	@ (8001fbc <main+0xea8>)
 8001e76:	881b      	ldrh	r3, [r3, #0]
 8001e78:	b29a      	uxth	r2, r3
 8001e7a:	4b51      	ldr	r3, [pc, #324]	@ (8001fc0 <main+0xeac>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001e80:	4b4e      	ldr	r3, [pc, #312]	@ (8001fbc <main+0xea8>)
 8001e82:	881b      	ldrh	r3, [r3, #0]
 8001e84:	b29b      	uxth	r3, r3
 8001e86:	461a      	mov	r2, r3
 8001e88:	4b4d      	ldr	r3, [pc, #308]	@ (8001fc0 <main+0xeac>)
 8001e8a:	60da      	str	r2, [r3, #12]
            __HAL_TIM_SET_COUNTER(&hTIM_STP_Elec, 0);
 8001e8c:	4b4c      	ldr	r3, [pc, #304]	@ (8001fc0 <main+0xeac>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	2200      	movs	r2, #0
 8001e92:	625a      	str	r2, [r3, #36]	@ 0x24
            HAL_TIM_Base_Start_IT(&hTIM_STP_Elec);
 8001e94:	484a      	ldr	r0, [pc, #296]	@ (8001fc0 <main+0xeac>)
 8001e96:	f004 f931 	bl	80060fc <HAL_TIM_Base_Start_IT>

            __HAL_TIM_SET_AUTORELOAD(&hTIM_Delay, O_Delay - 1);
 8001e9a:	4b40      	ldr	r3, [pc, #256]	@ (8001f9c <main+0xe88>)
 8001e9c:	881b      	ldrh	r3, [r3, #0]
 8001e9e:	b29b      	uxth	r3, r3
 8001ea0:	1e5a      	subs	r2, r3, #1
 8001ea2:	4b44      	ldr	r3, [pc, #272]	@ (8001fb4 <main+0xea0>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001ea8:	4b3c      	ldr	r3, [pc, #240]	@ (8001f9c <main+0xe88>)
 8001eaa:	881b      	ldrh	r3, [r3, #0]
 8001eac:	b29b      	uxth	r3, r3
 8001eae:	3b01      	subs	r3, #1
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	4b40      	ldr	r3, [pc, #256]	@ (8001fb4 <main+0xea0>)
 8001eb4:	60da      	str	r2, [r3, #12]
            __HAL_TIM_SET_COUNTER(&hTIM_Delay, 0);
 8001eb6:	4b3f      	ldr	r3, [pc, #252]	@ (8001fb4 <main+0xea0>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	625a      	str	r2, [r3, #36]	@ 0x24
            HAL_TIM_Base_Start_IT(&hTIM_Delay);
 8001ebe:	483d      	ldr	r0, [pc, #244]	@ (8001fb4 <main+0xea0>)
 8001ec0:	f004 f91c 	bl	80060fc <HAL_TIM_Base_Start_IT>
 8001ec4:	e02b      	b.n	8001f1e <main+0xe0a>
          }
          else
          {
            O_stimallowed = 1;
 8001ec6:	4b38      	ldr	r3, [pc, #224]	@ (8001fa8 <main+0xe94>)
 8001ec8:	2201      	movs	r2, #1
 8001eca:	701a      	strb	r2, [r3, #0]
            E_stimallowed = 1;
 8001ecc:	4b3a      	ldr	r3, [pc, #232]	@ (8001fb8 <main+0xea4>)
 8001ece:	2201      	movs	r2, #1
 8001ed0:	701a      	strb	r2, [r3, #0]
            __HAL_TIM_SET_AUTORELOAD(&hTIM_STP_Opto, O_PulsePeriod);
 8001ed2:	4b36      	ldr	r3, [pc, #216]	@ (8001fac <main+0xe98>)
 8001ed4:	881b      	ldrh	r3, [r3, #0]
 8001ed6:	b29a      	uxth	r2, r3
 8001ed8:	4b35      	ldr	r3, [pc, #212]	@ (8001fb0 <main+0xe9c>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001ede:	4b33      	ldr	r3, [pc, #204]	@ (8001fac <main+0xe98>)
 8001ee0:	881b      	ldrh	r3, [r3, #0]
 8001ee2:	b29b      	uxth	r3, r3
 8001ee4:	461a      	mov	r2, r3
 8001ee6:	4b32      	ldr	r3, [pc, #200]	@ (8001fb0 <main+0xe9c>)
 8001ee8:	60da      	str	r2, [r3, #12]
            __HAL_TIM_SET_COUNTER(&hTIM_STP_Opto, 0);
 8001eea:	4b31      	ldr	r3, [pc, #196]	@ (8001fb0 <main+0xe9c>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	625a      	str	r2, [r3, #36]	@ 0x24
            HAL_TIM_Base_Start_IT(&hTIM_STP_Opto);
 8001ef2:	482f      	ldr	r0, [pc, #188]	@ (8001fb0 <main+0xe9c>)
 8001ef4:	f004 f902 	bl	80060fc <HAL_TIM_Base_Start_IT>

            __HAL_TIM_SET_AUTORELOAD(&hTIM_STP_Elec, E_PulsePeriod);
 8001ef8:	4b30      	ldr	r3, [pc, #192]	@ (8001fbc <main+0xea8>)
 8001efa:	881b      	ldrh	r3, [r3, #0]
 8001efc:	b29a      	uxth	r2, r3
 8001efe:	4b30      	ldr	r3, [pc, #192]	@ (8001fc0 <main+0xeac>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001f04:	4b2d      	ldr	r3, [pc, #180]	@ (8001fbc <main+0xea8>)
 8001f06:	881b      	ldrh	r3, [r3, #0]
 8001f08:	b29b      	uxth	r3, r3
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	4b2c      	ldr	r3, [pc, #176]	@ (8001fc0 <main+0xeac>)
 8001f0e:	60da      	str	r2, [r3, #12]
            __HAL_TIM_SET_COUNTER(&hTIM_STP_Elec, 0);
 8001f10:	4b2b      	ldr	r3, [pc, #172]	@ (8001fc0 <main+0xeac>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	2200      	movs	r2, #0
 8001f16:	625a      	str	r2, [r3, #36]	@ 0x24
            HAL_TIM_Base_Start_IT(&hTIM_STP_Elec);
 8001f18:	4829      	ldr	r0, [pc, #164]	@ (8001fc0 <main+0xeac>)
 8001f1a:	f004 f8ef 	bl	80060fc <HAL_TIM_Base_Start_IT>
          }
        }
        if (Mode)
 8001f1e:	4b1c      	ldr	r3, [pc, #112]	@ (8001f90 <main+0xe7c>)
 8001f20:	881b      	ldrh	r3, [r3, #0]
 8001f22:	b29b      	uxth	r3, r3
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	f000 8115 	beq.w	8002154 <main+0x1040>
        {
          if (!LPeriod_flag)
 8001f2a:	4b26      	ldr	r3, [pc, #152]	@ (8001fc4 <main+0xeb0>)
 8001f2c:	781b      	ldrb	r3, [r3, #0]
 8001f2e:	b2db      	uxtb	r3, r3
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	f040 80b7 	bne.w	80020a4 <main+0xf90>
          {
            if (O_stimallowed)
 8001f36:	4b1c      	ldr	r3, [pc, #112]	@ (8001fa8 <main+0xe94>)
 8001f38:	781b      	ldrb	r3, [r3, #0]
 8001f3a:	b2db      	uxtb	r3, r3
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d051      	beq.n	8001fe4 <main+0xed0>
            {
              if (!O_SPeriod_flag)
 8001f40:	4b21      	ldr	r3, [pc, #132]	@ (8001fc8 <main+0xeb4>)
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d14c      	bne.n	8001fe4 <main+0xed0>
              {
                if (O_Sti_Count < O_Repeat)
 8001f4a:	4b20      	ldr	r3, [pc, #128]	@ (8001fcc <main+0xeb8>)
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	b2db      	uxtb	r3, r3
 8001f50:	461a      	mov	r2, r3
 8001f52:	4b1f      	ldr	r3, [pc, #124]	@ (8001fd0 <main+0xebc>)
 8001f54:	881b      	ldrh	r3, [r3, #0]
 8001f56:	b29b      	uxth	r3, r3
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	d23d      	bcs.n	8001fd8 <main+0xec4>
                {
                  if (!O_Stimulating)
 8001f5c:	4b1d      	ldr	r3, [pc, #116]	@ (8001fd4 <main+0xec0>)
 8001f5e:	781b      	ldrb	r3, [r3, #0]
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d13e      	bne.n	8001fe4 <main+0xed0>
                  {
                    O_Stimulating = 1;
 8001f66:	4b1b      	ldr	r3, [pc, #108]	@ (8001fd4 <main+0xec0>)
 8001f68:	2201      	movs	r2, #1
 8001f6a:	701a      	strb	r2, [r3, #0]
                    if (!optostimulation())
 8001f6c:	f000 fbb4 	bl	80026d8 <optostimulation>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d136      	bne.n	8001fe4 <main+0xed0>
                    {
                      O_Sti_Count++;
 8001f76:	4b15      	ldr	r3, [pc, #84]	@ (8001fcc <main+0xeb8>)
 8001f78:	781b      	ldrb	r3, [r3, #0]
 8001f7a:	b2db      	uxtb	r3, r3
 8001f7c:	3301      	adds	r3, #1
 8001f7e:	b2da      	uxtb	r2, r3
 8001f80:	4b12      	ldr	r3, [pc, #72]	@ (8001fcc <main+0xeb8>)
 8001f82:	701a      	strb	r2, [r3, #0]
                      O_SPeriod_flag = 1;
 8001f84:	4b10      	ldr	r3, [pc, #64]	@ (8001fc8 <main+0xeb4>)
 8001f86:	2201      	movs	r2, #1
 8001f88:	701a      	strb	r2, [r3, #0]
 8001f8a:	e02b      	b.n	8001fe4 <main+0xed0>
 8001f8c:	08008a1c 	.word	0x08008a1c
 8001f90:	20000822 	.word	0x20000822
 8001f94:	20000824 	.word	0x20000824
 8001f98:	20000968 	.word	0x20000968
 8001f9c:	2000081a 	.word	0x2000081a
 8001fa0:	2000080c 	.word	0x2000080c
 8001fa4:	20000049 	.word	0x20000049
 8001fa8:	2000082f 	.word	0x2000082f
 8001fac:	20000816 	.word	0x20000816
 8001fb0:	20000a00 	.word	0x20000a00
 8001fb4:	20000838 	.word	0x20000838
 8001fb8:	20000830 	.word	0x20000830
 8001fbc:	20000808 	.word	0x20000808
 8001fc0:	2000091c 	.word	0x2000091c
 8001fc4:	20000829 	.word	0x20000829
 8001fc8:	2000082c 	.word	0x2000082c
 8001fcc:	2000082b 	.word	0x2000082b
 8001fd0:	20000818 	.word	0x20000818
 8001fd4:	2000082a 	.word	0x2000082a
                    }
                  }
                }
                else
                {
                  O_stimallowed = 0;
 8001fd8:	4ba3      	ldr	r3, [pc, #652]	@ (8002268 <main+0x1154>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	701a      	strb	r2, [r3, #0]
                  HAL_TIM_Base_Stop_IT(&hTIM_STP_Opto);
 8001fde:	48a3      	ldr	r0, [pc, #652]	@ (800226c <main+0x1158>)
 8001fe0:	f004 f904 	bl	80061ec <HAL_TIM_Base_Stop_IT>
                }
              }
            }

            if (E_stimallowed)
 8001fe4:	4ba2      	ldr	r3, [pc, #648]	@ (8002270 <main+0x115c>)
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	f000 819a 	beq.w	8002324 <main+0x1210>
            {
              if (!E_SPeriod_flag)
 8001ff0:	4ba0      	ldr	r3, [pc, #640]	@ (8002274 <main+0x1160>)
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	f040 8194 	bne.w	8002324 <main+0x1210>
              {
                if (E_Sti_Count < E_Repeat)
 8001ffc:	4b9e      	ldr	r3, [pc, #632]	@ (8002278 <main+0x1164>)
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	b2db      	uxtb	r3, r3
 8002002:	461a      	mov	r2, r3
 8002004:	4b9d      	ldr	r3, [pc, #628]	@ (800227c <main+0x1168>)
 8002006:	881b      	ldrh	r3, [r3, #0]
 8002008:	b29b      	uxth	r3, r3
 800200a:	429a      	cmp	r2, r3
 800200c:	d243      	bcs.n	8002096 <main+0xf82>
                {
                  if (!E_Stimulating)
 800200e:	4b9c      	ldr	r3, [pc, #624]	@ (8002280 <main+0x116c>)
 8002010:	781b      	ldrb	r3, [r3, #0]
 8002012:	b2db      	uxtb	r3, r3
 8002014:	2b00      	cmp	r3, #0
 8002016:	f040 8185 	bne.w	8002324 <main+0x1210>
                  {
                    E_Stimulating = 1;
 800201a:	4b99      	ldr	r3, [pc, #612]	@ (8002280 <main+0x116c>)
 800201c:	2201      	movs	r2, #1
 800201e:	701a      	strb	r2, [r3, #0]
                    if (!elecstimulation(Site_group[Src_Site], Site_group[DstSite], CathodType))
 8002020:	4b98      	ldr	r3, [pc, #608]	@ (8002284 <main+0x1170>)
 8002022:	881b      	ldrh	r3, [r3, #0]
 8002024:	b29b      	uxth	r3, r3
 8002026:	461c      	mov	r4, r3
 8002028:	4b97      	ldr	r3, [pc, #604]	@ (8002288 <main+0x1174>)
 800202a:	881b      	ldrh	r3, [r3, #0]
 800202c:	b29b      	uxth	r3, r3
 800202e:	4618      	mov	r0, r3
 8002030:	4b96      	ldr	r3, [pc, #600]	@ (800228c <main+0x1178>)
 8002032:	881b      	ldrh	r3, [r3, #0]
 8002034:	b29b      	uxth	r3, r3
 8002036:	b2da      	uxtb	r2, r3
 8002038:	4995      	ldr	r1, [pc, #596]	@ (8002290 <main+0x117c>)
 800203a:	4623      	mov	r3, r4
 800203c:	005b      	lsls	r3, r3, #1
 800203e:	4423      	add	r3, r4
 8002040:	00db      	lsls	r3, r3, #3
 8002042:	18ce      	adds	r6, r1, r3
 8002044:	9208      	str	r2, [sp, #32]
 8002046:	4a92      	ldr	r2, [pc, #584]	@ (8002290 <main+0x117c>)
 8002048:	4603      	mov	r3, r0
 800204a:	005b      	lsls	r3, r3, #1
 800204c:	4403      	add	r3, r0
 800204e:	00db      	lsls	r3, r3, #3
 8002050:	4413      	add	r3, r2
 8002052:	ac02      	add	r4, sp, #8
 8002054:	461d      	mov	r5, r3
 8002056:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002058:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800205a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800205e:	e884 0003 	stmia.w	r4, {r0, r1}
 8002062:	466a      	mov	r2, sp
 8002064:	f106 0310 	add.w	r3, r6, #16
 8002068:	e893 0003 	ldmia.w	r3, {r0, r1}
 800206c:	e882 0003 	stmia.w	r2, {r0, r1}
 8002070:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002074:	f7fe fce4 	bl	8000a40 <elecstimulation>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	f040 8152 	bne.w	8002324 <main+0x1210>
                    {
                      E_Sti_Count++;
 8002080:	4b7d      	ldr	r3, [pc, #500]	@ (8002278 <main+0x1164>)
 8002082:	781b      	ldrb	r3, [r3, #0]
 8002084:	b2db      	uxtb	r3, r3
 8002086:	3301      	adds	r3, #1
 8002088:	b2da      	uxtb	r2, r3
 800208a:	4b7b      	ldr	r3, [pc, #492]	@ (8002278 <main+0x1164>)
 800208c:	701a      	strb	r2, [r3, #0]
                      E_SPeriod_flag = 1;
 800208e:	4b79      	ldr	r3, [pc, #484]	@ (8002274 <main+0x1160>)
 8002090:	2201      	movs	r2, #1
 8002092:	701a      	strb	r2, [r3, #0]
 8002094:	e146      	b.n	8002324 <main+0x1210>
                    }
                  }
                }
                else
                {
                  E_stimallowed = 0;
 8002096:	4b76      	ldr	r3, [pc, #472]	@ (8002270 <main+0x115c>)
 8002098:	2200      	movs	r2, #0
 800209a:	701a      	strb	r2, [r3, #0]
                  HAL_TIM_Base_Stop_IT(&hTIM_STP_Elec);
 800209c:	487d      	ldr	r0, [pc, #500]	@ (8002294 <main+0x1180>)
 800209e:	f004 f8a5 	bl	80061ec <HAL_TIM_Base_Stop_IT>
 80020a2:	e13f      	b.n	8002324 <main+0x1210>
              }
            }
          }
          else
          {
            E_Sti_Count = 0;
 80020a4:	4b74      	ldr	r3, [pc, #464]	@ (8002278 <main+0x1164>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	701a      	strb	r2, [r3, #0]
            O_Sti_Count = 0;
 80020aa:	4b7b      	ldr	r3, [pc, #492]	@ (8002298 <main+0x1184>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	701a      	strb	r2, [r3, #0]
            LPeriod_flag = 0;
 80020b0:	4b7a      	ldr	r3, [pc, #488]	@ (800229c <main+0x1188>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	701a      	strb	r2, [r3, #0]

            if (O_Delay < E_Delay)
 80020b6:	4b7a      	ldr	r3, [pc, #488]	@ (80022a0 <main+0x118c>)
 80020b8:	881b      	ldrh	r3, [r3, #0]
 80020ba:	b29a      	uxth	r2, r3
 80020bc:	4b79      	ldr	r3, [pc, #484]	@ (80022a4 <main+0x1190>)
 80020be:	881b      	ldrh	r3, [r3, #0]
 80020c0:	b29b      	uxth	r3, r3
 80020c2:	429a      	cmp	r2, r3
 80020c4:	d214      	bcs.n	80020f0 <main+0xfdc>
            {
              LED_first_flag = 1;
 80020c6:	4b78      	ldr	r3, [pc, #480]	@ (80022a8 <main+0x1194>)
 80020c8:	2201      	movs	r2, #1
 80020ca:	701a      	strb	r2, [r3, #0]
              O_stimallowed = 1;
 80020cc:	4b66      	ldr	r3, [pc, #408]	@ (8002268 <main+0x1154>)
 80020ce:	2201      	movs	r2, #1
 80020d0:	701a      	strb	r2, [r3, #0]
              __HAL_TIM_SET_COUNTER(&hTIM_STP_Opto, 0);
 80020d2:	4b66      	ldr	r3, [pc, #408]	@ (800226c <main+0x1158>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	2200      	movs	r2, #0
 80020d8:	625a      	str	r2, [r3, #36]	@ 0x24
              HAL_TIM_Base_Start_IT(&hTIM_STP_Opto);
 80020da:	4864      	ldr	r0, [pc, #400]	@ (800226c <main+0x1158>)
 80020dc:	f004 f80e 	bl	80060fc <HAL_TIM_Base_Start_IT>

              __HAL_TIM_SET_COUNTER(&hTIM_Delay, 0);
 80020e0:	4b72      	ldr	r3, [pc, #456]	@ (80022ac <main+0x1198>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	2200      	movs	r2, #0
 80020e6:	625a      	str	r2, [r3, #36]	@ 0x24
              HAL_TIM_Base_Start_IT(&hTIM_Delay);
 80020e8:	4870      	ldr	r0, [pc, #448]	@ (80022ac <main+0x1198>)
 80020ea:	f004 f807 	bl	80060fc <HAL_TIM_Base_Start_IT>
 80020ee:	e119      	b.n	8002324 <main+0x1210>
            }
            else if (O_Delay > E_Delay)
 80020f0:	4b6b      	ldr	r3, [pc, #428]	@ (80022a0 <main+0x118c>)
 80020f2:	881b      	ldrh	r3, [r3, #0]
 80020f4:	b29a      	uxth	r2, r3
 80020f6:	4b6b      	ldr	r3, [pc, #428]	@ (80022a4 <main+0x1190>)
 80020f8:	881b      	ldrh	r3, [r3, #0]
 80020fa:	b29b      	uxth	r3, r3
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d914      	bls.n	800212a <main+0x1016>
            {
              LED_first_flag = 0;
 8002100:	4b69      	ldr	r3, [pc, #420]	@ (80022a8 <main+0x1194>)
 8002102:	2200      	movs	r2, #0
 8002104:	701a      	strb	r2, [r3, #0]
              E_stimallowed = 1;
 8002106:	4b5a      	ldr	r3, [pc, #360]	@ (8002270 <main+0x115c>)
 8002108:	2201      	movs	r2, #1
 800210a:	701a      	strb	r2, [r3, #0]
              __HAL_TIM_SET_COUNTER(&hTIM_STP_Elec, 0);
 800210c:	4b61      	ldr	r3, [pc, #388]	@ (8002294 <main+0x1180>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	2200      	movs	r2, #0
 8002112:	625a      	str	r2, [r3, #36]	@ 0x24
              HAL_TIM_Base_Start_IT(&hTIM_STP_Elec);
 8002114:	485f      	ldr	r0, [pc, #380]	@ (8002294 <main+0x1180>)
 8002116:	f003 fff1 	bl	80060fc <HAL_TIM_Base_Start_IT>

              __HAL_TIM_SET_COUNTER(&hTIM_Delay, 0);
 800211a:	4b64      	ldr	r3, [pc, #400]	@ (80022ac <main+0x1198>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	2200      	movs	r2, #0
 8002120:	625a      	str	r2, [r3, #36]	@ 0x24
              HAL_TIM_Base_Start_IT(&hTIM_Delay);
 8002122:	4862      	ldr	r0, [pc, #392]	@ (80022ac <main+0x1198>)
 8002124:	f003 ffea 	bl	80060fc <HAL_TIM_Base_Start_IT>
 8002128:	e0fc      	b.n	8002324 <main+0x1210>
            }
            else
            {
              O_stimallowed = 1;
 800212a:	4b4f      	ldr	r3, [pc, #316]	@ (8002268 <main+0x1154>)
 800212c:	2201      	movs	r2, #1
 800212e:	701a      	strb	r2, [r3, #0]
              E_stimallowed = 1;
 8002130:	4b4f      	ldr	r3, [pc, #316]	@ (8002270 <main+0x115c>)
 8002132:	2201      	movs	r2, #1
 8002134:	701a      	strb	r2, [r3, #0]
              __HAL_TIM_SET_COUNTER(&hTIM_STP_Opto, 0);
 8002136:	4b4d      	ldr	r3, [pc, #308]	@ (800226c <main+0x1158>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	2200      	movs	r2, #0
 800213c:	625a      	str	r2, [r3, #36]	@ 0x24
              HAL_TIM_Base_Start_IT(&hTIM_STP_Opto);
 800213e:	484b      	ldr	r0, [pc, #300]	@ (800226c <main+0x1158>)
 8002140:	f003 ffdc 	bl	80060fc <HAL_TIM_Base_Start_IT>

              __HAL_TIM_SET_COUNTER(&hTIM_STP_Elec, 0);
 8002144:	4b53      	ldr	r3, [pc, #332]	@ (8002294 <main+0x1180>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	2200      	movs	r2, #0
 800214a:	625a      	str	r2, [r3, #36]	@ 0x24
              HAL_TIM_Base_Start_IT(&hTIM_STP_Elec);
 800214c:	4851      	ldr	r0, [pc, #324]	@ (8002294 <main+0x1180>)
 800214e:	f003 ffd5 	bl	80060fc <HAL_TIM_Base_Start_IT>
 8002152:	e0e7      	b.n	8002324 <main+0x1210>
            }
          }
        }
        else
        {
          if (O_stimallowed)
 8002154:	4b44      	ldr	r3, [pc, #272]	@ (8002268 <main+0x1154>)
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	b2db      	uxtb	r3, r3
 800215a:	2b00      	cmp	r3, #0
 800215c:	d02e      	beq.n	80021bc <main+0x10a8>
          {
            if (!O_SPeriod_flag)
 800215e:	4b54      	ldr	r3, [pc, #336]	@ (80022b0 <main+0x119c>)
 8002160:	781b      	ldrb	r3, [r3, #0]
 8002162:	b2db      	uxtb	r3, r3
 8002164:	2b00      	cmp	r3, #0
 8002166:	d129      	bne.n	80021bc <main+0x10a8>
            {
              if (O_Sti_Count < O_Repeat)
 8002168:	4b4b      	ldr	r3, [pc, #300]	@ (8002298 <main+0x1184>)
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	b2db      	uxtb	r3, r3
 800216e:	461a      	mov	r2, r3
 8002170:	4b50      	ldr	r3, [pc, #320]	@ (80022b4 <main+0x11a0>)
 8002172:	881b      	ldrh	r3, [r3, #0]
 8002174:	b29b      	uxth	r3, r3
 8002176:	429a      	cmp	r2, r3
 8002178:	d217      	bcs.n	80021aa <main+0x1096>
              {
                if (!O_Stimulating)
 800217a:	4b4f      	ldr	r3, [pc, #316]	@ (80022b8 <main+0x11a4>)
 800217c:	781b      	ldrb	r3, [r3, #0]
 800217e:	b2db      	uxtb	r3, r3
 8002180:	2b00      	cmp	r3, #0
 8002182:	d11b      	bne.n	80021bc <main+0x10a8>
                {
                  O_Stimulating = 1;
 8002184:	4b4c      	ldr	r3, [pc, #304]	@ (80022b8 <main+0x11a4>)
 8002186:	2201      	movs	r2, #1
 8002188:	701a      	strb	r2, [r3, #0]
                  if (!optostimulation())
 800218a:	f000 faa5 	bl	80026d8 <optostimulation>
 800218e:	4603      	mov	r3, r0
 8002190:	2b00      	cmp	r3, #0
 8002192:	d113      	bne.n	80021bc <main+0x10a8>
                  {
                    O_Sti_Count++;
 8002194:	4b40      	ldr	r3, [pc, #256]	@ (8002298 <main+0x1184>)
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	b2db      	uxtb	r3, r3
 800219a:	3301      	adds	r3, #1
 800219c:	b2da      	uxtb	r2, r3
 800219e:	4b3e      	ldr	r3, [pc, #248]	@ (8002298 <main+0x1184>)
 80021a0:	701a      	strb	r2, [r3, #0]
                    O_SPeriod_flag = 1;
 80021a2:	4b43      	ldr	r3, [pc, #268]	@ (80022b0 <main+0x119c>)
 80021a4:	2201      	movs	r2, #1
 80021a6:	701a      	strb	r2, [r3, #0]
 80021a8:	e008      	b.n	80021bc <main+0x10a8>
                  }
                }
              }
              else
              {
                Ostimcompleted = 1;
 80021aa:	4b44      	ldr	r3, [pc, #272]	@ (80022bc <main+0x11a8>)
 80021ac:	2201      	movs	r2, #1
 80021ae:	701a      	strb	r2, [r3, #0]
                O_stimallowed = 0;
 80021b0:	4b2d      	ldr	r3, [pc, #180]	@ (8002268 <main+0x1154>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	701a      	strb	r2, [r3, #0]
                HAL_TIM_Base_Stop_IT(&hTIM_STP_Opto);
 80021b6:	482d      	ldr	r0, [pc, #180]	@ (800226c <main+0x1158>)
 80021b8:	f004 f818 	bl	80061ec <HAL_TIM_Base_Stop_IT>
              }
            }
          }

          if (E_stimallowed)
 80021bc:	4b2c      	ldr	r3, [pc, #176]	@ (8002270 <main+0x115c>)
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	f000 8085 	beq.w	80022d2 <main+0x11be>
          {
            if (!E_SPeriod_flag)
 80021c8:	4b2a      	ldr	r3, [pc, #168]	@ (8002274 <main+0x1160>)
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d17f      	bne.n	80022d2 <main+0x11be>
            {
              if (E_Sti_Count < E_Repeat)
 80021d2:	4b29      	ldr	r3, [pc, #164]	@ (8002278 <main+0x1164>)
 80021d4:	781b      	ldrb	r3, [r3, #0]
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	461a      	mov	r2, r3
 80021da:	4b28      	ldr	r3, [pc, #160]	@ (800227c <main+0x1168>)
 80021dc:	881b      	ldrh	r3, [r3, #0]
 80021de:	b29b      	uxth	r3, r3
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d26d      	bcs.n	80022c0 <main+0x11ac>
              {
                if (!E_Stimulating)
 80021e4:	4b26      	ldr	r3, [pc, #152]	@ (8002280 <main+0x116c>)
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d171      	bne.n	80022d2 <main+0x11be>
                {
                  E_Stimulating = 1;
 80021ee:	4b24      	ldr	r3, [pc, #144]	@ (8002280 <main+0x116c>)
 80021f0:	2201      	movs	r2, #1
 80021f2:	701a      	strb	r2, [r3, #0]
                  if (!elecstimulation(Site_group[Src_Site], Site_group[DstSite], CathodType))
 80021f4:	4b23      	ldr	r3, [pc, #140]	@ (8002284 <main+0x1170>)
 80021f6:	881b      	ldrh	r3, [r3, #0]
 80021f8:	b29b      	uxth	r3, r3
 80021fa:	461c      	mov	r4, r3
 80021fc:	4b22      	ldr	r3, [pc, #136]	@ (8002288 <main+0x1174>)
 80021fe:	881b      	ldrh	r3, [r3, #0]
 8002200:	b29b      	uxth	r3, r3
 8002202:	4618      	mov	r0, r3
 8002204:	4b21      	ldr	r3, [pc, #132]	@ (800228c <main+0x1178>)
 8002206:	881b      	ldrh	r3, [r3, #0]
 8002208:	b29b      	uxth	r3, r3
 800220a:	b2da      	uxtb	r2, r3
 800220c:	4920      	ldr	r1, [pc, #128]	@ (8002290 <main+0x117c>)
 800220e:	4623      	mov	r3, r4
 8002210:	005b      	lsls	r3, r3, #1
 8002212:	4423      	add	r3, r4
 8002214:	00db      	lsls	r3, r3, #3
 8002216:	18ce      	adds	r6, r1, r3
 8002218:	9208      	str	r2, [sp, #32]
 800221a:	4a1d      	ldr	r2, [pc, #116]	@ (8002290 <main+0x117c>)
 800221c:	4603      	mov	r3, r0
 800221e:	005b      	lsls	r3, r3, #1
 8002220:	4403      	add	r3, r0
 8002222:	00db      	lsls	r3, r3, #3
 8002224:	4413      	add	r3, r2
 8002226:	ac02      	add	r4, sp, #8
 8002228:	461d      	mov	r5, r3
 800222a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800222c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800222e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002232:	e884 0003 	stmia.w	r4, {r0, r1}
 8002236:	466a      	mov	r2, sp
 8002238:	f106 0310 	add.w	r3, r6, #16
 800223c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002240:	e882 0003 	stmia.w	r2, {r0, r1}
 8002244:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002248:	f7fe fbfa 	bl	8000a40 <elecstimulation>
 800224c:	4603      	mov	r3, r0
 800224e:	2b00      	cmp	r3, #0
 8002250:	d13f      	bne.n	80022d2 <main+0x11be>
                  {
                    E_Sti_Count++;
 8002252:	4b09      	ldr	r3, [pc, #36]	@ (8002278 <main+0x1164>)
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	b2db      	uxtb	r3, r3
 8002258:	3301      	adds	r3, #1
 800225a:	b2da      	uxtb	r2, r3
 800225c:	4b06      	ldr	r3, [pc, #24]	@ (8002278 <main+0x1164>)
 800225e:	701a      	strb	r2, [r3, #0]
                    E_SPeriod_flag = 1;
 8002260:	4b04      	ldr	r3, [pc, #16]	@ (8002274 <main+0x1160>)
 8002262:	2201      	movs	r2, #1
 8002264:	701a      	strb	r2, [r3, #0]
 8002266:	e034      	b.n	80022d2 <main+0x11be>
 8002268:	2000082f 	.word	0x2000082f
 800226c:	20000a00 	.word	0x20000a00
 8002270:	20000830 	.word	0x20000830
 8002274:	20000828 	.word	0x20000828
 8002278:	20000827 	.word	0x20000827
 800227c:	2000080a 	.word	0x2000080a
 8002280:	20000826 	.word	0x20000826
 8002284:	2000081c 	.word	0x2000081c
 8002288:	20000820 	.word	0x20000820
 800228c:	2000081e 	.word	0x2000081e
 8002290:	20000000 	.word	0x20000000
 8002294:	2000091c 	.word	0x2000091c
 8002298:	2000082b 	.word	0x2000082b
 800229c:	20000829 	.word	0x20000829
 80022a0:	2000081a 	.word	0x2000081a
 80022a4:	2000080c 	.word	0x2000080c
 80022a8:	20000049 	.word	0x20000049
 80022ac:	20000838 	.word	0x20000838
 80022b0:	2000082c 	.word	0x2000082c
 80022b4:	20000818 	.word	0x20000818
 80022b8:	2000082a 	.word	0x2000082a
 80022bc:	2000082e 	.word	0x2000082e
                  }
                }
              }
              else
              {
                Esticompleted = 1;
 80022c0:	4b22      	ldr	r3, [pc, #136]	@ (800234c <main+0x1238>)
 80022c2:	2201      	movs	r2, #1
 80022c4:	701a      	strb	r2, [r3, #0]
                E_stimallowed = 0;
 80022c6:	4b22      	ldr	r3, [pc, #136]	@ (8002350 <main+0x123c>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	701a      	strb	r2, [r3, #0]
                HAL_TIM_Base_Stop_IT(&hTIM_STP_Elec);
 80022cc:	4821      	ldr	r0, [pc, #132]	@ (8002354 <main+0x1240>)
 80022ce:	f003 ff8d 	bl	80061ec <HAL_TIM_Base_Stop_IT>
              }
            }
          }

          if (Esticompleted && Ostimcompleted)
 80022d2:	4b1e      	ldr	r3, [pc, #120]	@ (800234c <main+0x1238>)
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	b2db      	uxtb	r3, r3
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d023      	beq.n	8002324 <main+0x1210>
 80022dc:	4b1e      	ldr	r3, [pc, #120]	@ (8002358 <main+0x1244>)
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d01e      	beq.n	8002324 <main+0x1210>
          {
            program_stage = 1;
 80022e6:	4b1d      	ldr	r3, [pc, #116]	@ (800235c <main+0x1248>)
 80022e8:	2201      	movs	r2, #1
 80022ea:	701a      	strb	r2, [r3, #0]
            ParReceive_enable = 1;
 80022ec:	4b1c      	ldr	r3, [pc, #112]	@ (8002360 <main+0x124c>)
 80022ee:	2201      	movs	r2, #1
 80022f0:	701a      	strb	r2, [r3, #0]
            Esticompleted = 0;
 80022f2:	4b16      	ldr	r3, [pc, #88]	@ (800234c <main+0x1238>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	701a      	strb	r2, [r3, #0]
            Ostimcompleted = 0;
 80022f8:	4b17      	ldr	r3, [pc, #92]	@ (8002358 <main+0x1244>)
 80022fa:	2200      	movs	r2, #0
 80022fc:	701a      	strb	r2, [r3, #0]

            O_SPeriod_flag = 0;
 80022fe:	4b19      	ldr	r3, [pc, #100]	@ (8002364 <main+0x1250>)
 8002300:	2200      	movs	r2, #0
 8002302:	701a      	strb	r2, [r3, #0]
            O_Sti_Count = 0;
 8002304:	4b18      	ldr	r3, [pc, #96]	@ (8002368 <main+0x1254>)
 8002306:	2200      	movs	r2, #0
 8002308:	701a      	strb	r2, [r3, #0]
            E_SPeriod_flag = 0;
 800230a:	4b18      	ldr	r3, [pc, #96]	@ (800236c <main+0x1258>)
 800230c:	2200      	movs	r2, #0
 800230e:	701a      	strb	r2, [r3, #0]
            E_Sti_Count = 0;
 8002310:	4b17      	ldr	r3, [pc, #92]	@ (8002370 <main+0x125c>)
 8002312:	2200      	movs	r2, #0
 8002314:	701a      	strb	r2, [r3, #0]
            HAL_TIM_Base_Stop_IT(&hTIM_Delay);
 8002316:	4817      	ldr	r0, [pc, #92]	@ (8002374 <main+0x1260>)
 8002318:	f003 ff68 	bl	80061ec <HAL_TIM_Base_Stop_IT>
 800231c:	e002      	b.n	8002324 <main+0x1210>
        break;
 800231e:	bf00      	nop
 8002320:	e000      	b.n	8002324 <main+0x1210>
        break;
 8002322:	bf00      	nop
          }
        }
      }
      if (program_stage != 2)
 8002324:	4b0d      	ldr	r3, [pc, #52]	@ (800235c <main+0x1248>)
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	2b02      	cmp	r3, #2
 800232a:	d006      	beq.n	800233a <main+0x1226>
      {
        if (ADC_sample_complete)
 800232c:	4b12      	ldr	r3, [pc, #72]	@ (8002378 <main+0x1264>)
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d002      	beq.n	800233a <main+0x1226>
        {
          ADC_sample_complete = 0;
 8002334:	4b10      	ldr	r3, [pc, #64]	@ (8002378 <main+0x1264>)
 8002336:	2200      	movs	r2, #0
 8002338:	701a      	strb	r2, [r3, #0]
    while (startprogram)
 800233a:	4b10      	ldr	r3, [pc, #64]	@ (800237c <main+0x1268>)
 800233c:	781b      	ldrb	r3, [r3, #0]
 800233e:	b2db      	uxtb	r3, r3
 8002340:	2b00      	cmp	r3, #0
 8002342:	f47e af30 	bne.w	80011a6 <main+0x92>
    if (program_stage == 1)
 8002346:	f7fe bf17 	b.w	8001178 <main+0x64>
 800234a:	bf00      	nop
 800234c:	2000082d 	.word	0x2000082d
 8002350:	20000830 	.word	0x20000830
 8002354:	2000091c 	.word	0x2000091c
 8002358:	2000082e 	.word	0x2000082e
 800235c:	200002b8 	.word	0x200002b8
 8002360:	20000048 	.word	0x20000048
 8002364:	2000082c 	.word	0x2000082c
 8002368:	2000082b 	.word	0x2000082b
 800236c:	20000828 	.word	0x20000828
 8002370:	20000827 	.word	0x20000827
 8002374:	20000838 	.word	0x20000838
 8002378:	2000021e 	.word	0x2000021e
 800237c:	200002b9 	.word	0x200002b9

08002380 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b094      	sub	sp, #80	@ 0x50
 8002384:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002386:	f107 031c 	add.w	r3, r7, #28
 800238a:	2234      	movs	r2, #52	@ 0x34
 800238c:	2100      	movs	r1, #0
 800238e:	4618      	mov	r0, r3
 8002390:	f005 fc31 	bl	8007bf6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002394:	f107 0308 	add.w	r3, r7, #8
 8002398:	2200      	movs	r2, #0
 800239a:	601a      	str	r2, [r3, #0]
 800239c:	605a      	str	r2, [r3, #4]
 800239e:	609a      	str	r2, [r3, #8]
 80023a0:	60da      	str	r2, [r3, #12]
 80023a2:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
   */
  HAL_PWR_EnableBkUpAccess();
 80023a4:	f002 fcf6 	bl	8004d94 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 80023a8:	4b2c      	ldr	r3, [pc, #176]	@ (800245c <SystemClock_Config+0xdc>)
 80023aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ac:	4a2b      	ldr	r2, [pc, #172]	@ (800245c <SystemClock_Config+0xdc>)
 80023ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023b2:	6413      	str	r3, [r2, #64]	@ 0x40
 80023b4:	4b29      	ldr	r3, [pc, #164]	@ (800245c <SystemClock_Config+0xdc>)
 80023b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023bc:	607b      	str	r3, [r7, #4]
 80023be:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80023c0:	4b27      	ldr	r3, [pc, #156]	@ (8002460 <SystemClock_Config+0xe0>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80023c8:	4a25      	ldr	r2, [pc, #148]	@ (8002460 <SystemClock_Config+0xe0>)
 80023ca:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80023ce:	6013      	str	r3, [r2, #0]
 80023d0:	4b23      	ldr	r3, [pc, #140]	@ (8002460 <SystemClock_Config+0xe0>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80023d8:	603b      	str	r3, [r7, #0]
 80023da:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80023dc:	2301      	movs	r3, #1
 80023de:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80023e0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80023e4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80023e6:	2302      	movs	r3, #2
 80023e8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80023ea:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80023ee:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80023f0:	2304      	movs	r3, #4
 80023f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 192;
 80023f4:	23c0      	movs	r3, #192	@ 0xc0
 80023f6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80023f8:	2302      	movs	r3, #2
 80023fa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80023fc:	2308      	movs	r3, #8
 80023fe:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002400:	2302      	movs	r3, #2
 8002402:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002404:	f107 031c 	add.w	r3, r7, #28
 8002408:	4618      	mov	r0, r3
 800240a:	f002 fd23 	bl	8004e54 <HAL_RCC_OscConfig>
 800240e:	4603      	mov	r3, r0
 8002410:	2b00      	cmp	r3, #0
 8002412:	d001      	beq.n	8002418 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002414:	f000 f826 	bl	8002464 <Error_Handler>
  }

  /** Activate the Over-Drive mode
   */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002418:	f002 fccc 	bl	8004db4 <HAL_PWREx_EnableOverDrive>
 800241c:	4603      	mov	r3, r0
 800241e:	2b00      	cmp	r3, #0
 8002420:	d001      	beq.n	8002426 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8002422:	f000 f81f 	bl	8002464 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002426:	230f      	movs	r3, #15
 8002428:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800242a:	2302      	movs	r3, #2
 800242c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 800242e:	2380      	movs	r3, #128	@ 0x80
 8002430:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002432:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002436:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002438:	2300      	movs	r3, #0
 800243a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800243c:	f107 0308 	add.w	r3, r7, #8
 8002440:	2103      	movs	r1, #3
 8002442:	4618      	mov	r0, r3
 8002444:	f002 ffb4 	bl	80053b0 <HAL_RCC_ClockConfig>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d001      	beq.n	8002452 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800244e:	f000 f809 	bl	8002464 <Error_Handler>
  }
}
 8002452:	bf00      	nop
 8002454:	3750      	adds	r7, #80	@ 0x50
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	40023800 	.word	0x40023800
 8002460:	40007000 	.word	0x40007000

08002464 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8002464:	b480      	push	{r7}
 8002466:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002468:	b672      	cpsid	i
}
 800246a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800246c:	bf00      	nop
 800246e:	e7fd      	b.n	800246c <Error_Handler+0x8>

08002470 <MySPI_SendByte2AD5726>:
const Site_io_t EVO_CLRSEL = {EDAC_CLRSEL_GPIO_Port, EDAC_CLRSEL_Pin};

const MYSPI_IO_t EVO = {EVO_CS, EVO_DA, EVO_SCLK, EVO_LDAC, EVO_CLR, EVO_CLRSEL};

void MySPI_SendByte2AD5726(MYSPI_IO_t VO, unsigned short dt)
{
 8002470:	b084      	sub	sp, #16
 8002472:	b480      	push	{r7}
 8002474:	b083      	sub	sp, #12
 8002476:	af00      	add	r7, sp, #0
 8002478:	f107 0c10 	add.w	ip, r7, #16
 800247c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    uint8_t i, j;
    VO.CS.io_port->BSRR = VO.CS.pin << 16;     // CS RESET
 8002480:	697a      	ldr	r2, [r7, #20]
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	0412      	lsls	r2, r2, #16
 8002486:	619a      	str	r2, [r3, #24]
    VO.SCLK.io_port->BSRR = VO.SCLK.pin << 16; // SCLK RESET
 8002488:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800248a:	6a3b      	ldr	r3, [r7, #32]
 800248c:	0412      	lsls	r2, r2, #16
 800248e:	619a      	str	r2, [r3, #24]

    for (i = 16; i > 0; i--)
 8002490:	2310      	movs	r3, #16
 8002492:	71fb      	strb	r3, [r7, #7]
 8002494:	e02e      	b.n	80024f4 <MySPI_SendByte2AD5726+0x84>
    {
        if (dt & 0x8000)
 8002496:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	@ 0x40
 800249a:	2b00      	cmp	r3, #0
 800249c:	da03      	bge.n	80024a6 <MySPI_SendByte2AD5726+0x36>
            VO.DOUT.io_port->BSRR = VO.DOUT.pin; // DOUT SET
 800249e:	69bb      	ldr	r3, [r7, #24]
 80024a0:	69fa      	ldr	r2, [r7, #28]
 80024a2:	619a      	str	r2, [r3, #24]
 80024a4:	e003      	b.n	80024ae <MySPI_SendByte2AD5726+0x3e>
        else
            VO.DOUT.io_port->BSRR = VO.DOUT.pin << 16; // DOUT RESET
 80024a6:	69fa      	ldr	r2, [r7, #28]
 80024a8:	69bb      	ldr	r3, [r7, #24]
 80024aa:	0412      	lsls	r2, r2, #16
 80024ac:	619a      	str	r2, [r3, #24]

        for (j = 0; j < 5; j++)
 80024ae:	2300      	movs	r3, #0
 80024b0:	71bb      	strb	r3, [r7, #6]
 80024b2:	e003      	b.n	80024bc <MySPI_SendByte2AD5726+0x4c>
        {
            __asm("NOP");
 80024b4:	bf00      	nop
        for (j = 0; j < 5; j++)
 80024b6:	79bb      	ldrb	r3, [r7, #6]
 80024b8:	3301      	adds	r3, #1
 80024ba:	71bb      	strb	r3, [r7, #6]
 80024bc:	79bb      	ldrb	r3, [r7, #6]
 80024be:	2b04      	cmp	r3, #4
 80024c0:	d9f8      	bls.n	80024b4 <MySPI_SendByte2AD5726+0x44>
        }

        VO.SCLK.io_port->BSRR = VO.SCLK.pin; // SCLK SET
 80024c2:	6a3b      	ldr	r3, [r7, #32]
 80024c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024c6:	619a      	str	r2, [r3, #24]
        dt <<= 1;
 80024c8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80024cc:	005b      	lsls	r3, r3, #1
 80024ce:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

        for (j = 0; j < 5; j++)
 80024d2:	2300      	movs	r3, #0
 80024d4:	71bb      	strb	r3, [r7, #6]
 80024d6:	e003      	b.n	80024e0 <MySPI_SendByte2AD5726+0x70>
        {
            __asm("NOP");
 80024d8:	bf00      	nop
        for (j = 0; j < 5; j++)
 80024da:	79bb      	ldrb	r3, [r7, #6]
 80024dc:	3301      	adds	r3, #1
 80024de:	71bb      	strb	r3, [r7, #6]
 80024e0:	79bb      	ldrb	r3, [r7, #6]
 80024e2:	2b04      	cmp	r3, #4
 80024e4:	d9f8      	bls.n	80024d8 <MySPI_SendByte2AD5726+0x68>
        }

        VO.SCLK.io_port->BSRR = VO.SCLK.pin << 16; // SCLK RESET
 80024e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024e8:	6a3b      	ldr	r3, [r7, #32]
 80024ea:	0412      	lsls	r2, r2, #16
 80024ec:	619a      	str	r2, [r3, #24]
    for (i = 16; i > 0; i--)
 80024ee:	79fb      	ldrb	r3, [r7, #7]
 80024f0:	3b01      	subs	r3, #1
 80024f2:	71fb      	strb	r3, [r7, #7]
 80024f4:	79fb      	ldrb	r3, [r7, #7]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d1cd      	bne.n	8002496 <MySPI_SendByte2AD5726+0x26>
    }
    VO.CS.io_port->BSRR = VO.CS.pin; // CS SET
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	697a      	ldr	r2, [r7, #20]
 80024fe:	619a      	str	r2, [r3, #24]

    VO.LDAC.io_port->BSRR = VO.LDAC.pin << 16; // LDAC RESET
 8002500:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002502:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002504:	0412      	lsls	r2, r2, #16
 8002506:	619a      	str	r2, [r3, #24]
    for (j = 0; j < 5; j++)
 8002508:	2300      	movs	r3, #0
 800250a:	71bb      	strb	r3, [r7, #6]
 800250c:	e003      	b.n	8002516 <MySPI_SendByte2AD5726+0xa6>
    {
        __asm("NOP");
 800250e:	bf00      	nop
    for (j = 0; j < 5; j++)
 8002510:	79bb      	ldrb	r3, [r7, #6]
 8002512:	3301      	adds	r3, #1
 8002514:	71bb      	strb	r3, [r7, #6]
 8002516:	79bb      	ldrb	r3, [r7, #6]
 8002518:	2b04      	cmp	r3, #4
 800251a:	d9f8      	bls.n	800250e <MySPI_SendByte2AD5726+0x9e>
    }
    VO.LDAC.io_port->BSRR = VO.LDAC.pin; // LDAC SET
 800251c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800251e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002520:	619a      	str	r2, [r3, #24]
}
 8002522:	bf00      	nop
 8002524:	370c      	adds	r7, #12
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	b004      	add	sp, #16
 800252e:	4770      	bx	lr

08002530 <FixState>:

extern uint8_t O_Stimulating, O_SPeriod_flag, LPeriod_flag;
extern uint32_t O_PTime1, O_PTime2;

void FixState()
{
 8002530:	b480      	push	{r7}
 8002532:	af00      	add	r7, sp, #0
    O_Fix_GPIO_Port->BSRR = O_Fix_Pin << 16;
 8002534:	4b07      	ldr	r3, [pc, #28]	@ (8002554 <FixState+0x24>)
 8002536:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800253a:	619a      	str	r2, [r3, #24]
    O_For_GPIO_Port->BSRR = O_For_Pin;
 800253c:	4b06      	ldr	r3, [pc, #24]	@ (8002558 <FixState+0x28>)
 800253e:	2208      	movs	r2, #8
 8002540:	619a      	str	r2, [r3, #24]
    O_Rev_GPIO_Port->BSRR = O_Rev_Pin;
 8002542:	4b05      	ldr	r3, [pc, #20]	@ (8002558 <FixState+0x28>)
 8002544:	2220      	movs	r2, #32
 8002546:	619a      	str	r2, [r3, #24]
}
 8002548:	bf00      	nop
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr
 8002552:	bf00      	nop
 8002554:	40020800 	.word	0x40020800
 8002558:	40021400 	.word	0x40021400

0800255c <ForwardState>:

void ForwardState()
{
 800255c:	b480      	push	{r7}
 800255e:	af00      	add	r7, sp, #0
    O_Fix_GPIO_Port->BSRR = O_Fix_Pin;
 8002560:	4b07      	ldr	r3, [pc, #28]	@ (8002580 <ForwardState+0x24>)
 8002562:	2208      	movs	r2, #8
 8002564:	619a      	str	r2, [r3, #24]
    O_For_GPIO_Port->BSRR = O_For_Pin << 16;
 8002566:	4b07      	ldr	r3, [pc, #28]	@ (8002584 <ForwardState+0x28>)
 8002568:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800256c:	619a      	str	r2, [r3, #24]
    O_Rev_GPIO_Port->BSRR = O_Rev_Pin;
 800256e:	4b05      	ldr	r3, [pc, #20]	@ (8002584 <ForwardState+0x28>)
 8002570:	2220      	movs	r2, #32
 8002572:	619a      	str	r2, [r3, #24]
}
 8002574:	bf00      	nop
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr
 800257e:	bf00      	nop
 8002580:	40020800 	.word	0x40020800
 8002584:	40021400 	.word	0x40021400

08002588 <ReverseState>:

void ReverseState()
{
 8002588:	b480      	push	{r7}
 800258a:	af00      	add	r7, sp, #0
    O_Fix_GPIO_Port->BSRR = O_Fix_Pin;
 800258c:	4b07      	ldr	r3, [pc, #28]	@ (80025ac <ReverseState+0x24>)
 800258e:	2208      	movs	r2, #8
 8002590:	619a      	str	r2, [r3, #24]
    O_For_GPIO_Port->BSRR = O_For_Pin;
 8002592:	4b07      	ldr	r3, [pc, #28]	@ (80025b0 <ReverseState+0x28>)
 8002594:	2208      	movs	r2, #8
 8002596:	619a      	str	r2, [r3, #24]
    O_Rev_GPIO_Port->BSRR = O_Rev_Pin << 16;
 8002598:	4b05      	ldr	r3, [pc, #20]	@ (80025b0 <ReverseState+0x28>)
 800259a:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800259e:	619a      	str	r2, [r3, #24]
}
 80025a0:	bf00      	nop
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr
 80025aa:	bf00      	nop
 80025ac:	40020800 	.word	0x40020800
 80025b0:	40021400 	.word	0x40021400

080025b4 <TIM8_UP_TIM13_IRQHandler>:

/**
 * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
 */
void TIM_STP_Opto_IRQHandler(void)
{
 80025b4:	b480      	push	{r7}
 80025b6:	af00      	add	r7, sp, #0
    if (__HAL_TIM_GET_FLAG(&hTIM_STP_Opto, TIM_FLAG_UPDATE) != RESET)
 80025b8:	4b0f      	ldr	r3, [pc, #60]	@ (80025f8 <TIM8_UP_TIM13_IRQHandler+0x44>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	691b      	ldr	r3, [r3, #16]
 80025be:	f003 0301 	and.w	r3, r3, #1
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d112      	bne.n	80025ec <TIM8_UP_TIM13_IRQHandler+0x38>
    {
        if (__HAL_TIM_GET_IT_SOURCE(&hTIM_STP_Opto, TIM_IT_UPDATE) != RESET)
 80025c6:	4b0c      	ldr	r3, [pc, #48]	@ (80025f8 <TIM8_UP_TIM13_IRQHandler+0x44>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	f003 0301 	and.w	r3, r3, #1
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d10b      	bne.n	80025ec <TIM8_UP_TIM13_IRQHandler+0x38>
        {
            __HAL_TIM_SET_COUNTER(&hTIM_STP_Opto, 0);
 80025d4:	4b08      	ldr	r3, [pc, #32]	@ (80025f8 <TIM8_UP_TIM13_IRQHandler+0x44>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	2200      	movs	r2, #0
 80025da:	625a      	str	r2, [r3, #36]	@ 0x24
            __HAL_TIM_CLEAR_FLAG(&hTIM_STP_Opto, TIM_IT_UPDATE);
 80025dc:	4b06      	ldr	r3, [pc, #24]	@ (80025f8 <TIM8_UP_TIM13_IRQHandler+0x44>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f06f 0201 	mvn.w	r2, #1
 80025e4:	611a      	str	r2, [r3, #16]
            O_SPeriod_flag = 0;
 80025e6:	4b05      	ldr	r3, [pc, #20]	@ (80025fc <TIM8_UP_TIM13_IRQHandler+0x48>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	701a      	strb	r2, [r3, #0]
        }
    }
}
 80025ec:	bf00      	nop
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr
 80025f6:	bf00      	nop
 80025f8:	20000a00 	.word	0x20000a00
 80025fc:	2000082c 	.word	0x2000082c

08002600 <TIM8_BRK_TIM12_IRQHandler>:

/**
 * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
 */
void TIM_Pulse_Opto_IRQHandler(void)
{
 8002600:	b480      	push	{r7}
 8002602:	af00      	add	r7, sp, #0
    if (__HAL_TIM_GET_FLAG(&hTIM_Pulse_Opto, TIM_FLAG_UPDATE) != RESET)
 8002604:	4b31      	ldr	r3, [pc, #196]	@ (80026cc <TIM8_BRK_TIM12_IRQHandler+0xcc>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	691b      	ldr	r3, [r3, #16]
 800260a:	f003 0301 	and.w	r3, r3, #1
 800260e:	2b01      	cmp	r3, #1
 8002610:	d157      	bne.n	80026c2 <TIM8_BRK_TIM12_IRQHandler+0xc2>
    {
        if (__HAL_TIM_GET_IT_SOURCE(&hTIM_Pulse_Opto, TIM_IT_UPDATE) != RESET)
 8002612:	4b2e      	ldr	r3, [pc, #184]	@ (80026cc <TIM8_BRK_TIM12_IRQHandler+0xcc>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	68db      	ldr	r3, [r3, #12]
 8002618:	f003 0301 	and.w	r3, r3, #1
 800261c:	2b01      	cmp	r3, #1
 800261e:	d150      	bne.n	80026c2 <TIM8_BRK_TIM12_IRQHandler+0xc2>
        {
            __HAL_TIM_DISABLE(&hTIM_Pulse_Opto);
 8002620:	4b2a      	ldr	r3, [pc, #168]	@ (80026cc <TIM8_BRK_TIM12_IRQHandler+0xcc>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	6a1a      	ldr	r2, [r3, #32]
 8002626:	f241 1311 	movw	r3, #4369	@ 0x1111
 800262a:	4013      	ands	r3, r2
 800262c:	2b00      	cmp	r3, #0
 800262e:	d10f      	bne.n	8002650 <TIM8_BRK_TIM12_IRQHandler+0x50>
 8002630:	4b26      	ldr	r3, [pc, #152]	@ (80026cc <TIM8_BRK_TIM12_IRQHandler+0xcc>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	6a1a      	ldr	r2, [r3, #32]
 8002636:	f240 4344 	movw	r3, #1092	@ 0x444
 800263a:	4013      	ands	r3, r2
 800263c:	2b00      	cmp	r3, #0
 800263e:	d107      	bne.n	8002650 <TIM8_BRK_TIM12_IRQHandler+0x50>
 8002640:	4b22      	ldr	r3, [pc, #136]	@ (80026cc <TIM8_BRK_TIM12_IRQHandler+0xcc>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	4b21      	ldr	r3, [pc, #132]	@ (80026cc <TIM8_BRK_TIM12_IRQHandler+0xcc>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f022 0201 	bic.w	r2, r2, #1
 800264e:	601a      	str	r2, [r3, #0]
            __HAL_TIM_SET_COUNTER(&hTIM_Pulse_Opto, 0);
 8002650:	4b1e      	ldr	r3, [pc, #120]	@ (80026cc <TIM8_BRK_TIM12_IRQHandler+0xcc>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	2200      	movs	r2, #0
 8002656:	625a      	str	r2, [r3, #36]	@ 0x24
            __HAL_TIM_CLEAR_FLAG(&hTIM_Pulse_Opto, TIM_IT_UPDATE);
 8002658:	4b1c      	ldr	r3, [pc, #112]	@ (80026cc <TIM8_BRK_TIM12_IRQHandler+0xcc>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f06f 0201 	mvn.w	r2, #1
 8002660:	611a      	str	r2, [r3, #16]

            switch (Opto_PhaseFlag)
 8002662:	4b1b      	ldr	r3, [pc, #108]	@ (80026d0 <TIM8_BRK_TIM12_IRQHandler+0xd0>)
 8002664:	781b      	ldrb	r3, [r3, #0]
 8002666:	b2db      	uxtb	r3, r3
 8002668:	2b03      	cmp	r3, #3
 800266a:	d827      	bhi.n	80026bc <TIM8_BRK_TIM12_IRQHandler+0xbc>
 800266c:	a201      	add	r2, pc, #4	@ (adr r2, 8002674 <TIM8_BRK_TIM12_IRQHandler+0x74>)
 800266e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002672:	bf00      	nop
 8002674:	08002685 	.word	0x08002685
 8002678:	08002695 	.word	0x08002695
 800267c:	080026a5 	.word	0x080026a5
 8002680:	080026b5 	.word	0x080026b5
            {
            case 0:
                Opto_PhaseFlag++;
 8002684:	4b12      	ldr	r3, [pc, #72]	@ (80026d0 <TIM8_BRK_TIM12_IRQHandler+0xd0>)
 8002686:	781b      	ldrb	r3, [r3, #0]
 8002688:	b2db      	uxtb	r3, r3
 800268a:	3301      	adds	r3, #1
 800268c:	b2da      	uxtb	r2, r3
 800268e:	4b10      	ldr	r3, [pc, #64]	@ (80026d0 <TIM8_BRK_TIM12_IRQHandler+0xd0>)
 8002690:	701a      	strb	r2, [r3, #0]
                break;
 8002692:	e013      	b.n	80026bc <TIM8_BRK_TIM12_IRQHandler+0xbc>
            case 1:
                Opto_PhaseFlag++;
 8002694:	4b0e      	ldr	r3, [pc, #56]	@ (80026d0 <TIM8_BRK_TIM12_IRQHandler+0xd0>)
 8002696:	781b      	ldrb	r3, [r3, #0]
 8002698:	b2db      	uxtb	r3, r3
 800269a:	3301      	adds	r3, #1
 800269c:	b2da      	uxtb	r2, r3
 800269e:	4b0c      	ldr	r3, [pc, #48]	@ (80026d0 <TIM8_BRK_TIM12_IRQHandler+0xd0>)
 80026a0:	701a      	strb	r2, [r3, #0]
                break;
 80026a2:	e00b      	b.n	80026bc <TIM8_BRK_TIM12_IRQHandler+0xbc>
            case 2:
                Opto_PhaseFlag++;
 80026a4:	4b0a      	ldr	r3, [pc, #40]	@ (80026d0 <TIM8_BRK_TIM12_IRQHandler+0xd0>)
 80026a6:	781b      	ldrb	r3, [r3, #0]
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	3301      	adds	r3, #1
 80026ac:	b2da      	uxtb	r2, r3
 80026ae:	4b08      	ldr	r3, [pc, #32]	@ (80026d0 <TIM8_BRK_TIM12_IRQHandler+0xd0>)
 80026b0:	701a      	strb	r2, [r3, #0]
                break;
 80026b2:	e003      	b.n	80026bc <TIM8_BRK_TIM12_IRQHandler+0xbc>
            case 3:
                Opto_PhaseFlag = 0;
 80026b4:	4b06      	ldr	r3, [pc, #24]	@ (80026d0 <TIM8_BRK_TIM12_IRQHandler+0xd0>)
 80026b6:	2200      	movs	r2, #0
 80026b8:	701a      	strb	r2, [r3, #0]
                break;
 80026ba:	bf00      	nop
            }

            O_Stimulating = 0;
 80026bc:	4b05      	ldr	r3, [pc, #20]	@ (80026d4 <TIM8_BRK_TIM12_IRQHandler+0xd4>)
 80026be:	2200      	movs	r2, #0
 80026c0:	701a      	strb	r2, [r3, #0]
        }
    }
}
 80026c2:	bf00      	nop
 80026c4:	46bd      	mov	sp, r7
 80026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ca:	4770      	bx	lr
 80026cc:	200009b4 	.word	0x200009b4
 80026d0:	2000004a 	.word	0x2000004a
 80026d4:	2000082a 	.word	0x2000082a

080026d8 <optostimulation>:

uint8_t optostimulation()
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	af00      	add	r7, sp, #0
    switch (Opto_PhaseFlag)
 80026dc:	4b2c      	ldr	r3, [pc, #176]	@ (8002790 <optostimulation+0xb8>)
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	2b03      	cmp	r3, #3
 80026e4:	d850      	bhi.n	8002788 <optostimulation+0xb0>
 80026e6:	a201      	add	r2, pc, #4	@ (adr r2, 80026ec <optostimulation+0x14>)
 80026e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026ec:	080026fd 	.word	0x080026fd
 80026f0:	08002717 	.word	0x08002717
 80026f4:	0800273d 	.word	0x0800273d
 80026f8:	08002761 	.word	0x08002761
    {
    case 0:
        FixState();
 80026fc:	f7ff ff18 	bl	8002530 <FixState>
        Opto_PhaseFlag = 1;
 8002700:	4b23      	ldr	r3, [pc, #140]	@ (8002790 <optostimulation+0xb8>)
 8002702:	2201      	movs	r2, #1
 8002704:	701a      	strb	r2, [r3, #0]
        O_Stimulating = 0;
 8002706:	4b23      	ldr	r3, [pc, #140]	@ (8002794 <optostimulation+0xbc>)
 8002708:	2200      	movs	r2, #0
 800270a:	701a      	strb	r2, [r3, #0]
        HAL_TIM_Base_Stop_IT(&hTIM_Pulse_Opto);
 800270c:	4822      	ldr	r0, [pc, #136]	@ (8002798 <optostimulation+0xc0>)
 800270e:	f003 fd6d 	bl	80061ec <HAL_TIM_Base_Stop_IT>
        return 0;
 8002712:	2300      	movs	r3, #0
 8002714:	e03a      	b.n	800278c <optostimulation+0xb4>
    case 1:
        __HAL_TIM_SET_AUTORELOAD(&hTIM_Pulse_Opto, O_PTime1);
 8002716:	4b20      	ldr	r3, [pc, #128]	@ (8002798 <optostimulation+0xc0>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a20      	ldr	r2, [pc, #128]	@ (800279c <optostimulation+0xc4>)
 800271c:	6812      	ldr	r2, [r2, #0]
 800271e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002720:	4b1e      	ldr	r3, [pc, #120]	@ (800279c <optostimulation+0xc4>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a1c      	ldr	r2, [pc, #112]	@ (8002798 <optostimulation+0xc0>)
 8002726:	60d3      	str	r3, [r2, #12]
        __HAL_TIM_SET_COUNTER(&hTIM_Pulse_Opto, 0);
 8002728:	4b1b      	ldr	r3, [pc, #108]	@ (8002798 <optostimulation+0xc0>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	2200      	movs	r2, #0
 800272e:	625a      	str	r2, [r3, #36]	@ 0x24
        HAL_TIM_Base_Start_IT(&hTIM_Pulse_Opto);
 8002730:	4819      	ldr	r0, [pc, #100]	@ (8002798 <optostimulation+0xc0>)
 8002732:	f003 fce3 	bl	80060fc <HAL_TIM_Base_Start_IT>
        ForwardState();
 8002736:	f7ff ff11 	bl	800255c <ForwardState>
        break;
 800273a:	e026      	b.n	800278a <optostimulation+0xb2>
    case 2:
        FixState();
 800273c:	f7ff fef8 	bl	8002530 <FixState>
        __HAL_TIM_SET_AUTORELOAD(&hTIM_Pulse_Opto, 1);
 8002740:	4b15      	ldr	r3, [pc, #84]	@ (8002798 <optostimulation+0xc0>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	2201      	movs	r2, #1
 8002746:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002748:	4b13      	ldr	r3, [pc, #76]	@ (8002798 <optostimulation+0xc0>)
 800274a:	2201      	movs	r2, #1
 800274c:	60da      	str	r2, [r3, #12]
        __HAL_TIM_ENABLE(&hTIM_Pulse_Opto);
 800274e:	4b12      	ldr	r3, [pc, #72]	@ (8002798 <optostimulation+0xc0>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	4b10      	ldr	r3, [pc, #64]	@ (8002798 <optostimulation+0xc0>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f042 0201 	orr.w	r2, r2, #1
 800275c:	601a      	str	r2, [r3, #0]
        break;
 800275e:	e014      	b.n	800278a <optostimulation+0xb2>
    case 3:
        __HAL_TIM_SET_AUTORELOAD(&hTIM_Pulse_Opto, O_PTime2);
 8002760:	4b0d      	ldr	r3, [pc, #52]	@ (8002798 <optostimulation+0xc0>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a0e      	ldr	r2, [pc, #56]	@ (80027a0 <optostimulation+0xc8>)
 8002766:	6812      	ldr	r2, [r2, #0]
 8002768:	62da      	str	r2, [r3, #44]	@ 0x2c
 800276a:	4b0d      	ldr	r3, [pc, #52]	@ (80027a0 <optostimulation+0xc8>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a0a      	ldr	r2, [pc, #40]	@ (8002798 <optostimulation+0xc0>)
 8002770:	60d3      	str	r3, [r2, #12]
        __HAL_TIM_ENABLE(&hTIM_Pulse_Opto);
 8002772:	4b09      	ldr	r3, [pc, #36]	@ (8002798 <optostimulation+0xc0>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	4b07      	ldr	r3, [pc, #28]	@ (8002798 <optostimulation+0xc0>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f042 0201 	orr.w	r2, r2, #1
 8002780:	601a      	str	r2, [r3, #0]
        ReverseState();
 8002782:	f7ff ff01 	bl	8002588 <ReverseState>
        break;
 8002786:	e000      	b.n	800278a <optostimulation+0xb2>
    default:
        break;
 8002788:	bf00      	nop
    }

    return 1;
 800278a:	2301      	movs	r3, #1
}
 800278c:	4618      	mov	r0, r3
 800278e:	bd80      	pop	{r7, pc}
 8002790:	2000004a 	.word	0x2000004a
 8002794:	2000082a 	.word	0x2000082a
 8002798:	200009b4 	.word	0x200009b4
 800279c:	2000080e 	.word	0x2000080e
 80027a0:	20000810 	.word	0x20000810

080027a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b083      	sub	sp, #12
 80027a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80027aa:	4b0f      	ldr	r3, [pc, #60]	@ (80027e8 <HAL_MspInit+0x44>)
 80027ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ae:	4a0e      	ldr	r2, [pc, #56]	@ (80027e8 <HAL_MspInit+0x44>)
 80027b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80027b6:	4b0c      	ldr	r3, [pc, #48]	@ (80027e8 <HAL_MspInit+0x44>)
 80027b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027be:	607b      	str	r3, [r7, #4]
 80027c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027c2:	4b09      	ldr	r3, [pc, #36]	@ (80027e8 <HAL_MspInit+0x44>)
 80027c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027c6:	4a08      	ldr	r2, [pc, #32]	@ (80027e8 <HAL_MspInit+0x44>)
 80027c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80027cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80027ce:	4b06      	ldr	r3, [pc, #24]	@ (80027e8 <HAL_MspInit+0x44>)
 80027d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80027d6:	603b      	str	r3, [r7, #0]
 80027d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027da:	bf00      	nop
 80027dc:	370c      	adds	r7, #12
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr
 80027e6:	bf00      	nop
 80027e8:	40023800 	.word	0x40023800

080027ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027ec:	b480      	push	{r7}
 80027ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80027f0:	bf00      	nop
 80027f2:	e7fd      	b.n	80027f0 <NMI_Handler+0x4>

080027f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027f4:	b480      	push	{r7}
 80027f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027f8:	bf00      	nop
 80027fa:	e7fd      	b.n	80027f8 <HardFault_Handler+0x4>

080027fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027fc:	b480      	push	{r7}
 80027fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002800:	bf00      	nop
 8002802:	e7fd      	b.n	8002800 <MemManage_Handler+0x4>

08002804 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002804:	b480      	push	{r7}
 8002806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002808:	bf00      	nop
 800280a:	e7fd      	b.n	8002808 <BusFault_Handler+0x4>

0800280c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800280c:	b480      	push	{r7}
 800280e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002810:	bf00      	nop
 8002812:	e7fd      	b.n	8002810 <UsageFault_Handler+0x4>

08002814 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002814:	b480      	push	{r7}
 8002816:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002818:	bf00      	nop
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr

08002822 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002822:	b480      	push	{r7}
 8002824:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002826:	bf00      	nop
 8002828:	46bd      	mov	sp, r7
 800282a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282e:	4770      	bx	lr

08002830 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002830:	b480      	push	{r7}
 8002832:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002834:	bf00      	nop
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr

0800283e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800283e:	b580      	push	{r7, lr}
 8002840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002842:	f000 fe29 	bl	8003498 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002846:	bf00      	nop
 8002848:	bd80      	pop	{r7, pc}
	...

0800284c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002850:	4802      	ldr	r0, [pc, #8]	@ (800285c <DMA2_Stream0_IRQHandler+0x10>)
 8002852:	f001 fe4f 	bl	80044f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002856:	bf00      	nop
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	2000013c 	.word	0x2000013c

08002860 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002860:	b480      	push	{r7}
 8002862:	af00      	add	r7, sp, #0
  return 1;
 8002864:	2301      	movs	r3, #1
}
 8002866:	4618      	mov	r0, r3
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr

08002870 <_kill>:

int _kill(int pid, int sig)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b082      	sub	sp, #8
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
 8002878:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800287a:	f005 fa67 	bl	8007d4c <__errno>
 800287e:	4603      	mov	r3, r0
 8002880:	2216      	movs	r2, #22
 8002882:	601a      	str	r2, [r3, #0]
  return -1;
 8002884:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002888:	4618      	mov	r0, r3
 800288a:	3708      	adds	r7, #8
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}

08002890 <_exit>:

void _exit (int status)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b082      	sub	sp, #8
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002898:	f04f 31ff 	mov.w	r1, #4294967295
 800289c:	6878      	ldr	r0, [r7, #4]
 800289e:	f7ff ffe7 	bl	8002870 <_kill>
  while (1) {}    /* Make sure we hang here */
 80028a2:	bf00      	nop
 80028a4:	e7fd      	b.n	80028a2 <_exit+0x12>

080028a6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80028a6:	b580      	push	{r7, lr}
 80028a8:	b086      	sub	sp, #24
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	60f8      	str	r0, [r7, #12]
 80028ae:	60b9      	str	r1, [r7, #8]
 80028b0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028b2:	2300      	movs	r3, #0
 80028b4:	617b      	str	r3, [r7, #20]
 80028b6:	e00a      	b.n	80028ce <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80028b8:	f3af 8000 	nop.w
 80028bc:	4601      	mov	r1, r0
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	1c5a      	adds	r2, r3, #1
 80028c2:	60ba      	str	r2, [r7, #8]
 80028c4:	b2ca      	uxtb	r2, r1
 80028c6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	3301      	adds	r3, #1
 80028cc:	617b      	str	r3, [r7, #20]
 80028ce:	697a      	ldr	r2, [r7, #20]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	429a      	cmp	r2, r3
 80028d4:	dbf0      	blt.n	80028b8 <_read+0x12>
  }

  return len;
 80028d6:	687b      	ldr	r3, [r7, #4]
}
 80028d8:	4618      	mov	r0, r3
 80028da:	3718      	adds	r7, #24
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}

080028e0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b086      	sub	sp, #24
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	60f8      	str	r0, [r7, #12]
 80028e8:	60b9      	str	r1, [r7, #8]
 80028ea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028ec:	2300      	movs	r3, #0
 80028ee:	617b      	str	r3, [r7, #20]
 80028f0:	e009      	b.n	8002906 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	1c5a      	adds	r2, r3, #1
 80028f6:	60ba      	str	r2, [r7, #8]
 80028f8:	781b      	ldrb	r3, [r3, #0]
 80028fa:	4618      	mov	r0, r3
 80028fc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	3301      	adds	r3, #1
 8002904:	617b      	str	r3, [r7, #20]
 8002906:	697a      	ldr	r2, [r7, #20]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	429a      	cmp	r2, r3
 800290c:	dbf1      	blt.n	80028f2 <_write+0x12>
  }
  return len;
 800290e:	687b      	ldr	r3, [r7, #4]
}
 8002910:	4618      	mov	r0, r3
 8002912:	3718      	adds	r7, #24
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}

08002918 <_close>:

int _close(int file)
{
 8002918:	b480      	push	{r7}
 800291a:	b083      	sub	sp, #12
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002920:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002924:	4618      	mov	r0, r3
 8002926:	370c      	adds	r7, #12
 8002928:	46bd      	mov	sp, r7
 800292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292e:	4770      	bx	lr

08002930 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002930:	b480      	push	{r7}
 8002932:	b083      	sub	sp, #12
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
 8002938:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002940:	605a      	str	r2, [r3, #4]
  return 0;
 8002942:	2300      	movs	r3, #0
}
 8002944:	4618      	mov	r0, r3
 8002946:	370c      	adds	r7, #12
 8002948:	46bd      	mov	sp, r7
 800294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294e:	4770      	bx	lr

08002950 <_isatty>:

int _isatty(int file)
{
 8002950:	b480      	push	{r7}
 8002952:	b083      	sub	sp, #12
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002958:	2301      	movs	r3, #1
}
 800295a:	4618      	mov	r0, r3
 800295c:	370c      	adds	r7, #12
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr

08002966 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002966:	b480      	push	{r7}
 8002968:	b085      	sub	sp, #20
 800296a:	af00      	add	r7, sp, #0
 800296c:	60f8      	str	r0, [r7, #12]
 800296e:	60b9      	str	r1, [r7, #8]
 8002970:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002972:	2300      	movs	r3, #0
}
 8002974:	4618      	mov	r0, r3
 8002976:	3714      	adds	r7, #20
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr

08002980 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b086      	sub	sp, #24
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002988:	4a14      	ldr	r2, [pc, #80]	@ (80029dc <_sbrk+0x5c>)
 800298a:	4b15      	ldr	r3, [pc, #84]	@ (80029e0 <_sbrk+0x60>)
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002994:	4b13      	ldr	r3, [pc, #76]	@ (80029e4 <_sbrk+0x64>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d102      	bne.n	80029a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800299c:	4b11      	ldr	r3, [pc, #68]	@ (80029e4 <_sbrk+0x64>)
 800299e:	4a12      	ldr	r2, [pc, #72]	@ (80029e8 <_sbrk+0x68>)
 80029a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80029a2:	4b10      	ldr	r3, [pc, #64]	@ (80029e4 <_sbrk+0x64>)
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	4413      	add	r3, r2
 80029aa:	693a      	ldr	r2, [r7, #16]
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d207      	bcs.n	80029c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80029b0:	f005 f9cc 	bl	8007d4c <__errno>
 80029b4:	4603      	mov	r3, r0
 80029b6:	220c      	movs	r2, #12
 80029b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80029ba:	f04f 33ff 	mov.w	r3, #4294967295
 80029be:	e009      	b.n	80029d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80029c0:	4b08      	ldr	r3, [pc, #32]	@ (80029e4 <_sbrk+0x64>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80029c6:	4b07      	ldr	r3, [pc, #28]	@ (80029e4 <_sbrk+0x64>)
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	4413      	add	r3, r2
 80029ce:	4a05      	ldr	r2, [pc, #20]	@ (80029e4 <_sbrk+0x64>)
 80029d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80029d2:	68fb      	ldr	r3, [r7, #12]
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	3718      	adds	r7, #24
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}
 80029dc:	20080000 	.word	0x20080000
 80029e0:	00000400 	.word	0x00000400
 80029e4:	20000834 	.word	0x20000834
 80029e8:	20000cb8 	.word	0x20000cb8

080029ec <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80029ec:	b480      	push	{r7}
 80029ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80029f0:	4b06      	ldr	r3, [pc, #24]	@ (8002a0c <SystemInit+0x20>)
 80029f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029f6:	4a05      	ldr	r2, [pc, #20]	@ (8002a0c <SystemInit+0x20>)
 80029f8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80029fc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a00:	bf00      	nop
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr
 8002a0a:	bf00      	nop
 8002a0c:	e000ed00 	.word	0xe000ed00

08002a10 <MX_TIM2_Init>:
TIM_HandleTypeDef htim13;
TIM_HandleTypeDef htim14;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b088      	sub	sp, #32
 8002a14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a16:	f107 0310 	add.w	r3, r7, #16
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	601a      	str	r2, [r3, #0]
 8002a1e:	605a      	str	r2, [r3, #4]
 8002a20:	609a      	str	r2, [r3, #8]
 8002a22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a24:	1d3b      	adds	r3, r7, #4
 8002a26:	2200      	movs	r2, #0
 8002a28:	601a      	str	r2, [r3, #0]
 8002a2a:	605a      	str	r2, [r3, #4]
 8002a2c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002a2e:	4b1e      	ldr	r3, [pc, #120]	@ (8002aa8 <MX_TIM2_Init+0x98>)
 8002a30:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002a34:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 96-1;
 8002a36:	4b1c      	ldr	r3, [pc, #112]	@ (8002aa8 <MX_TIM2_Init+0x98>)
 8002a38:	225f      	movs	r2, #95	@ 0x5f
 8002a3a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a3c:	4b1a      	ldr	r3, [pc, #104]	@ (8002aa8 <MX_TIM2_Init+0x98>)
 8002a3e:	2200      	movs	r2, #0
 8002a40:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8002a42:	4b19      	ldr	r3, [pc, #100]	@ (8002aa8 <MX_TIM2_Init+0x98>)
 8002a44:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002a48:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a4a:	4b17      	ldr	r3, [pc, #92]	@ (8002aa8 <MX_TIM2_Init+0x98>)
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a50:	4b15      	ldr	r3, [pc, #84]	@ (8002aa8 <MX_TIM2_Init+0x98>)
 8002a52:	2200      	movs	r2, #0
 8002a54:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002a56:	4814      	ldr	r0, [pc, #80]	@ (8002aa8 <MX_TIM2_Init+0x98>)
 8002a58:	f003 faf8 	bl	800604c <HAL_TIM_Base_Init>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d001      	beq.n	8002a66 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002a62:	f7ff fcff 	bl	8002464 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a66:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002a6a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002a6c:	f107 0310 	add.w	r3, r7, #16
 8002a70:	4619      	mov	r1, r3
 8002a72:	480d      	ldr	r0, [pc, #52]	@ (8002aa8 <MX_TIM2_Init+0x98>)
 8002a74:	f003 fbea 	bl	800624c <HAL_TIM_ConfigClockSource>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d001      	beq.n	8002a82 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002a7e:	f7ff fcf1 	bl	8002464 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a82:	2300      	movs	r3, #0
 8002a84:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a86:	2300      	movs	r3, #0
 8002a88:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002a8a:	1d3b      	adds	r3, r7, #4
 8002a8c:	4619      	mov	r1, r3
 8002a8e:	4806      	ldr	r0, [pc, #24]	@ (8002aa8 <MX_TIM2_Init+0x98>)
 8002a90:	f003 fdec 	bl	800666c <HAL_TIMEx_MasterConfigSynchronization>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d001      	beq.n	8002a9e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002a9a:	f7ff fce3 	bl	8002464 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002a9e:	bf00      	nop
 8002aa0:	3720      	adds	r7, #32
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	bf00      	nop
 8002aa8:	20000838 	.word	0x20000838

08002aac <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b084      	sub	sp, #16
 8002ab0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ab2:	1d3b      	adds	r3, r7, #4
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	601a      	str	r2, [r3, #0]
 8002ab8:	605a      	str	r2, [r3, #4]
 8002aba:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002abc:	4b14      	ldr	r3, [pc, #80]	@ (8002b10 <MX_TIM7_Init+0x64>)
 8002abe:	4a15      	ldr	r2, [pc, #84]	@ (8002b14 <MX_TIM7_Init+0x68>)
 8002ac0:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 96-1;
 8002ac2:	4b13      	ldr	r3, [pc, #76]	@ (8002b10 <MX_TIM7_Init+0x64>)
 8002ac4:	225f      	movs	r2, #95	@ 0x5f
 8002ac6:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ac8:	4b11      	ldr	r3, [pc, #68]	@ (8002b10 <MX_TIM7_Init+0x64>)
 8002aca:	2200      	movs	r2, #0
 8002acc:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1000-1;
 8002ace:	4b10      	ldr	r3, [pc, #64]	@ (8002b10 <MX_TIM7_Init+0x64>)
 8002ad0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002ad4:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ad6:	4b0e      	ldr	r3, [pc, #56]	@ (8002b10 <MX_TIM7_Init+0x64>)
 8002ad8:	2200      	movs	r2, #0
 8002ada:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002adc:	480c      	ldr	r0, [pc, #48]	@ (8002b10 <MX_TIM7_Init+0x64>)
 8002ade:	f003 fab5 	bl	800604c <HAL_TIM_Base_Init>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d001      	beq.n	8002aec <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8002ae8:	f7ff fcbc 	bl	8002464 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002aec:	2300      	movs	r3, #0
 8002aee:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002af0:	2300      	movs	r3, #0
 8002af2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002af4:	1d3b      	adds	r3, r7, #4
 8002af6:	4619      	mov	r1, r3
 8002af8:	4805      	ldr	r0, [pc, #20]	@ (8002b10 <MX_TIM7_Init+0x64>)
 8002afa:	f003 fdb7 	bl	800666c <HAL_TIMEx_MasterConfigSynchronization>
 8002afe:	4603      	mov	r3, r0
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d001      	beq.n	8002b08 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8002b04:	f7ff fcae 	bl	8002464 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002b08:	bf00      	nop
 8002b0a:	3710      	adds	r7, #16
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}
 8002b10:	20000884 	.word	0x20000884
 8002b14:	40001400 	.word	0x40001400

08002b18 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b084      	sub	sp, #16
 8002b1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b1e:	463b      	mov	r3, r7
 8002b20:	2200      	movs	r2, #0
 8002b22:	601a      	str	r2, [r3, #0]
 8002b24:	605a      	str	r2, [r3, #4]
 8002b26:	609a      	str	r2, [r3, #8]
 8002b28:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8002b2a:	4b16      	ldr	r3, [pc, #88]	@ (8002b84 <MX_TIM9_Init+0x6c>)
 8002b2c:	4a16      	ldr	r2, [pc, #88]	@ (8002b88 <MX_TIM9_Init+0x70>)
 8002b2e:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 24-1;
 8002b30:	4b14      	ldr	r3, [pc, #80]	@ (8002b84 <MX_TIM9_Init+0x6c>)
 8002b32:	2217      	movs	r2, #23
 8002b34:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b36:	4b13      	ldr	r3, [pc, #76]	@ (8002b84 <MX_TIM9_Init+0x6c>)
 8002b38:	2200      	movs	r2, #0
 8002b3a:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 480-1;
 8002b3c:	4b11      	ldr	r3, [pc, #68]	@ (8002b84 <MX_TIM9_Init+0x6c>)
 8002b3e:	f240 12df 	movw	r2, #479	@ 0x1df
 8002b42:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b44:	4b0f      	ldr	r3, [pc, #60]	@ (8002b84 <MX_TIM9_Init+0x6c>)
 8002b46:	2200      	movs	r2, #0
 8002b48:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b4a:	4b0e      	ldr	r3, [pc, #56]	@ (8002b84 <MX_TIM9_Init+0x6c>)
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8002b50:	480c      	ldr	r0, [pc, #48]	@ (8002b84 <MX_TIM9_Init+0x6c>)
 8002b52:	f003 fa7b 	bl	800604c <HAL_TIM_Base_Init>
 8002b56:	4603      	mov	r3, r0
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d001      	beq.n	8002b60 <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 8002b5c:	f7ff fc82 	bl	8002464 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b60:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002b64:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8002b66:	463b      	mov	r3, r7
 8002b68:	4619      	mov	r1, r3
 8002b6a:	4806      	ldr	r0, [pc, #24]	@ (8002b84 <MX_TIM9_Init+0x6c>)
 8002b6c:	f003 fb6e 	bl	800624c <HAL_TIM_ConfigClockSource>
 8002b70:	4603      	mov	r3, r0
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d001      	beq.n	8002b7a <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 8002b76:	f7ff fc75 	bl	8002464 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8002b7a:	bf00      	nop
 8002b7c:	3710      	adds	r7, #16
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	200008d0 	.word	0x200008d0
 8002b88:	40014000 	.word	0x40014000

08002b8c <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8002b90:	4b0d      	ldr	r3, [pc, #52]	@ (8002bc8 <MX_TIM10_Init+0x3c>)
 8002b92:	4a0e      	ldr	r2, [pc, #56]	@ (8002bcc <MX_TIM10_Init+0x40>)
 8002b94:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 96-1;
 8002b96:	4b0c      	ldr	r3, [pc, #48]	@ (8002bc8 <MX_TIM10_Init+0x3c>)
 8002b98:	225f      	movs	r2, #95	@ 0x5f
 8002b9a:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b9c:	4b0a      	ldr	r3, [pc, #40]	@ (8002bc8 <MX_TIM10_Init+0x3c>)
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 100-1;
 8002ba2:	4b09      	ldr	r3, [pc, #36]	@ (8002bc8 <MX_TIM10_Init+0x3c>)
 8002ba4:	2263      	movs	r2, #99	@ 0x63
 8002ba6:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ba8:	4b07      	ldr	r3, [pc, #28]	@ (8002bc8 <MX_TIM10_Init+0x3c>)
 8002baa:	2200      	movs	r2, #0
 8002bac:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bae:	4b06      	ldr	r3, [pc, #24]	@ (8002bc8 <MX_TIM10_Init+0x3c>)
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002bb4:	4804      	ldr	r0, [pc, #16]	@ (8002bc8 <MX_TIM10_Init+0x3c>)
 8002bb6:	f003 fa49 	bl	800604c <HAL_TIM_Base_Init>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d001      	beq.n	8002bc4 <MX_TIM10_Init+0x38>
  {
    Error_Handler();
 8002bc0:	f7ff fc50 	bl	8002464 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8002bc4:	bf00      	nop
 8002bc6:	bd80      	pop	{r7, pc}
 8002bc8:	2000091c 	.word	0x2000091c
 8002bcc:	40014400 	.word	0x40014400

08002bd0 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8002bd4:	4b0e      	ldr	r3, [pc, #56]	@ (8002c10 <MX_TIM11_Init+0x40>)
 8002bd6:	4a0f      	ldr	r2, [pc, #60]	@ (8002c14 <MX_TIM11_Init+0x44>)
 8002bd8:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 96-1;
 8002bda:	4b0d      	ldr	r3, [pc, #52]	@ (8002c10 <MX_TIM11_Init+0x40>)
 8002bdc:	225f      	movs	r2, #95	@ 0x5f
 8002bde:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002be0:	4b0b      	ldr	r3, [pc, #44]	@ (8002c10 <MX_TIM11_Init+0x40>)
 8002be2:	2200      	movs	r2, #0
 8002be4:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 1000-1;
 8002be6:	4b0a      	ldr	r3, [pc, #40]	@ (8002c10 <MX_TIM11_Init+0x40>)
 8002be8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002bec:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bee:	4b08      	ldr	r3, [pc, #32]	@ (8002c10 <MX_TIM11_Init+0x40>)
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bf4:	4b06      	ldr	r3, [pc, #24]	@ (8002c10 <MX_TIM11_Init+0x40>)
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8002bfa:	4805      	ldr	r0, [pc, #20]	@ (8002c10 <MX_TIM11_Init+0x40>)
 8002bfc:	f003 fa26 	bl	800604c <HAL_TIM_Base_Init>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d001      	beq.n	8002c0a <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8002c06:	f7ff fc2d 	bl	8002464 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8002c0a:	bf00      	nop
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	20000968 	.word	0x20000968
 8002c14:	40014800 	.word	0x40014800

08002c18 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b084      	sub	sp, #16
 8002c1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c1e:	463b      	mov	r3, r7
 8002c20:	2200      	movs	r2, #0
 8002c22:	601a      	str	r2, [r3, #0]
 8002c24:	605a      	str	r2, [r3, #4]
 8002c26:	609a      	str	r2, [r3, #8]
 8002c28:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8002c2a:	4b16      	ldr	r3, [pc, #88]	@ (8002c84 <MX_TIM12_Init+0x6c>)
 8002c2c:	4a16      	ldr	r2, [pc, #88]	@ (8002c88 <MX_TIM12_Init+0x70>)
 8002c2e:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 24000-1;
 8002c30:	4b14      	ldr	r3, [pc, #80]	@ (8002c84 <MX_TIM12_Init+0x6c>)
 8002c32:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 8002c36:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c38:	4b12      	ldr	r3, [pc, #72]	@ (8002c84 <MX_TIM12_Init+0x6c>)
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 2-1;
 8002c3e:	4b11      	ldr	r3, [pc, #68]	@ (8002c84 <MX_TIM12_Init+0x6c>)
 8002c40:	2201      	movs	r2, #1
 8002c42:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8002c44:	4b0f      	ldr	r3, [pc, #60]	@ (8002c84 <MX_TIM12_Init+0x6c>)
 8002c46:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002c4a:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c4c:	4b0d      	ldr	r3, [pc, #52]	@ (8002c84 <MX_TIM12_Init+0x6c>)
 8002c4e:	2200      	movs	r2, #0
 8002c50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8002c52:	480c      	ldr	r0, [pc, #48]	@ (8002c84 <MX_TIM12_Init+0x6c>)
 8002c54:	f003 f9fa 	bl	800604c <HAL_TIM_Base_Init>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d001      	beq.n	8002c62 <MX_TIM12_Init+0x4a>
  {
    Error_Handler();
 8002c5e:	f7ff fc01 	bl	8002464 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c62:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002c66:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8002c68:	463b      	mov	r3, r7
 8002c6a:	4619      	mov	r1, r3
 8002c6c:	4805      	ldr	r0, [pc, #20]	@ (8002c84 <MX_TIM12_Init+0x6c>)
 8002c6e:	f003 faed 	bl	800624c <HAL_TIM_ConfigClockSource>
 8002c72:	4603      	mov	r3, r0
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d001      	beq.n	8002c7c <MX_TIM12_Init+0x64>
  {
    Error_Handler();
 8002c78:	f7ff fbf4 	bl	8002464 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 8002c7c:	bf00      	nop
 8002c7e:	3710      	adds	r7, #16
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}
 8002c84:	200009b4 	.word	0x200009b4
 8002c88:	40001800 	.word	0x40001800

08002c8c <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8002c90:	4b0e      	ldr	r3, [pc, #56]	@ (8002ccc <MX_TIM13_Init+0x40>)
 8002c92:	4a0f      	ldr	r2, [pc, #60]	@ (8002cd0 <MX_TIM13_Init+0x44>)
 8002c94:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 24000-1;
 8002c96:	4b0d      	ldr	r3, [pc, #52]	@ (8002ccc <MX_TIM13_Init+0x40>)
 8002c98:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 8002c9c:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c9e:	4b0b      	ldr	r3, [pc, #44]	@ (8002ccc <MX_TIM13_Init+0x40>)
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 20-1;
 8002ca4:	4b09      	ldr	r3, [pc, #36]	@ (8002ccc <MX_TIM13_Init+0x40>)
 8002ca6:	2213      	movs	r2, #19
 8002ca8:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8002caa:	4b08      	ldr	r3, [pc, #32]	@ (8002ccc <MX_TIM13_Init+0x40>)
 8002cac:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002cb0:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002cb2:	4b06      	ldr	r3, [pc, #24]	@ (8002ccc <MX_TIM13_Init+0x40>)
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8002cb8:	4804      	ldr	r0, [pc, #16]	@ (8002ccc <MX_TIM13_Init+0x40>)
 8002cba:	f003 f9c7 	bl	800604c <HAL_TIM_Base_Init>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d001      	beq.n	8002cc8 <MX_TIM13_Init+0x3c>
  {
    Error_Handler();
 8002cc4:	f7ff fbce 	bl	8002464 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8002cc8:	bf00      	nop
 8002cca:	bd80      	pop	{r7, pc}
 8002ccc:	20000a00 	.word	0x20000a00
 8002cd0:	40001c00 	.word	0x40001c00

08002cd4 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8002cd8:	4b0f      	ldr	r3, [pc, #60]	@ (8002d18 <MX_TIM14_Init+0x44>)
 8002cda:	4a10      	ldr	r2, [pc, #64]	@ (8002d1c <MX_TIM14_Init+0x48>)
 8002cdc:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 24000-1;
 8002cde:	4b0e      	ldr	r3, [pc, #56]	@ (8002d18 <MX_TIM14_Init+0x44>)
 8002ce0:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 8002ce4:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ce6:	4b0c      	ldr	r3, [pc, #48]	@ (8002d18 <MX_TIM14_Init+0x44>)
 8002ce8:	2200      	movs	r2, #0
 8002cea:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 1000-1;
 8002cec:	4b0a      	ldr	r3, [pc, #40]	@ (8002d18 <MX_TIM14_Init+0x44>)
 8002cee:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002cf2:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8002cf4:	4b08      	ldr	r3, [pc, #32]	@ (8002d18 <MX_TIM14_Init+0x44>)
 8002cf6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002cfa:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002cfc:	4b06      	ldr	r3, [pc, #24]	@ (8002d18 <MX_TIM14_Init+0x44>)
 8002cfe:	2200      	movs	r2, #0
 8002d00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8002d02:	4805      	ldr	r0, [pc, #20]	@ (8002d18 <MX_TIM14_Init+0x44>)
 8002d04:	f003 f9a2 	bl	800604c <HAL_TIM_Base_Init>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d001      	beq.n	8002d12 <MX_TIM14_Init+0x3e>
  {
    Error_Handler();
 8002d0e:	f7ff fba9 	bl	8002464 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8002d12:	bf00      	nop
 8002d14:	bd80      	pop	{r7, pc}
 8002d16:	bf00      	nop
 8002d18:	20000a4c 	.word	0x20000a4c
 8002d1c:	40002000 	.word	0x40002000

08002d20 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b08a      	sub	sp, #40	@ 0x28
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d30:	d114      	bne.n	8002d5c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002d32:	4b5a      	ldr	r3, [pc, #360]	@ (8002e9c <HAL_TIM_Base_MspInit+0x17c>)
 8002d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d36:	4a59      	ldr	r2, [pc, #356]	@ (8002e9c <HAL_TIM_Base_MspInit+0x17c>)
 8002d38:	f043 0301 	orr.w	r3, r3, #1
 8002d3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d3e:	4b57      	ldr	r3, [pc, #348]	@ (8002e9c <HAL_TIM_Base_MspInit+0x17c>)
 8002d40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d42:	f003 0301 	and.w	r3, r3, #1
 8002d46:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    /* TIM2 interrupt Init */
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002d4a:	201c      	movs	r0, #28
 8002d4c:	f001 f90d 	bl	8003f6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */
    HAL_NVIC_SetPriority(TIM2_IRQn, 6, 0);
 8002d50:	2200      	movs	r2, #0
 8002d52:	2106      	movs	r1, #6
 8002d54:	201c      	movs	r0, #28
 8002d56:	f001 f8ec 	bl	8003f32 <HAL_NVIC_SetPriority>
  /* USER CODE BEGIN TIM13_MspInit 1 */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 5, 0);

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 8002d5a:	e09a      	b.n	8002e92 <HAL_TIM_Base_MspInit+0x172>
  else if(tim_baseHandle->Instance==TIM7)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a4f      	ldr	r2, [pc, #316]	@ (8002ea0 <HAL_TIM_Base_MspInit+0x180>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d114      	bne.n	8002d90 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002d66:	4b4d      	ldr	r3, [pc, #308]	@ (8002e9c <HAL_TIM_Base_MspInit+0x17c>)
 8002d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d6a:	4a4c      	ldr	r2, [pc, #304]	@ (8002e9c <HAL_TIM_Base_MspInit+0x17c>)
 8002d6c:	f043 0320 	orr.w	r3, r3, #32
 8002d70:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d72:	4b4a      	ldr	r3, [pc, #296]	@ (8002e9c <HAL_TIM_Base_MspInit+0x17c>)
 8002d74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d76:	f003 0320 	and.w	r3, r3, #32
 8002d7a:	623b      	str	r3, [r7, #32]
 8002d7c:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002d7e:	2037      	movs	r0, #55	@ 0x37
 8002d80:	f001 f8f3 	bl	8003f6a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM7_IRQn, 8, 0);
 8002d84:	2200      	movs	r2, #0
 8002d86:	2108      	movs	r1, #8
 8002d88:	2037      	movs	r0, #55	@ 0x37
 8002d8a:	f001 f8d2 	bl	8003f32 <HAL_NVIC_SetPriority>
}
 8002d8e:	e080      	b.n	8002e92 <HAL_TIM_Base_MspInit+0x172>
  else if(tim_baseHandle->Instance==TIM9)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a43      	ldr	r2, [pc, #268]	@ (8002ea4 <HAL_TIM_Base_MspInit+0x184>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d114      	bne.n	8002dc4 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8002d9a:	4b40      	ldr	r3, [pc, #256]	@ (8002e9c <HAL_TIM_Base_MspInit+0x17c>)
 8002d9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d9e:	4a3f      	ldr	r2, [pc, #252]	@ (8002e9c <HAL_TIM_Base_MspInit+0x17c>)
 8002da0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002da4:	6453      	str	r3, [r2, #68]	@ 0x44
 8002da6:	4b3d      	ldr	r3, [pc, #244]	@ (8002e9c <HAL_TIM_Base_MspInit+0x17c>)
 8002da8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002daa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002dae:	61fb      	str	r3, [r7, #28]
 8002db0:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8002db2:	2018      	movs	r0, #24
 8002db4:	f001 f8d9 	bl	8003f6a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8002db8:	2200      	movs	r2, #0
 8002dba:	2100      	movs	r1, #0
 8002dbc:	2018      	movs	r0, #24
 8002dbe:	f001 f8b8 	bl	8003f32 <HAL_NVIC_SetPriority>
}
 8002dc2:	e066      	b.n	8002e92 <HAL_TIM_Base_MspInit+0x172>
  else if(tim_baseHandle->Instance==TIM10)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a37      	ldr	r2, [pc, #220]	@ (8002ea8 <HAL_TIM_Base_MspInit+0x188>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d114      	bne.n	8002df8 <HAL_TIM_Base_MspInit+0xd8>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002dce:	4b33      	ldr	r3, [pc, #204]	@ (8002e9c <HAL_TIM_Base_MspInit+0x17c>)
 8002dd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dd2:	4a32      	ldr	r2, [pc, #200]	@ (8002e9c <HAL_TIM_Base_MspInit+0x17c>)
 8002dd4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002dd8:	6453      	str	r3, [r2, #68]	@ 0x44
 8002dda:	4b30      	ldr	r3, [pc, #192]	@ (8002e9c <HAL_TIM_Base_MspInit+0x17c>)
 8002ddc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002de2:	61bb      	str	r3, [r7, #24]
 8002de4:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002de6:	2019      	movs	r0, #25
 8002de8:	f001 f8bf 	bl	8003f6a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 4, 0);
 8002dec:	2200      	movs	r2, #0
 8002dee:	2104      	movs	r1, #4
 8002df0:	2019      	movs	r0, #25
 8002df2:	f001 f89e 	bl	8003f32 <HAL_NVIC_SetPriority>
}
 8002df6:	e04c      	b.n	8002e92 <HAL_TIM_Base_MspInit+0x172>
  else if(tim_baseHandle->Instance==TIM11)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a2b      	ldr	r2, [pc, #172]	@ (8002eac <HAL_TIM_Base_MspInit+0x18c>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d114      	bne.n	8002e2c <HAL_TIM_Base_MspInit+0x10c>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002e02:	4b26      	ldr	r3, [pc, #152]	@ (8002e9c <HAL_TIM_Base_MspInit+0x17c>)
 8002e04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e06:	4a25      	ldr	r2, [pc, #148]	@ (8002e9c <HAL_TIM_Base_MspInit+0x17c>)
 8002e08:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002e0c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e0e:	4b23      	ldr	r3, [pc, #140]	@ (8002e9c <HAL_TIM_Base_MspInit+0x17c>)
 8002e10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e12:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e16:	617b      	str	r3, [r7, #20]
 8002e18:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002e1a:	201a      	movs	r0, #26
 8002e1c:	f001 f8a5 	bl	8003f6a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 7, 0);
 8002e20:	2200      	movs	r2, #0
 8002e22:	2107      	movs	r1, #7
 8002e24:	201a      	movs	r0, #26
 8002e26:	f001 f884 	bl	8003f32 <HAL_NVIC_SetPriority>
}
 8002e2a:	e032      	b.n	8002e92 <HAL_TIM_Base_MspInit+0x172>
  else if(tim_baseHandle->Instance==TIM12)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a1f      	ldr	r2, [pc, #124]	@ (8002eb0 <HAL_TIM_Base_MspInit+0x190>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d114      	bne.n	8002e60 <HAL_TIM_Base_MspInit+0x140>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8002e36:	4b19      	ldr	r3, [pc, #100]	@ (8002e9c <HAL_TIM_Base_MspInit+0x17c>)
 8002e38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e3a:	4a18      	ldr	r2, [pc, #96]	@ (8002e9c <HAL_TIM_Base_MspInit+0x17c>)
 8002e3c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002e40:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e42:	4b16      	ldr	r3, [pc, #88]	@ (8002e9c <HAL_TIM_Base_MspInit+0x17c>)
 8002e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e4a:	613b      	str	r3, [r7, #16]
 8002e4c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8002e4e:	202b      	movs	r0, #43	@ 0x2b
 8002e50:	f001 f88b 	bl	8003f6a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 1, 0);
 8002e54:	2200      	movs	r2, #0
 8002e56:	2101      	movs	r1, #1
 8002e58:	202b      	movs	r0, #43	@ 0x2b
 8002e5a:	f001 f86a 	bl	8003f32 <HAL_NVIC_SetPriority>
}
 8002e5e:	e018      	b.n	8002e92 <HAL_TIM_Base_MspInit+0x172>
  else if(tim_baseHandle->Instance==TIM13)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a13      	ldr	r2, [pc, #76]	@ (8002eb4 <HAL_TIM_Base_MspInit+0x194>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d113      	bne.n	8002e92 <HAL_TIM_Base_MspInit+0x172>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8002e6a:	4b0c      	ldr	r3, [pc, #48]	@ (8002e9c <HAL_TIM_Base_MspInit+0x17c>)
 8002e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e6e:	4a0b      	ldr	r2, [pc, #44]	@ (8002e9c <HAL_TIM_Base_MspInit+0x17c>)
 8002e70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e74:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e76:	4b09      	ldr	r3, [pc, #36]	@ (8002e9c <HAL_TIM_Base_MspInit+0x17c>)
 8002e78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e7e:	60fb      	str	r3, [r7, #12]
 8002e80:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8002e82:	202c      	movs	r0, #44	@ 0x2c
 8002e84:	f001 f871 	bl	8003f6a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 5, 0);
 8002e88:	2200      	movs	r2, #0
 8002e8a:	2105      	movs	r1, #5
 8002e8c:	202c      	movs	r0, #44	@ 0x2c
 8002e8e:	f001 f850 	bl	8003f32 <HAL_NVIC_SetPriority>
}
 8002e92:	bf00      	nop
 8002e94:	3728      	adds	r7, #40	@ 0x28
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	bf00      	nop
 8002e9c:	40023800 	.word	0x40023800
 8002ea0:	40001400 	.word	0x40001400
 8002ea4:	40014000 	.word	0x40014000
 8002ea8:	40014400 	.word	0x40014400
 8002eac:	40014800 	.word	0x40014800
 8002eb0:	40001800 	.word	0x40001800
 8002eb4:	40001c00 	.word	0x40001c00

08002eb8 <USART3_IRQHandler>:
char mix[] = "mix";

extern uint8_t program_stage;

void USART3_IRQHandler(void)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
  /* Check if data is received */
  if (__HAL_UART_GET_FLAG(&huart3, UART_FLAG_RXNE))
 8002ebc:	4b50      	ldr	r3, [pc, #320]	@ (8003000 <USART3_IRQHandler+0x148>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	69db      	ldr	r3, [r3, #28]
 8002ec2:	f003 0320 	and.w	r3, r3, #32
 8002ec6:	2b20      	cmp	r3, #32
 8002ec8:	f040 8095 	bne.w	8002ff6 <USART3_IRQHandler+0x13e>
  {
    /* Receive one byte of data */
    uart_data = huart3.Instance->RDR;
 8002ecc:	4b4c      	ldr	r3, [pc, #304]	@ (8003000 <USART3_IRQHandler+0x148>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ed2:	b2da      	uxtb	r2, r3
 8002ed4:	4b4b      	ldr	r3, [pc, #300]	@ (8003004 <USART3_IRQHandler+0x14c>)
 8002ed6:	701a      	strb	r2, [r3, #0]
    if (uart_data != '\n' && ((rxIndex + 1) % ECHO_BUFFER_LENGTH) != 0)
 8002ed8:	4b4a      	ldr	r3, [pc, #296]	@ (8003004 <USART3_IRQHandler+0x14c>)
 8002eda:	781b      	ldrb	r3, [r3, #0]
 8002edc:	2b0a      	cmp	r3, #10
 8002ede:	d01f      	beq.n	8002f20 <USART3_IRQHandler+0x68>
 8002ee0:	4b49      	ldr	r3, [pc, #292]	@ (8003008 <USART3_IRQHandler+0x150>)
 8002ee2:	881b      	ldrh	r3, [r3, #0]
 8002ee4:	b29b      	uxth	r3, r3
 8002ee6:	3301      	adds	r3, #1
 8002ee8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d017      	beq.n	8002f20 <USART3_IRQHandler+0x68>
    {
      g_rxBuffer[rxIndex] = uart_data;
 8002ef0:	4b45      	ldr	r3, [pc, #276]	@ (8003008 <USART3_IRQHandler+0x150>)
 8002ef2:	881b      	ldrh	r3, [r3, #0]
 8002ef4:	b29b      	uxth	r3, r3
 8002ef6:	461a      	mov	r2, r3
 8002ef8:	4b42      	ldr	r3, [pc, #264]	@ (8003004 <USART3_IRQHandler+0x14c>)
 8002efa:	7819      	ldrb	r1, [r3, #0]
 8002efc:	4b43      	ldr	r3, [pc, #268]	@ (800300c <USART3_IRQHandler+0x154>)
 8002efe:	5499      	strb	r1, [r3, r2]
      rxIndex++;
 8002f00:	4b41      	ldr	r3, [pc, #260]	@ (8003008 <USART3_IRQHandler+0x150>)
 8002f02:	881b      	ldrh	r3, [r3, #0]
 8002f04:	b29b      	uxth	r3, r3
 8002f06:	3301      	adds	r3, #1
 8002f08:	b29a      	uxth	r2, r3
 8002f0a:	4b3f      	ldr	r3, [pc, #252]	@ (8003008 <USART3_IRQHandler+0x150>)
 8002f0c:	801a      	strh	r2, [r3, #0]
      rxIndex %= ECHO_BUFFER_LENGTH;
 8002f0e:	4b3e      	ldr	r3, [pc, #248]	@ (8003008 <USART3_IRQHandler+0x150>)
 8002f10:	881b      	ldrh	r3, [r3, #0]
 8002f12:	b29b      	uxth	r3, r3
 8002f14:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002f18:	b29a      	uxth	r2, r3
 8002f1a:	4b3b      	ldr	r3, [pc, #236]	@ (8003008 <USART3_IRQHandler+0x150>)
 8002f1c:	801a      	strh	r2, [r3, #0]
 8002f1e:	e06a      	b.n	8002ff6 <USART3_IRQHandler+0x13e>
    }
    else
    {
      g_rxBuffer[rxIndex] = '\0';
 8002f20:	4b39      	ldr	r3, [pc, #228]	@ (8003008 <USART3_IRQHandler+0x150>)
 8002f22:	881b      	ldrh	r3, [r3, #0]
 8002f24:	b29b      	uxth	r3, r3
 8002f26:	461a      	mov	r2, r3
 8002f28:	4b38      	ldr	r3, [pc, #224]	@ (800300c <USART3_IRQHandler+0x154>)
 8002f2a:	2100      	movs	r1, #0
 8002f2c:	5499      	strb	r1, [r3, r2]
      rxComplete = 1;
 8002f2e:	4b38      	ldr	r3, [pc, #224]	@ (8003010 <USART3_IRQHandler+0x158>)
 8002f30:	2201      	movs	r2, #1
 8002f32:	701a      	strb	r2, [r3, #0]
      rxIndex = 0;
 8002f34:	4b34      	ldr	r3, [pc, #208]	@ (8003008 <USART3_IRQHandler+0x150>)
 8002f36:	2200      	movs	r2, #0
 8002f38:	801a      	strh	r2, [r3, #0]
      // Process commands
      if (Getstartcmd())
 8002f3a:	4936      	ldr	r1, [pc, #216]	@ (8003014 <USART3_IRQHandler+0x15c>)
 8002f3c:	4833      	ldr	r0, [pc, #204]	@ (800300c <USART3_IRQHandler+0x154>)
 8002f3e:	f7fd f97f 	bl	8000240 <strcmp>
 8002f42:	4603      	mov	r3, r0
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d10b      	bne.n	8002f60 <USART3_IRQHandler+0xa8>
      {
        program_stage = 1;
 8002f48:	4b33      	ldr	r3, [pc, #204]	@ (8003018 <USART3_IRQHandler+0x160>)
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	701a      	strb	r2, [r3, #0]
        rxComplete = 0;
 8002f4e:	4b30      	ldr	r3, [pc, #192]	@ (8003010 <USART3_IRQHandler+0x158>)
 8002f50:	2200      	movs	r2, #0
 8002f52:	701a      	strb	r2, [r3, #0]
        memset(g_rxBuffer, 0, sizeof(g_rxBuffer));
 8002f54:	2240      	movs	r2, #64	@ 0x40
 8002f56:	2100      	movs	r1, #0
 8002f58:	482c      	ldr	r0, [pc, #176]	@ (800300c <USART3_IRQHandler+0x154>)
 8002f5a:	f004 fe4c 	bl	8007bf6 <memset>
 8002f5e:	e04a      	b.n	8002ff6 <USART3_IRQHandler+0x13e>
      }
      else if (Getstopcmd())
 8002f60:	492e      	ldr	r1, [pc, #184]	@ (800301c <USART3_IRQHandler+0x164>)
 8002f62:	482a      	ldr	r0, [pc, #168]	@ (800300c <USART3_IRQHandler+0x154>)
 8002f64:	f7fd f96c 	bl	8000240 <strcmp>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d10b      	bne.n	8002f86 <USART3_IRQHandler+0xce>
      {
        program_stage = 2;
 8002f6e:	4b2a      	ldr	r3, [pc, #168]	@ (8003018 <USART3_IRQHandler+0x160>)
 8002f70:	2202      	movs	r2, #2
 8002f72:	701a      	strb	r2, [r3, #0]
        rxComplete = 0;
 8002f74:	4b26      	ldr	r3, [pc, #152]	@ (8003010 <USART3_IRQHandler+0x158>)
 8002f76:	2200      	movs	r2, #0
 8002f78:	701a      	strb	r2, [r3, #0]
        memset(g_rxBuffer, 0, sizeof(g_rxBuffer));
 8002f7a:	2240      	movs	r2, #64	@ 0x40
 8002f7c:	2100      	movs	r1, #0
 8002f7e:	4823      	ldr	r0, [pc, #140]	@ (800300c <USART3_IRQHandler+0x154>)
 8002f80:	f004 fe39 	bl	8007bf6 <memset>
 8002f84:	e037      	b.n	8002ff6 <USART3_IRQHandler+0x13e>
      }
      else if (Getoptocmd())
 8002f86:	4926      	ldr	r1, [pc, #152]	@ (8003020 <USART3_IRQHandler+0x168>)
 8002f88:	4820      	ldr	r0, [pc, #128]	@ (800300c <USART3_IRQHandler+0x154>)
 8002f8a:	f7fd f959 	bl	8000240 <strcmp>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d10b      	bne.n	8002fac <USART3_IRQHandler+0xf4>
      {
        program_stage = 3;
 8002f94:	4b20      	ldr	r3, [pc, #128]	@ (8003018 <USART3_IRQHandler+0x160>)
 8002f96:	2203      	movs	r2, #3
 8002f98:	701a      	strb	r2, [r3, #0]
        rxComplete = 0;
 8002f9a:	4b1d      	ldr	r3, [pc, #116]	@ (8003010 <USART3_IRQHandler+0x158>)
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	701a      	strb	r2, [r3, #0]
        memset(g_rxBuffer, 0, sizeof(g_rxBuffer));
 8002fa0:	2240      	movs	r2, #64	@ 0x40
 8002fa2:	2100      	movs	r1, #0
 8002fa4:	4819      	ldr	r0, [pc, #100]	@ (800300c <USART3_IRQHandler+0x154>)
 8002fa6:	f004 fe26 	bl	8007bf6 <memset>
 8002faa:	e024      	b.n	8002ff6 <USART3_IRQHandler+0x13e>
      }
      else if (Geteleccmd())
 8002fac:	491d      	ldr	r1, [pc, #116]	@ (8003024 <USART3_IRQHandler+0x16c>)
 8002fae:	4817      	ldr	r0, [pc, #92]	@ (800300c <USART3_IRQHandler+0x154>)
 8002fb0:	f7fd f946 	bl	8000240 <strcmp>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d10b      	bne.n	8002fd2 <USART3_IRQHandler+0x11a>
      {
        program_stage = 4;
 8002fba:	4b17      	ldr	r3, [pc, #92]	@ (8003018 <USART3_IRQHandler+0x160>)
 8002fbc:	2204      	movs	r2, #4
 8002fbe:	701a      	strb	r2, [r3, #0]
        rxComplete = 0;
 8002fc0:	4b13      	ldr	r3, [pc, #76]	@ (8003010 <USART3_IRQHandler+0x158>)
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	701a      	strb	r2, [r3, #0]
        memset(g_rxBuffer, 0, sizeof(g_rxBuffer));
 8002fc6:	2240      	movs	r2, #64	@ 0x40
 8002fc8:	2100      	movs	r1, #0
 8002fca:	4810      	ldr	r0, [pc, #64]	@ (800300c <USART3_IRQHandler+0x154>)
 8002fcc:	f004 fe13 	bl	8007bf6 <memset>
 8002fd0:	e011      	b.n	8002ff6 <USART3_IRQHandler+0x13e>
      }
      else if (Getmixcmd())
 8002fd2:	4915      	ldr	r1, [pc, #84]	@ (8003028 <USART3_IRQHandler+0x170>)
 8002fd4:	480d      	ldr	r0, [pc, #52]	@ (800300c <USART3_IRQHandler+0x154>)
 8002fd6:	f7fd f933 	bl	8000240 <strcmp>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d10a      	bne.n	8002ff6 <USART3_IRQHandler+0x13e>
      {
        program_stage = 5;
 8002fe0:	4b0d      	ldr	r3, [pc, #52]	@ (8003018 <USART3_IRQHandler+0x160>)
 8002fe2:	2205      	movs	r2, #5
 8002fe4:	701a      	strb	r2, [r3, #0]
        rxComplete = 0;
 8002fe6:	4b0a      	ldr	r3, [pc, #40]	@ (8003010 <USART3_IRQHandler+0x158>)
 8002fe8:	2200      	movs	r2, #0
 8002fea:	701a      	strb	r2, [r3, #0]
        memset(g_rxBuffer, 0, sizeof(g_rxBuffer));
 8002fec:	2240      	movs	r2, #64	@ 0x40
 8002fee:	2100      	movs	r1, #0
 8002ff0:	4806      	ldr	r0, [pc, #24]	@ (800300c <USART3_IRQHandler+0x154>)
 8002ff2:	f004 fe00 	bl	8007bf6 <memset>
    }
  }

  //  HAL_UART_Receive_IT(&huart3, &uart_data, 1);
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002ff6:	4802      	ldr	r0, [pc, #8]	@ (8003000 <USART3_IRQHandler+0x148>)
 8002ff8:	f003 fc9e 	bl	8006938 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002ffc:	bf00      	nop
 8002ffe:	bd80      	pop	{r7, pc}
 8003000:	20000ae0 	.word	0x20000ae0
 8003004:	20000a98 	.word	0x20000a98
 8003008:	20000adc 	.word	0x20000adc
 800300c:	20000a9c 	.word	0x20000a9c
 8003010:	20000ade 	.word	0x20000ade
 8003014:	20000050 	.word	0x20000050
 8003018:	200002b8 	.word	0x200002b8
 800301c:	20000058 	.word	0x20000058
 8003020:	20000060 	.word	0x20000060
 8003024:	20000068 	.word	0x20000068
 8003028:	20000070 	.word	0x20000070

0800302c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003030:	4b18      	ldr	r3, [pc, #96]	@ (8003094 <MX_USART3_UART_Init+0x68>)
 8003032:	4a19      	ldr	r2, [pc, #100]	@ (8003098 <MX_USART3_UART_Init+0x6c>)
 8003034:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003036:	4b17      	ldr	r3, [pc, #92]	@ (8003094 <MX_USART3_UART_Init+0x68>)
 8003038:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800303c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800303e:	4b15      	ldr	r3, [pc, #84]	@ (8003094 <MX_USART3_UART_Init+0x68>)
 8003040:	2200      	movs	r2, #0
 8003042:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003044:	4b13      	ldr	r3, [pc, #76]	@ (8003094 <MX_USART3_UART_Init+0x68>)
 8003046:	2200      	movs	r2, #0
 8003048:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800304a:	4b12      	ldr	r3, [pc, #72]	@ (8003094 <MX_USART3_UART_Init+0x68>)
 800304c:	2200      	movs	r2, #0
 800304e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003050:	4b10      	ldr	r3, [pc, #64]	@ (8003094 <MX_USART3_UART_Init+0x68>)
 8003052:	220c      	movs	r2, #12
 8003054:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003056:	4b0f      	ldr	r3, [pc, #60]	@ (8003094 <MX_USART3_UART_Init+0x68>)
 8003058:	2200      	movs	r2, #0
 800305a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800305c:	4b0d      	ldr	r3, [pc, #52]	@ (8003094 <MX_USART3_UART_Init+0x68>)
 800305e:	2200      	movs	r2, #0
 8003060:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003062:	4b0c      	ldr	r3, [pc, #48]	@ (8003094 <MX_USART3_UART_Init+0x68>)
 8003064:	2200      	movs	r2, #0
 8003066:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003068:	4b0a      	ldr	r3, [pc, #40]	@ (8003094 <MX_USART3_UART_Init+0x68>)
 800306a:	2200      	movs	r2, #0
 800306c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800306e:	4809      	ldr	r0, [pc, #36]	@ (8003094 <MX_USART3_UART_Init+0x68>)
 8003070:	f003 fb8a 	bl	8006788 <HAL_UART_Init>
 8003074:	4603      	mov	r3, r0
 8003076:	2b00      	cmp	r3, #0
 8003078:	d001      	beq.n	800307e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800307a:	f7ff f9f3 	bl	8002464 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */
  __HAL_UART_ENABLE_IT(&huart3,UART_IT_RXNE);
 800307e:	4b05      	ldr	r3, [pc, #20]	@ (8003094 <MX_USART3_UART_Init+0x68>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	4b03      	ldr	r3, [pc, #12]	@ (8003094 <MX_USART3_UART_Init+0x68>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f042 0220 	orr.w	r2, r2, #32
 800308c:	601a      	str	r2, [r3, #0]
  /* USER CODE END USART3_Init 2 */

}
 800308e:	bf00      	nop
 8003090:	bd80      	pop	{r7, pc}
 8003092:	bf00      	nop
 8003094:	20000ae0 	.word	0x20000ae0
 8003098:	40004800 	.word	0x40004800

0800309c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b0ae      	sub	sp, #184	@ 0xb8
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030a4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80030a8:	2200      	movs	r2, #0
 80030aa:	601a      	str	r2, [r3, #0]
 80030ac:	605a      	str	r2, [r3, #4]
 80030ae:	609a      	str	r2, [r3, #8]
 80030b0:	60da      	str	r2, [r3, #12]
 80030b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80030b4:	f107 0314 	add.w	r3, r7, #20
 80030b8:	2290      	movs	r2, #144	@ 0x90
 80030ba:	2100      	movs	r1, #0
 80030bc:	4618      	mov	r0, r3
 80030be:	f004 fd9a 	bl	8007bf6 <memset>
  if(uartHandle->Instance==USART3)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a26      	ldr	r2, [pc, #152]	@ (8003160 <HAL_UART_MspInit+0xc4>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d144      	bne.n	8003156 <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80030cc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80030d0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80030d2:	2300      	movs	r3, #0
 80030d4:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80030d6:	f107 0314 	add.w	r3, r7, #20
 80030da:	4618      	mov	r0, r3
 80030dc:	f002 fb8e 	bl	80057fc <HAL_RCCEx_PeriphCLKConfig>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d001      	beq.n	80030ea <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80030e6:	f7ff f9bd 	bl	8002464 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80030ea:	4b1e      	ldr	r3, [pc, #120]	@ (8003164 <HAL_UART_MspInit+0xc8>)
 80030ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ee:	4a1d      	ldr	r2, [pc, #116]	@ (8003164 <HAL_UART_MspInit+0xc8>)
 80030f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80030f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80030f6:	4b1b      	ldr	r3, [pc, #108]	@ (8003164 <HAL_UART_MspInit+0xc8>)
 80030f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030fa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80030fe:	613b      	str	r3, [r7, #16]
 8003100:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003102:	4b18      	ldr	r3, [pc, #96]	@ (8003164 <HAL_UART_MspInit+0xc8>)
 8003104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003106:	4a17      	ldr	r2, [pc, #92]	@ (8003164 <HAL_UART_MspInit+0xc8>)
 8003108:	f043 0308 	orr.w	r3, r3, #8
 800310c:	6313      	str	r3, [r2, #48]	@ 0x30
 800310e:	4b15      	ldr	r3, [pc, #84]	@ (8003164 <HAL_UART_MspInit+0xc8>)
 8003110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003112:	f003 0308 	and.w	r3, r3, #8
 8003116:	60fb      	str	r3, [r7, #12]
 8003118:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800311a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800311e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003122:	2302      	movs	r3, #2
 8003124:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003128:	2300      	movs	r3, #0
 800312a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800312e:	2303      	movs	r3, #3
 8003130:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003134:	2307      	movs	r3, #7
 8003136:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800313a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800313e:	4619      	mov	r1, r3
 8003140:	4809      	ldr	r0, [pc, #36]	@ (8003168 <HAL_UART_MspInit+0xcc>)
 8003142:	f001 fc41 	bl	80049c8 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8003146:	2200      	movs	r2, #0
 8003148:	2100      	movs	r1, #0
 800314a:	2027      	movs	r0, #39	@ 0x27
 800314c:	f000 fef1 	bl	8003f32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003150:	2027      	movs	r0, #39	@ 0x27
 8003152:	f000 ff0a 	bl	8003f6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */
  /* USER CODE END USART3_MspInit 1 */
  }
}
 8003156:	bf00      	nop
 8003158:	37b8      	adds	r7, #184	@ 0xb8
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	40004800 	.word	0x40004800
 8003164:	40023800 	.word	0x40023800
 8003168:	40020c00 	.word	0x40020c00

0800316c <getCmd>:
}

/* USER CODE BEGIN 1 */

uint8_t getCmd(char *ed)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b082      	sub	sp, #8
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  if (rxComplete)
 8003174:	4b0d      	ldr	r3, [pc, #52]	@ (80031ac <getCmd+0x40>)
 8003176:	781b      	ldrb	r3, [r3, #0]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d011      	beq.n	80031a0 <getCmd+0x34>
  __ASM volatile ("cpsid i" : : : "memory");
 800317c:	b672      	cpsid	i
}
 800317e:	bf00      	nop
  {
    __disable_irq();
    strcpy(ed, (char *)g_rxBuffer);
 8003180:	490b      	ldr	r1, [pc, #44]	@ (80031b0 <getCmd+0x44>)
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	f004 fe0f 	bl	8007da6 <strcpy>
    rxComplete = 0;
 8003188:	4b08      	ldr	r3, [pc, #32]	@ (80031ac <getCmd+0x40>)
 800318a:	2200      	movs	r2, #0
 800318c:	701a      	strb	r2, [r3, #0]
    memset(g_rxBuffer, 0, sizeof(g_rxBuffer));
 800318e:	2240      	movs	r2, #64	@ 0x40
 8003190:	2100      	movs	r1, #0
 8003192:	4807      	ldr	r0, [pc, #28]	@ (80031b0 <getCmd+0x44>)
 8003194:	f004 fd2f 	bl	8007bf6 <memset>
  __ASM volatile ("cpsie i" : : : "memory");
 8003198:	b662      	cpsie	i
}
 800319a:	bf00      	nop
    __enable_irq();
    return 1;
 800319c:	2301      	movs	r3, #1
 800319e:	e000      	b.n	80031a2 <getCmd+0x36>
  }
  else
    return 0;
 80031a0:	2300      	movs	r3, #0
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3708      	adds	r7, #8
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}
 80031aa:	bf00      	nop
 80031ac:	20000ade 	.word	0x20000ade
 80031b0:	20000a9c 	.word	0x20000a9c

080031b4 <parseCmd_O>:
  HAL_UART_Transmit(&huart3, data, 2 * length, 100);
}

void parseCmd_O(char *ed, char *O_Prd_s, char *O_PTime_s, char *O_Cur1, char *O_Cur2,
 char *Mode_s, char *O_PulsePeriod_s, char *O_Repeat_s, char *O_StimPeriod_s, char *O_Delay_s)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b086      	sub	sp, #24
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	60f8      	str	r0, [r7, #12]
 80031bc:	60b9      	str	r1, [r7, #8]
 80031be:	607a      	str	r2, [r7, #4]
 80031c0:	603b      	str	r3, [r7, #0]
    char *token;
    token = strtok(ed, ",");
 80031c2:	4932      	ldr	r1, [pc, #200]	@ (800328c <parseCmd_O+0xd8>)
 80031c4:	68f8      	ldr	r0, [r7, #12]
 80031c6:	f004 fd1f 	bl	8007c08 <strtok>
 80031ca:	6178      	str	r0, [r7, #20]
    if (token != NULL)
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d003      	beq.n	80031da <parseCmd_O+0x26>
    {
        strcpy(O_Prd_s, token);
 80031d2:	6979      	ldr	r1, [r7, #20]
 80031d4:	68b8      	ldr	r0, [r7, #8]
 80031d6:	f004 fde6 	bl	8007da6 <strcpy>
    }

    token = strtok(NULL, ",");
 80031da:	492c      	ldr	r1, [pc, #176]	@ (800328c <parseCmd_O+0xd8>)
 80031dc:	2000      	movs	r0, #0
 80031de:	f004 fd13 	bl	8007c08 <strtok>
 80031e2:	6178      	str	r0, [r7, #20]
    if (token != NULL)
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d003      	beq.n	80031f2 <parseCmd_O+0x3e>
    {
        strcpy(O_PTime_s, token);
 80031ea:	6979      	ldr	r1, [r7, #20]
 80031ec:	6878      	ldr	r0, [r7, #4]
 80031ee:	f004 fdda 	bl	8007da6 <strcpy>
    }

    token = strtok(NULL, ",");
 80031f2:	4926      	ldr	r1, [pc, #152]	@ (800328c <parseCmd_O+0xd8>)
 80031f4:	2000      	movs	r0, #0
 80031f6:	f004 fd07 	bl	8007c08 <strtok>
 80031fa:	6178      	str	r0, [r7, #20]
    if (token != NULL)
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d003      	beq.n	800320a <parseCmd_O+0x56>
    {
        strcpy(O_Cur1, token);
 8003202:	6979      	ldr	r1, [r7, #20]
 8003204:	6838      	ldr	r0, [r7, #0]
 8003206:	f004 fdce 	bl	8007da6 <strcpy>
    }

    token = strtok(NULL, ",");
 800320a:	4920      	ldr	r1, [pc, #128]	@ (800328c <parseCmd_O+0xd8>)
 800320c:	2000      	movs	r0, #0
 800320e:	f004 fcfb 	bl	8007c08 <strtok>
 8003212:	6178      	str	r0, [r7, #20]
    if (token != NULL)
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d003      	beq.n	8003222 <parseCmd_O+0x6e>
    {
        strcpy(O_Cur2, token);
 800321a:	6979      	ldr	r1, [r7, #20]
 800321c:	6a38      	ldr	r0, [r7, #32]
 800321e:	f004 fdc2 	bl	8007da6 <strcpy>
    }

    token = strtok(NULL, ",");
 8003222:	491a      	ldr	r1, [pc, #104]	@ (800328c <parseCmd_O+0xd8>)
 8003224:	2000      	movs	r0, #0
 8003226:	f004 fcef 	bl	8007c08 <strtok>
 800322a:	6178      	str	r0, [r7, #20]
    if (token != NULL)
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d003      	beq.n	800323a <parseCmd_O+0x86>
    {
        strcpy(Mode_s, token);
 8003232:	6979      	ldr	r1, [r7, #20]
 8003234:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003236:	f004 fdb6 	bl	8007da6 <strcpy>
    }
    token = strtok(NULL, ",");
 800323a:	4914      	ldr	r1, [pc, #80]	@ (800328c <parseCmd_O+0xd8>)
 800323c:	2000      	movs	r0, #0
 800323e:	f004 fce3 	bl	8007c08 <strtok>
 8003242:	6178      	str	r0, [r7, #20]
    if (token != NULL)
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d003      	beq.n	8003252 <parseCmd_O+0x9e>
    {
        strcpy(O_PulsePeriod_s, token);
 800324a:	6979      	ldr	r1, [r7, #20]
 800324c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800324e:	f004 fdaa 	bl	8007da6 <strcpy>
    }
    token = strtok(NULL, ",");
 8003252:	490e      	ldr	r1, [pc, #56]	@ (800328c <parseCmd_O+0xd8>)
 8003254:	2000      	movs	r0, #0
 8003256:	f004 fcd7 	bl	8007c08 <strtok>
 800325a:	6178      	str	r0, [r7, #20]
    if (token != NULL)
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d003      	beq.n	800326a <parseCmd_O+0xb6>
    {
        strcpy(O_Repeat_s, token);
 8003262:	6979      	ldr	r1, [r7, #20]
 8003264:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003266:	f004 fd9e 	bl	8007da6 <strcpy>
    }
    token = strtok(NULL, ",");
 800326a:	4908      	ldr	r1, [pc, #32]	@ (800328c <parseCmd_O+0xd8>)
 800326c:	2000      	movs	r0, #0
 800326e:	f004 fccb 	bl	8007c08 <strtok>
 8003272:	6178      	str	r0, [r7, #20]
    if (token != NULL)
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d003      	beq.n	8003282 <parseCmd_O+0xce>
    {
        strcpy(O_StimPeriod_s, token);
 800327a:	6979      	ldr	r1, [r7, #20]
 800327c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800327e:	f004 fd92 	bl	8007da6 <strcpy>
    }
    
}
 8003282:	bf00      	nop
 8003284:	3718      	adds	r7, #24
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}
 800328a:	bf00      	nop
 800328c:	08008a0c 	.word	0x08008a0c

08003290 <parseCmd_E>:

void parseCmd_E(char *ed, char *E_Prd_s, char *E_PTime_s, char *E_Cur1, char *E_Cur2,
 char *Src_Site_s, char *CathodType_s, char *DstSite_s, char *Mode_s, 
 char *E_PulsePeriod_s, char *E_Repeat_s, char *E_StimPeriod_s, char *E_Delay_s)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b086      	sub	sp, #24
 8003294:	af00      	add	r7, sp, #0
 8003296:	60f8      	str	r0, [r7, #12]
 8003298:	60b9      	str	r1, [r7, #8]
 800329a:	607a      	str	r2, [r7, #4]
 800329c:	603b      	str	r3, [r7, #0]
    char *token;
    token = strtok(ed, ",");
 800329e:	494a      	ldr	r1, [pc, #296]	@ (80033c8 <parseCmd_E+0x138>)
 80032a0:	68f8      	ldr	r0, [r7, #12]
 80032a2:	f004 fcb1 	bl	8007c08 <strtok>
 80032a6:	6178      	str	r0, [r7, #20]
    if (token != NULL)
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d003      	beq.n	80032b6 <parseCmd_E+0x26>
    {
        strcpy(E_Prd_s, token);
 80032ae:	6979      	ldr	r1, [r7, #20]
 80032b0:	68b8      	ldr	r0, [r7, #8]
 80032b2:	f004 fd78 	bl	8007da6 <strcpy>
    }

    token = strtok(NULL, ",");
 80032b6:	4944      	ldr	r1, [pc, #272]	@ (80033c8 <parseCmd_E+0x138>)
 80032b8:	2000      	movs	r0, #0
 80032ba:	f004 fca5 	bl	8007c08 <strtok>
 80032be:	6178      	str	r0, [r7, #20]
    if (token != NULL)
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d003      	beq.n	80032ce <parseCmd_E+0x3e>
    {
        strcpy(E_PTime_s, token);
 80032c6:	6979      	ldr	r1, [r7, #20]
 80032c8:	6878      	ldr	r0, [r7, #4]
 80032ca:	f004 fd6c 	bl	8007da6 <strcpy>
    }

    token = strtok(NULL, ",");
 80032ce:	493e      	ldr	r1, [pc, #248]	@ (80033c8 <parseCmd_E+0x138>)
 80032d0:	2000      	movs	r0, #0
 80032d2:	f004 fc99 	bl	8007c08 <strtok>
 80032d6:	6178      	str	r0, [r7, #20]
    if (token != NULL)
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d003      	beq.n	80032e6 <parseCmd_E+0x56>
    {
        strcpy(E_Cur1, token);
 80032de:	6979      	ldr	r1, [r7, #20]
 80032e0:	6838      	ldr	r0, [r7, #0]
 80032e2:	f004 fd60 	bl	8007da6 <strcpy>
    }

    token = strtok(NULL, ",");
 80032e6:	4938      	ldr	r1, [pc, #224]	@ (80033c8 <parseCmd_E+0x138>)
 80032e8:	2000      	movs	r0, #0
 80032ea:	f004 fc8d 	bl	8007c08 <strtok>
 80032ee:	6178      	str	r0, [r7, #20]
    if (token != NULL)
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d003      	beq.n	80032fe <parseCmd_E+0x6e>
    {
        strcpy(E_Cur2, token);
 80032f6:	6979      	ldr	r1, [r7, #20]
 80032f8:	6a38      	ldr	r0, [r7, #32]
 80032fa:	f004 fd54 	bl	8007da6 <strcpy>
    }
    
    token = strtok(NULL, ",");
 80032fe:	4932      	ldr	r1, [pc, #200]	@ (80033c8 <parseCmd_E+0x138>)
 8003300:	2000      	movs	r0, #0
 8003302:	f004 fc81 	bl	8007c08 <strtok>
 8003306:	6178      	str	r0, [r7, #20]
    if (token != NULL)
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d003      	beq.n	8003316 <parseCmd_E+0x86>
    {
        strcpy(Src_Site_s, token);
 800330e:	6979      	ldr	r1, [r7, #20]
 8003310:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003312:	f004 fd48 	bl	8007da6 <strcpy>
    }
    token = strtok(NULL, ",");
 8003316:	492c      	ldr	r1, [pc, #176]	@ (80033c8 <parseCmd_E+0x138>)
 8003318:	2000      	movs	r0, #0
 800331a:	f004 fc75 	bl	8007c08 <strtok>
 800331e:	6178      	str	r0, [r7, #20]
    if (token != NULL)
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d003      	beq.n	800332e <parseCmd_E+0x9e>
    {
        strcpy(CathodType_s, token);
 8003326:	6979      	ldr	r1, [r7, #20]
 8003328:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800332a:	f004 fd3c 	bl	8007da6 <strcpy>
    }
    token = strtok(NULL, ",");
 800332e:	4926      	ldr	r1, [pc, #152]	@ (80033c8 <parseCmd_E+0x138>)
 8003330:	2000      	movs	r0, #0
 8003332:	f004 fc69 	bl	8007c08 <strtok>
 8003336:	6178      	str	r0, [r7, #20]
    if (token != NULL)
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d003      	beq.n	8003346 <parseCmd_E+0xb6>
    {
        strcpy(DstSite_s, token);
 800333e:	6979      	ldr	r1, [r7, #20]
 8003340:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003342:	f004 fd30 	bl	8007da6 <strcpy>
    }
    token = strtok(NULL, ",");
 8003346:	4920      	ldr	r1, [pc, #128]	@ (80033c8 <parseCmd_E+0x138>)
 8003348:	2000      	movs	r0, #0
 800334a:	f004 fc5d 	bl	8007c08 <strtok>
 800334e:	6178      	str	r0, [r7, #20]
    if (token != NULL)
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d003      	beq.n	800335e <parseCmd_E+0xce>
    {
        strcpy(Mode_s, token);
 8003356:	6979      	ldr	r1, [r7, #20]
 8003358:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800335a:	f004 fd24 	bl	8007da6 <strcpy>
    }
    token = strtok(NULL, ",");
 800335e:	491a      	ldr	r1, [pc, #104]	@ (80033c8 <parseCmd_E+0x138>)
 8003360:	2000      	movs	r0, #0
 8003362:	f004 fc51 	bl	8007c08 <strtok>
 8003366:	6178      	str	r0, [r7, #20]
    if (token != NULL)
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d003      	beq.n	8003376 <parseCmd_E+0xe6>
    {
        strcpy(E_PulsePeriod_s, token);
 800336e:	6979      	ldr	r1, [r7, #20]
 8003370:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003372:	f004 fd18 	bl	8007da6 <strcpy>
    }
    token = strtok(NULL, ",");
 8003376:	4914      	ldr	r1, [pc, #80]	@ (80033c8 <parseCmd_E+0x138>)
 8003378:	2000      	movs	r0, #0
 800337a:	f004 fc45 	bl	8007c08 <strtok>
 800337e:	6178      	str	r0, [r7, #20]
    if (token != NULL)
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d003      	beq.n	800338e <parseCmd_E+0xfe>
    {
        strcpy(E_Repeat_s, token);
 8003386:	6979      	ldr	r1, [r7, #20]
 8003388:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800338a:	f004 fd0c 	bl	8007da6 <strcpy>
    }
    token = strtok(NULL, ",");
 800338e:	490e      	ldr	r1, [pc, #56]	@ (80033c8 <parseCmd_E+0x138>)
 8003390:	2000      	movs	r0, #0
 8003392:	f004 fc39 	bl	8007c08 <strtok>
 8003396:	6178      	str	r0, [r7, #20]
    if (token != NULL)
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d003      	beq.n	80033a6 <parseCmd_E+0x116>
    {
        strcpy(E_StimPeriod_s, token);
 800339e:	6979      	ldr	r1, [r7, #20]
 80033a0:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80033a2:	f004 fd00 	bl	8007da6 <strcpy>
    }
    token = strtok(NULL, ",");
 80033a6:	4908      	ldr	r1, [pc, #32]	@ (80033c8 <parseCmd_E+0x138>)
 80033a8:	2000      	movs	r0, #0
 80033aa:	f004 fc2d 	bl	8007c08 <strtok>
 80033ae:	6178      	str	r0, [r7, #20]
    if (token != NULL)
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d003      	beq.n	80033be <parseCmd_E+0x12e>
    {
        strcpy(E_Delay_s, token);
 80033b6:	6979      	ldr	r1, [r7, #20]
 80033b8:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80033ba:	f004 fcf4 	bl	8007da6 <strcpy>
    }

}
 80033be:	bf00      	nop
 80033c0:	3718      	adds	r7, #24
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}
 80033c6:	bf00      	nop
 80033c8:	08008a0c 	.word	0x08008a0c

080033cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80033cc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003404 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80033d0:	f7ff fb0c 	bl	80029ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80033d4:	480c      	ldr	r0, [pc, #48]	@ (8003408 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80033d6:	490d      	ldr	r1, [pc, #52]	@ (800340c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80033d8:	4a0d      	ldr	r2, [pc, #52]	@ (8003410 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80033da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80033dc:	e002      	b.n	80033e4 <LoopCopyDataInit>

080033de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80033de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80033e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80033e2:	3304      	adds	r3, #4

080033e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80033e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80033e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80033e8:	d3f9      	bcc.n	80033de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80033ea:	4a0a      	ldr	r2, [pc, #40]	@ (8003414 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80033ec:	4c0a      	ldr	r4, [pc, #40]	@ (8003418 <LoopFillZerobss+0x22>)
  movs r3, #0
 80033ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80033f0:	e001      	b.n	80033f6 <LoopFillZerobss>

080033f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80033f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80033f4:	3204      	adds	r2, #4

080033f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80033f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80033f8:	d3fb      	bcc.n	80033f2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80033fa:	f004 fcad 	bl	8007d58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80033fe:	f7fd fe89 	bl	8001114 <main>
  bx  lr    
 8003402:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003404:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8003408:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800340c:	200000d8 	.word	0x200000d8
  ldr r2, =_sidata
 8003410:	08008c60 	.word	0x08008c60
  ldr r2, =_sbss
 8003414:	200000d8 	.word	0x200000d8
  ldr r4, =_ebss
 8003418:	20000cb8 	.word	0x20000cb8

0800341c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800341c:	e7fe      	b.n	800341c <ADC_IRQHandler>

0800341e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800341e:	b580      	push	{r7, lr}
 8003420:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003422:	2003      	movs	r0, #3
 8003424:	f000 fd7a 	bl	8003f1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003428:	2000      	movs	r0, #0
 800342a:	f000 f805 	bl	8003438 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800342e:	f7ff f9b9 	bl	80027a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003432:	2300      	movs	r3, #0
}
 8003434:	4618      	mov	r0, r3
 8003436:	bd80      	pop	{r7, pc}

08003438 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b082      	sub	sp, #8
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003440:	4b12      	ldr	r3, [pc, #72]	@ (800348c <HAL_InitTick+0x54>)
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	4b12      	ldr	r3, [pc, #72]	@ (8003490 <HAL_InitTick+0x58>)
 8003446:	781b      	ldrb	r3, [r3, #0]
 8003448:	4619      	mov	r1, r3
 800344a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800344e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003452:	fbb2 f3f3 	udiv	r3, r2, r3
 8003456:	4618      	mov	r0, r3
 8003458:	f000 fda3 	bl	8003fa2 <HAL_SYSTICK_Config>
 800345c:	4603      	mov	r3, r0
 800345e:	2b00      	cmp	r3, #0
 8003460:	d001      	beq.n	8003466 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e00e      	b.n	8003484 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2b0f      	cmp	r3, #15
 800346a:	d80a      	bhi.n	8003482 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800346c:	2200      	movs	r2, #0
 800346e:	6879      	ldr	r1, [r7, #4]
 8003470:	f04f 30ff 	mov.w	r0, #4294967295
 8003474:	f000 fd5d 	bl	8003f32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003478:	4a06      	ldr	r2, [pc, #24]	@ (8003494 <HAL_InitTick+0x5c>)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800347e:	2300      	movs	r3, #0
 8003480:	e000      	b.n	8003484 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
}
 8003484:	4618      	mov	r0, r3
 8003486:	3708      	adds	r7, #8
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}
 800348c:	2000004c 	.word	0x2000004c
 8003490:	20000078 	.word	0x20000078
 8003494:	20000074 	.word	0x20000074

08003498 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003498:	b480      	push	{r7}
 800349a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800349c:	4b06      	ldr	r3, [pc, #24]	@ (80034b8 <HAL_IncTick+0x20>)
 800349e:	781b      	ldrb	r3, [r3, #0]
 80034a0:	461a      	mov	r2, r3
 80034a2:	4b06      	ldr	r3, [pc, #24]	@ (80034bc <HAL_IncTick+0x24>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4413      	add	r3, r2
 80034a8:	4a04      	ldr	r2, [pc, #16]	@ (80034bc <HAL_IncTick+0x24>)
 80034aa:	6013      	str	r3, [r2, #0]
}
 80034ac:	bf00      	nop
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr
 80034b6:	bf00      	nop
 80034b8:	20000078 	.word	0x20000078
 80034bc:	20000b68 	.word	0x20000b68

080034c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80034c0:	b480      	push	{r7}
 80034c2:	af00      	add	r7, sp, #0
  return uwTick;
 80034c4:	4b03      	ldr	r3, [pc, #12]	@ (80034d4 <HAL_GetTick+0x14>)
 80034c6:	681b      	ldr	r3, [r3, #0]
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	46bd      	mov	sp, r7
 80034cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d0:	4770      	bx	lr
 80034d2:	bf00      	nop
 80034d4:	20000b68 	.word	0x20000b68

080034d8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b084      	sub	sp, #16
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80034e0:	2300      	movs	r3, #0
 80034e2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d101      	bne.n	80034ee <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	e031      	b.n	8003552 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d109      	bne.n	800350a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f7fd f91c 	bl	8000734 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2200      	movs	r2, #0
 8003500:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2200      	movs	r2, #0
 8003506:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800350e:	f003 0310 	and.w	r3, r3, #16
 8003512:	2b00      	cmp	r3, #0
 8003514:	d116      	bne.n	8003544 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800351a:	4b10      	ldr	r3, [pc, #64]	@ (800355c <HAL_ADC_Init+0x84>)
 800351c:	4013      	ands	r3, r2
 800351e:	f043 0202 	orr.w	r2, r3, #2
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f000 fa88 	bl	8003a3c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2200      	movs	r2, #0
 8003530:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003536:	f023 0303 	bic.w	r3, r3, #3
 800353a:	f043 0201 	orr.w	r2, r3, #1
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	641a      	str	r2, [r3, #64]	@ 0x40
 8003542:	e001      	b.n	8003548 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2200      	movs	r2, #0
 800354c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003550:	7bfb      	ldrb	r3, [r7, #15]
}
 8003552:	4618      	mov	r0, r3
 8003554:	3710      	adds	r7, #16
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	ffffeefd 	.word	0xffffeefd

08003560 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b086      	sub	sp, #24
 8003564:	af00      	add	r7, sp, #0
 8003566:	60f8      	str	r0, [r7, #12]
 8003568:	60b9      	str	r1, [r7, #8]
 800356a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 800356c:	2300      	movs	r3, #0
 800356e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003576:	2b01      	cmp	r3, #1
 8003578:	d101      	bne.n	800357e <HAL_ADC_Start_DMA+0x1e>
 800357a:	2302      	movs	r3, #2
 800357c:	e0d4      	b.n	8003728 <HAL_ADC_Start_DMA+0x1c8>
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2201      	movs	r2, #1
 8003582:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	f003 0301 	and.w	r3, r3, #1
 8003590:	2b01      	cmp	r3, #1
 8003592:	d018      	beq.n	80035c6 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	689a      	ldr	r2, [r3, #8]
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f042 0201 	orr.w	r2, r2, #1
 80035a2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80035a4:	4b62      	ldr	r3, [pc, #392]	@ (8003730 <HAL_ADC_Start_DMA+0x1d0>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a62      	ldr	r2, [pc, #392]	@ (8003734 <HAL_ADC_Start_DMA+0x1d4>)
 80035aa:	fba2 2303 	umull	r2, r3, r2, r3
 80035ae:	0c9a      	lsrs	r2, r3, #18
 80035b0:	4613      	mov	r3, r2
 80035b2:	005b      	lsls	r3, r3, #1
 80035b4:	4413      	add	r3, r2
 80035b6:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 80035b8:	e002      	b.n	80035c0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	3b01      	subs	r3, #1
 80035be:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d1f9      	bne.n	80035ba <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	f003 0301 	and.w	r3, r3, #1
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	f040 809c 	bne.w	800370e <HAL_ADC_Start_DMA+0x1ae>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80035da:	4b57      	ldr	r3, [pc, #348]	@ (8003738 <HAL_ADC_Start_DMA+0x1d8>)
 80035dc:	4013      	ands	r3, r2
 80035de:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d007      	beq.n	8003604 <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035f8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80035fc:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003608:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800360c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003610:	d106      	bne.n	8003620 <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003616:	f023 0206 	bic.w	r2, r3, #6
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	645a      	str	r2, [r3, #68]	@ 0x44
 800361e:	e002      	b.n	8003626 <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2200      	movs	r2, #0
 8003624:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2200      	movs	r2, #0
 800362a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003632:	4a42      	ldr	r2, [pc, #264]	@ (800373c <HAL_ADC_Start_DMA+0x1dc>)
 8003634:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800363a:	4a41      	ldr	r2, [pc, #260]	@ (8003740 <HAL_ADC_Start_DMA+0x1e0>)
 800363c:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003642:	4a40      	ldr	r2, [pc, #256]	@ (8003744 <HAL_ADC_Start_DMA+0x1e4>)
 8003644:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800364e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	685a      	ldr	r2, [r3, #4]
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800365e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	689a      	ldr	r2, [r3, #8]
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800366e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	334c      	adds	r3, #76	@ 0x4c
 800367a:	4619      	mov	r1, r3
 800367c:	68ba      	ldr	r2, [r7, #8]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	f000 fe46 	bl	8004310 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8003684:	4b30      	ldr	r3, [pc, #192]	@ (8003748 <HAL_ADC_Start_DMA+0x1e8>)
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	f003 031f 	and.w	r3, r3, #31
 800368c:	2b00      	cmp	r3, #0
 800368e:	d10f      	bne.n	80036b0 <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800369a:	2b00      	cmp	r3, #0
 800369c:	d143      	bne.n	8003726 <HAL_ADC_Start_DMA+0x1c6>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	689a      	ldr	r2, [r3, #8]
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80036ac:	609a      	str	r2, [r3, #8]
 80036ae:	e03a      	b.n	8003726 <HAL_ADC_Start_DMA+0x1c6>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a25      	ldr	r2, [pc, #148]	@ (800374c <HAL_ADC_Start_DMA+0x1ec>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d10e      	bne.n	80036d8 <HAL_ADC_Start_DMA+0x178>
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d107      	bne.n	80036d8 <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	689a      	ldr	r2, [r3, #8]
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80036d6:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80036d8:	4b1b      	ldr	r3, [pc, #108]	@ (8003748 <HAL_ADC_Start_DMA+0x1e8>)
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	f003 0310 	and.w	r3, r3, #16
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d120      	bne.n	8003726 <HAL_ADC_Start_DMA+0x1c6>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a19      	ldr	r2, [pc, #100]	@ (8003750 <HAL_ADC_Start_DMA+0x1f0>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d11b      	bne.n	8003726 <HAL_ADC_Start_DMA+0x1c6>
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d114      	bne.n	8003726 <HAL_ADC_Start_DMA+0x1c6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	689a      	ldr	r2, [r3, #8]
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800370a:	609a      	str	r2, [r3, #8]
 800370c:	e00b      	b.n	8003726 <HAL_ADC_Start_DMA+0x1c6>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003712:	f043 0210 	orr.w	r2, r3, #16
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800371e:	f043 0201 	orr.w	r2, r3, #1
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003726:	2300      	movs	r3, #0
}
 8003728:	4618      	mov	r0, r3
 800372a:	3718      	adds	r7, #24
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}
 8003730:	2000004c 	.word	0x2000004c
 8003734:	431bde83 	.word	0x431bde83
 8003738:	fffff8fe 	.word	0xfffff8fe
 800373c:	08003c31 	.word	0x08003c31
 8003740:	08003ceb 	.word	0x08003ceb
 8003744:	08003d07 	.word	0x08003d07
 8003748:	40012300 	.word	0x40012300
 800374c:	40012000 	.word	0x40012000
 8003750:	40012200 	.word	0x40012200

08003754 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003754:	b480      	push	{r7}
 8003756:	b083      	sub	sp, #12
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800375c:	bf00      	nop
 800375e:	370c      	adds	r7, #12
 8003760:	46bd      	mov	sp, r7
 8003762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003766:	4770      	bx	lr

08003768 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003768:	b480      	push	{r7}
 800376a:	b083      	sub	sp, #12
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003770:	bf00      	nop
 8003772:	370c      	adds	r7, #12
 8003774:	46bd      	mov	sp, r7
 8003776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377a:	4770      	bx	lr

0800377c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800377c:	b480      	push	{r7}
 800377e:	b083      	sub	sp, #12
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003784:	bf00      	nop
 8003786:	370c      	adds	r7, #12
 8003788:	46bd      	mov	sp, r7
 800378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378e:	4770      	bx	lr

08003790 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003790:	b480      	push	{r7}
 8003792:	b085      	sub	sp, #20
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
 8003798:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800379a:	2300      	movs	r3, #0
 800379c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d101      	bne.n	80037ac <HAL_ADC_ConfigChannel+0x1c>
 80037a8:	2302      	movs	r3, #2
 80037aa:	e136      	b.n	8003a1a <HAL_ADC_ConfigChannel+0x28a>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2201      	movs	r2, #1
 80037b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	2b09      	cmp	r3, #9
 80037ba:	d93a      	bls.n	8003832 <HAL_ADC_ConfigChannel+0xa2>
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80037c4:	d035      	beq.n	8003832 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	68d9      	ldr	r1, [r3, #12]
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	b29b      	uxth	r3, r3
 80037d2:	461a      	mov	r2, r3
 80037d4:	4613      	mov	r3, r2
 80037d6:	005b      	lsls	r3, r3, #1
 80037d8:	4413      	add	r3, r2
 80037da:	3b1e      	subs	r3, #30
 80037dc:	2207      	movs	r2, #7
 80037de:	fa02 f303 	lsl.w	r3, r2, r3
 80037e2:	43da      	mvns	r2, r3
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	400a      	ands	r2, r1
 80037ea:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a8d      	ldr	r2, [pc, #564]	@ (8003a28 <HAL_ADC_ConfigChannel+0x298>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d10a      	bne.n	800380c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	68d9      	ldr	r1, [r3, #12]
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	061a      	lsls	r2, r3, #24
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	430a      	orrs	r2, r1
 8003808:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800380a:	e035      	b.n	8003878 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	68d9      	ldr	r1, [r3, #12]
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	689a      	ldr	r2, [r3, #8]
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	b29b      	uxth	r3, r3
 800381c:	4618      	mov	r0, r3
 800381e:	4603      	mov	r3, r0
 8003820:	005b      	lsls	r3, r3, #1
 8003822:	4403      	add	r3, r0
 8003824:	3b1e      	subs	r3, #30
 8003826:	409a      	lsls	r2, r3
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	430a      	orrs	r2, r1
 800382e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003830:	e022      	b.n	8003878 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	6919      	ldr	r1, [r3, #16]
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	b29b      	uxth	r3, r3
 800383e:	461a      	mov	r2, r3
 8003840:	4613      	mov	r3, r2
 8003842:	005b      	lsls	r3, r3, #1
 8003844:	4413      	add	r3, r2
 8003846:	2207      	movs	r2, #7
 8003848:	fa02 f303 	lsl.w	r3, r2, r3
 800384c:	43da      	mvns	r2, r3
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	400a      	ands	r2, r1
 8003854:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	6919      	ldr	r1, [r3, #16]
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	689a      	ldr	r2, [r3, #8]
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	b29b      	uxth	r3, r3
 8003866:	4618      	mov	r0, r3
 8003868:	4603      	mov	r3, r0
 800386a:	005b      	lsls	r3, r3, #1
 800386c:	4403      	add	r3, r0
 800386e:	409a      	lsls	r2, r3
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	430a      	orrs	r2, r1
 8003876:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	2b06      	cmp	r3, #6
 800387e:	d824      	bhi.n	80038ca <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	685a      	ldr	r2, [r3, #4]
 800388a:	4613      	mov	r3, r2
 800388c:	009b      	lsls	r3, r3, #2
 800388e:	4413      	add	r3, r2
 8003890:	3b05      	subs	r3, #5
 8003892:	221f      	movs	r2, #31
 8003894:	fa02 f303 	lsl.w	r3, r2, r3
 8003898:	43da      	mvns	r2, r3
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	400a      	ands	r2, r1
 80038a0:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	b29b      	uxth	r3, r3
 80038ae:	4618      	mov	r0, r3
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	685a      	ldr	r2, [r3, #4]
 80038b4:	4613      	mov	r3, r2
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	4413      	add	r3, r2
 80038ba:	3b05      	subs	r3, #5
 80038bc:	fa00 f203 	lsl.w	r2, r0, r3
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	430a      	orrs	r2, r1
 80038c6:	635a      	str	r2, [r3, #52]	@ 0x34
 80038c8:	e04c      	b.n	8003964 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	2b0c      	cmp	r3, #12
 80038d0:	d824      	bhi.n	800391c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	685a      	ldr	r2, [r3, #4]
 80038dc:	4613      	mov	r3, r2
 80038de:	009b      	lsls	r3, r3, #2
 80038e0:	4413      	add	r3, r2
 80038e2:	3b23      	subs	r3, #35	@ 0x23
 80038e4:	221f      	movs	r2, #31
 80038e6:	fa02 f303 	lsl.w	r3, r2, r3
 80038ea:	43da      	mvns	r2, r3
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	400a      	ands	r2, r1
 80038f2:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	b29b      	uxth	r3, r3
 8003900:	4618      	mov	r0, r3
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	685a      	ldr	r2, [r3, #4]
 8003906:	4613      	mov	r3, r2
 8003908:	009b      	lsls	r3, r3, #2
 800390a:	4413      	add	r3, r2
 800390c:	3b23      	subs	r3, #35	@ 0x23
 800390e:	fa00 f203 	lsl.w	r2, r0, r3
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	430a      	orrs	r2, r1
 8003918:	631a      	str	r2, [r3, #48]	@ 0x30
 800391a:	e023      	b.n	8003964 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	685a      	ldr	r2, [r3, #4]
 8003926:	4613      	mov	r3, r2
 8003928:	009b      	lsls	r3, r3, #2
 800392a:	4413      	add	r3, r2
 800392c:	3b41      	subs	r3, #65	@ 0x41
 800392e:	221f      	movs	r2, #31
 8003930:	fa02 f303 	lsl.w	r3, r2, r3
 8003934:	43da      	mvns	r2, r3
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	400a      	ands	r2, r1
 800393c:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	b29b      	uxth	r3, r3
 800394a:	4618      	mov	r0, r3
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	685a      	ldr	r2, [r3, #4]
 8003950:	4613      	mov	r3, r2
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	4413      	add	r3, r2
 8003956:	3b41      	subs	r3, #65	@ 0x41
 8003958:	fa00 f203 	lsl.w	r2, r0, r3
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	430a      	orrs	r2, r1
 8003962:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a30      	ldr	r2, [pc, #192]	@ (8003a2c <HAL_ADC_ConfigChannel+0x29c>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d10a      	bne.n	8003984 <HAL_ADC_ConfigChannel+0x1f4>
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003976:	d105      	bne.n	8003984 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8003978:	4b2d      	ldr	r3, [pc, #180]	@ (8003a30 <HAL_ADC_ConfigChannel+0x2a0>)
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	4a2c      	ldr	r2, [pc, #176]	@ (8003a30 <HAL_ADC_ConfigChannel+0x2a0>)
 800397e:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8003982:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a28      	ldr	r2, [pc, #160]	@ (8003a2c <HAL_ADC_ConfigChannel+0x29c>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d10f      	bne.n	80039ae <HAL_ADC_ConfigChannel+0x21e>
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	2b12      	cmp	r3, #18
 8003994:	d10b      	bne.n	80039ae <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8003996:	4b26      	ldr	r3, [pc, #152]	@ (8003a30 <HAL_ADC_ConfigChannel+0x2a0>)
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	4a25      	ldr	r2, [pc, #148]	@ (8003a30 <HAL_ADC_ConfigChannel+0x2a0>)
 800399c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80039a0:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80039a2:	4b23      	ldr	r3, [pc, #140]	@ (8003a30 <HAL_ADC_ConfigChannel+0x2a0>)
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	4a22      	ldr	r2, [pc, #136]	@ (8003a30 <HAL_ADC_ConfigChannel+0x2a0>)
 80039a8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80039ac:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a1e      	ldr	r2, [pc, #120]	@ (8003a2c <HAL_ADC_ConfigChannel+0x29c>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d12b      	bne.n	8003a10 <HAL_ADC_ConfigChannel+0x280>
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a1a      	ldr	r2, [pc, #104]	@ (8003a28 <HAL_ADC_ConfigChannel+0x298>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d003      	beq.n	80039ca <HAL_ADC_ConfigChannel+0x23a>
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	2b11      	cmp	r3, #17
 80039c8:	d122      	bne.n	8003a10 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80039ca:	4b19      	ldr	r3, [pc, #100]	@ (8003a30 <HAL_ADC_ConfigChannel+0x2a0>)
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	4a18      	ldr	r2, [pc, #96]	@ (8003a30 <HAL_ADC_ConfigChannel+0x2a0>)
 80039d0:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80039d4:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80039d6:	4b16      	ldr	r3, [pc, #88]	@ (8003a30 <HAL_ADC_ConfigChannel+0x2a0>)
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	4a15      	ldr	r2, [pc, #84]	@ (8003a30 <HAL_ADC_ConfigChannel+0x2a0>)
 80039dc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80039e0:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a10      	ldr	r2, [pc, #64]	@ (8003a28 <HAL_ADC_ConfigChannel+0x298>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d111      	bne.n	8003a10 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80039ec:	4b11      	ldr	r3, [pc, #68]	@ (8003a34 <HAL_ADC_ConfigChannel+0x2a4>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a11      	ldr	r2, [pc, #68]	@ (8003a38 <HAL_ADC_ConfigChannel+0x2a8>)
 80039f2:	fba2 2303 	umull	r2, r3, r2, r3
 80039f6:	0c9a      	lsrs	r2, r3, #18
 80039f8:	4613      	mov	r3, r2
 80039fa:	009b      	lsls	r3, r3, #2
 80039fc:	4413      	add	r3, r2
 80039fe:	005b      	lsls	r3, r3, #1
 8003a00:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003a02:	e002      	b.n	8003a0a <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	3b01      	subs	r3, #1
 8003a08:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d1f9      	bne.n	8003a04 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2200      	movs	r2, #0
 8003a14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003a18:	2300      	movs	r3, #0
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3714      	adds	r7, #20
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a24:	4770      	bx	lr
 8003a26:	bf00      	nop
 8003a28:	10000012 	.word	0x10000012
 8003a2c:	40012000 	.word	0x40012000
 8003a30:	40012300 	.word	0x40012300
 8003a34:	2000004c 	.word	0x2000004c
 8003a38:	431bde83 	.word	0x431bde83

08003a3c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b083      	sub	sp, #12
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003a44:	4b78      	ldr	r3, [pc, #480]	@ (8003c28 <ADC_Init+0x1ec>)
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	4a77      	ldr	r2, [pc, #476]	@ (8003c28 <ADC_Init+0x1ec>)
 8003a4a:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8003a4e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003a50:	4b75      	ldr	r3, [pc, #468]	@ (8003c28 <ADC_Init+0x1ec>)
 8003a52:	685a      	ldr	r2, [r3, #4]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	4973      	ldr	r1, [pc, #460]	@ (8003c28 <ADC_Init+0x1ec>)
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	685a      	ldr	r2, [r3, #4]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003a6c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	6859      	ldr	r1, [r3, #4]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	691b      	ldr	r3, [r3, #16]
 8003a78:	021a      	lsls	r2, r3, #8
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	430a      	orrs	r2, r1
 8003a80:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	685a      	ldr	r2, [r3, #4]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003a90:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	6859      	ldr	r1, [r3, #4]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	689a      	ldr	r2, [r3, #8]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	430a      	orrs	r2, r1
 8003aa2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	689a      	ldr	r2, [r3, #8]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003ab2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	6899      	ldr	r1, [r3, #8]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	68da      	ldr	r2, [r3, #12]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	430a      	orrs	r2, r1
 8003ac4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003aca:	4a58      	ldr	r2, [pc, #352]	@ (8003c2c <ADC_Init+0x1f0>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d022      	beq.n	8003b16 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	689a      	ldr	r2, [r3, #8]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003ade:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	6899      	ldr	r1, [r3, #8]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	430a      	orrs	r2, r1
 8003af0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	689a      	ldr	r2, [r3, #8]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003b00:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	6899      	ldr	r1, [r3, #8]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	430a      	orrs	r2, r1
 8003b12:	609a      	str	r2, [r3, #8]
 8003b14:	e00f      	b.n	8003b36 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	689a      	ldr	r2, [r3, #8]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003b24:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	689a      	ldr	r2, [r3, #8]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003b34:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	689a      	ldr	r2, [r3, #8]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f022 0202 	bic.w	r2, r2, #2
 8003b44:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	6899      	ldr	r1, [r3, #8]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	699b      	ldr	r3, [r3, #24]
 8003b50:	005a      	lsls	r2, r3, #1
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	430a      	orrs	r2, r1
 8003b58:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d01b      	beq.n	8003b9c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	685a      	ldr	r2, [r3, #4]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003b72:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	685a      	ldr	r2, [r3, #4]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003b82:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	6859      	ldr	r1, [r3, #4]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b8e:	3b01      	subs	r3, #1
 8003b90:	035a      	lsls	r2, r3, #13
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	430a      	orrs	r2, r1
 8003b98:	605a      	str	r2, [r3, #4]
 8003b9a:	e007      	b.n	8003bac <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	685a      	ldr	r2, [r3, #4]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003baa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003bba:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	69db      	ldr	r3, [r3, #28]
 8003bc6:	3b01      	subs	r3, #1
 8003bc8:	051a      	lsls	r2, r3, #20
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	430a      	orrs	r2, r1
 8003bd0:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	689a      	ldr	r2, [r3, #8]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003be0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	6899      	ldr	r1, [r3, #8]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003bee:	025a      	lsls	r2, r3, #9
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	430a      	orrs	r2, r1
 8003bf6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	689a      	ldr	r2, [r3, #8]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c06:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	6899      	ldr	r1, [r3, #8]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	695b      	ldr	r3, [r3, #20]
 8003c12:	029a      	lsls	r2, r3, #10
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	430a      	orrs	r2, r1
 8003c1a:	609a      	str	r2, [r3, #8]
}
 8003c1c:	bf00      	nop
 8003c1e:	370c      	adds	r7, #12
 8003c20:	46bd      	mov	sp, r7
 8003c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c26:	4770      	bx	lr
 8003c28:	40012300 	.word	0x40012300
 8003c2c:	0f000001 	.word	0x0f000001

08003c30 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b084      	sub	sp, #16
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c3c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c42:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d13c      	bne.n	8003cc4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c4e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d12b      	bne.n	8003cbc <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d127      	bne.n	8003cbc <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c72:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d006      	beq.n	8003c88 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d119      	bne.n	8003cbc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	685a      	ldr	r2, [r3, #4]
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f022 0220 	bic.w	r2, r2, #32
 8003c96:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c9c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ca8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d105      	bne.n	8003cbc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cb4:	f043 0201 	orr.w	r2, r3, #1
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003cbc:	68f8      	ldr	r0, [r7, #12]
 8003cbe:	f7ff fd49 	bl	8003754 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003cc2:	e00e      	b.n	8003ce2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cc8:	f003 0310 	and.w	r3, r3, #16
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d003      	beq.n	8003cd8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003cd0:	68f8      	ldr	r0, [r7, #12]
 8003cd2:	f7ff fd53 	bl	800377c <HAL_ADC_ErrorCallback>
}
 8003cd6:	e004      	b.n	8003ce2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	4798      	blx	r3
}
 8003ce2:	bf00      	nop
 8003ce4:	3710      	adds	r7, #16
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}

08003cea <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003cea:	b580      	push	{r7, lr}
 8003cec:	b084      	sub	sp, #16
 8003cee:	af00      	add	r7, sp, #0
 8003cf0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cf6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003cf8:	68f8      	ldr	r0, [r7, #12]
 8003cfa:	f7ff fd35 	bl	8003768 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003cfe:	bf00      	nop
 8003d00:	3710      	adds	r7, #16
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}

08003d06 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003d06:	b580      	push	{r7, lr}
 8003d08:	b084      	sub	sp, #16
 8003d0a:	af00      	add	r7, sp, #0
 8003d0c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d12:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2240      	movs	r2, #64	@ 0x40
 8003d18:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d1e:	f043 0204 	orr.w	r2, r3, #4
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003d26:	68f8      	ldr	r0, [r7, #12]
 8003d28:	f7ff fd28 	bl	800377c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003d2c:	bf00      	nop
 8003d2e:	3710      	adds	r7, #16
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}

08003d34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b085      	sub	sp, #20
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	f003 0307 	and.w	r3, r3, #7
 8003d42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d44:	4b0b      	ldr	r3, [pc, #44]	@ (8003d74 <__NVIC_SetPriorityGrouping+0x40>)
 8003d46:	68db      	ldr	r3, [r3, #12]
 8003d48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d4a:	68ba      	ldr	r2, [r7, #8]
 8003d4c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003d50:	4013      	ands	r3, r2
 8003d52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003d5c:	4b06      	ldr	r3, [pc, #24]	@ (8003d78 <__NVIC_SetPriorityGrouping+0x44>)
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d62:	4a04      	ldr	r2, [pc, #16]	@ (8003d74 <__NVIC_SetPriorityGrouping+0x40>)
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	60d3      	str	r3, [r2, #12]
}
 8003d68:	bf00      	nop
 8003d6a:	3714      	adds	r7, #20
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d72:	4770      	bx	lr
 8003d74:	e000ed00 	.word	0xe000ed00
 8003d78:	05fa0000 	.word	0x05fa0000

08003d7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d80:	4b04      	ldr	r3, [pc, #16]	@ (8003d94 <__NVIC_GetPriorityGrouping+0x18>)
 8003d82:	68db      	ldr	r3, [r3, #12]
 8003d84:	0a1b      	lsrs	r3, r3, #8
 8003d86:	f003 0307 	and.w	r3, r3, #7
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d92:	4770      	bx	lr
 8003d94:	e000ed00 	.word	0xe000ed00

08003d98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b083      	sub	sp, #12
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	4603      	mov	r3, r0
 8003da0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	db0b      	blt.n	8003dc2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003daa:	79fb      	ldrb	r3, [r7, #7]
 8003dac:	f003 021f 	and.w	r2, r3, #31
 8003db0:	4907      	ldr	r1, [pc, #28]	@ (8003dd0 <__NVIC_EnableIRQ+0x38>)
 8003db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003db6:	095b      	lsrs	r3, r3, #5
 8003db8:	2001      	movs	r0, #1
 8003dba:	fa00 f202 	lsl.w	r2, r0, r2
 8003dbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003dc2:	bf00      	nop
 8003dc4:	370c      	adds	r7, #12
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dcc:	4770      	bx	lr
 8003dce:	bf00      	nop
 8003dd0:	e000e100 	.word	0xe000e100

08003dd4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b083      	sub	sp, #12
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	4603      	mov	r3, r0
 8003ddc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	db12      	blt.n	8003e0c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003de6:	79fb      	ldrb	r3, [r7, #7]
 8003de8:	f003 021f 	and.w	r2, r3, #31
 8003dec:	490a      	ldr	r1, [pc, #40]	@ (8003e18 <__NVIC_DisableIRQ+0x44>)
 8003dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003df2:	095b      	lsrs	r3, r3, #5
 8003df4:	2001      	movs	r0, #1
 8003df6:	fa00 f202 	lsl.w	r2, r0, r2
 8003dfa:	3320      	adds	r3, #32
 8003dfc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003e00:	f3bf 8f4f 	dsb	sy
}
 8003e04:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003e06:	f3bf 8f6f 	isb	sy
}
 8003e0a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003e0c:	bf00      	nop
 8003e0e:	370c      	adds	r7, #12
 8003e10:	46bd      	mov	sp, r7
 8003e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e16:	4770      	bx	lr
 8003e18:	e000e100 	.word	0xe000e100

08003e1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b083      	sub	sp, #12
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	4603      	mov	r3, r0
 8003e24:	6039      	str	r1, [r7, #0]
 8003e26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	db0a      	blt.n	8003e46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	b2da      	uxtb	r2, r3
 8003e34:	490c      	ldr	r1, [pc, #48]	@ (8003e68 <__NVIC_SetPriority+0x4c>)
 8003e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e3a:	0112      	lsls	r2, r2, #4
 8003e3c:	b2d2      	uxtb	r2, r2
 8003e3e:	440b      	add	r3, r1
 8003e40:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e44:	e00a      	b.n	8003e5c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	b2da      	uxtb	r2, r3
 8003e4a:	4908      	ldr	r1, [pc, #32]	@ (8003e6c <__NVIC_SetPriority+0x50>)
 8003e4c:	79fb      	ldrb	r3, [r7, #7]
 8003e4e:	f003 030f 	and.w	r3, r3, #15
 8003e52:	3b04      	subs	r3, #4
 8003e54:	0112      	lsls	r2, r2, #4
 8003e56:	b2d2      	uxtb	r2, r2
 8003e58:	440b      	add	r3, r1
 8003e5a:	761a      	strb	r2, [r3, #24]
}
 8003e5c:	bf00      	nop
 8003e5e:	370c      	adds	r7, #12
 8003e60:	46bd      	mov	sp, r7
 8003e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e66:	4770      	bx	lr
 8003e68:	e000e100 	.word	0xe000e100
 8003e6c:	e000ed00 	.word	0xe000ed00

08003e70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b089      	sub	sp, #36	@ 0x24
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	60f8      	str	r0, [r7, #12]
 8003e78:	60b9      	str	r1, [r7, #8]
 8003e7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	f003 0307 	and.w	r3, r3, #7
 8003e82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e84:	69fb      	ldr	r3, [r7, #28]
 8003e86:	f1c3 0307 	rsb	r3, r3, #7
 8003e8a:	2b04      	cmp	r3, #4
 8003e8c:	bf28      	it	cs
 8003e8e:	2304      	movcs	r3, #4
 8003e90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e92:	69fb      	ldr	r3, [r7, #28]
 8003e94:	3304      	adds	r3, #4
 8003e96:	2b06      	cmp	r3, #6
 8003e98:	d902      	bls.n	8003ea0 <NVIC_EncodePriority+0x30>
 8003e9a:	69fb      	ldr	r3, [r7, #28]
 8003e9c:	3b03      	subs	r3, #3
 8003e9e:	e000      	b.n	8003ea2 <NVIC_EncodePriority+0x32>
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ea4:	f04f 32ff 	mov.w	r2, #4294967295
 8003ea8:	69bb      	ldr	r3, [r7, #24]
 8003eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8003eae:	43da      	mvns	r2, r3
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	401a      	ands	r2, r3
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003eb8:	f04f 31ff 	mov.w	r1, #4294967295
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	fa01 f303 	lsl.w	r3, r1, r3
 8003ec2:	43d9      	mvns	r1, r3
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ec8:	4313      	orrs	r3, r2
         );
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	3724      	adds	r7, #36	@ 0x24
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed4:	4770      	bx	lr
	...

08003ed8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b082      	sub	sp, #8
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	3b01      	subs	r3, #1
 8003ee4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003ee8:	d301      	bcc.n	8003eee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003eea:	2301      	movs	r3, #1
 8003eec:	e00f      	b.n	8003f0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003eee:	4a0a      	ldr	r2, [pc, #40]	@ (8003f18 <SysTick_Config+0x40>)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	3b01      	subs	r3, #1
 8003ef4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ef6:	210f      	movs	r1, #15
 8003ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8003efc:	f7ff ff8e 	bl	8003e1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003f00:	4b05      	ldr	r3, [pc, #20]	@ (8003f18 <SysTick_Config+0x40>)
 8003f02:	2200      	movs	r2, #0
 8003f04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003f06:	4b04      	ldr	r3, [pc, #16]	@ (8003f18 <SysTick_Config+0x40>)
 8003f08:	2207      	movs	r2, #7
 8003f0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003f0c:	2300      	movs	r3, #0
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3708      	adds	r7, #8
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}
 8003f16:	bf00      	nop
 8003f18:	e000e010 	.word	0xe000e010

08003f1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b082      	sub	sp, #8
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f24:	6878      	ldr	r0, [r7, #4]
 8003f26:	f7ff ff05 	bl	8003d34 <__NVIC_SetPriorityGrouping>
}
 8003f2a:	bf00      	nop
 8003f2c:	3708      	adds	r7, #8
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}

08003f32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003f32:	b580      	push	{r7, lr}
 8003f34:	b086      	sub	sp, #24
 8003f36:	af00      	add	r7, sp, #0
 8003f38:	4603      	mov	r3, r0
 8003f3a:	60b9      	str	r1, [r7, #8]
 8003f3c:	607a      	str	r2, [r7, #4]
 8003f3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003f40:	2300      	movs	r3, #0
 8003f42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003f44:	f7ff ff1a 	bl	8003d7c <__NVIC_GetPriorityGrouping>
 8003f48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f4a:	687a      	ldr	r2, [r7, #4]
 8003f4c:	68b9      	ldr	r1, [r7, #8]
 8003f4e:	6978      	ldr	r0, [r7, #20]
 8003f50:	f7ff ff8e 	bl	8003e70 <NVIC_EncodePriority>
 8003f54:	4602      	mov	r2, r0
 8003f56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f5a:	4611      	mov	r1, r2
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f7ff ff5d 	bl	8003e1c <__NVIC_SetPriority>
}
 8003f62:	bf00      	nop
 8003f64:	3718      	adds	r7, #24
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}

08003f6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f6a:	b580      	push	{r7, lr}
 8003f6c:	b082      	sub	sp, #8
 8003f6e:	af00      	add	r7, sp, #0
 8003f70:	4603      	mov	r3, r0
 8003f72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f7ff ff0d 	bl	8003d98 <__NVIC_EnableIRQ>
}
 8003f7e:	bf00      	nop
 8003f80:	3708      	adds	r7, #8
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}

08003f86 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003f86:	b580      	push	{r7, lr}
 8003f88:	b082      	sub	sp, #8
 8003f8a:	af00      	add	r7, sp, #0
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003f90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f94:	4618      	mov	r0, r3
 8003f96:	f7ff ff1d 	bl	8003dd4 <__NVIC_DisableIRQ>
}
 8003f9a:	bf00      	nop
 8003f9c:	3708      	adds	r7, #8
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}

08003fa2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003fa2:	b580      	push	{r7, lr}
 8003fa4:	b082      	sub	sp, #8
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f7ff ff94 	bl	8003ed8 <SysTick_Config>
 8003fb0:	4603      	mov	r3, r0
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	3708      	adds	r7, #8
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}

08003fba <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003fba:	b580      	push	{r7, lr}
 8003fbc:	b082      	sub	sp, #8
 8003fbe:	af00      	add	r7, sp, #0
 8003fc0:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d101      	bne.n	8003fcc <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	e014      	b.n	8003ff6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	791b      	ldrb	r3, [r3, #4]
 8003fd0:	b2db      	uxtb	r3, r3
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d105      	bne.n	8003fe2 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003fdc:	6878      	ldr	r0, [r7, #4]
 8003fde:	f7fc fc51 	bl	8000884 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2202      	movs	r2, #2
 8003fe6:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2200      	movs	r2, #0
 8003fec:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003ff4:	2300      	movs	r3, #0
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	3708      	adds	r7, #8
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}

08003ffe <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8003ffe:	b480      	push	{r7}
 8004000:	b083      	sub	sp, #12
 8004002:	af00      	add	r7, sp, #0
 8004004:	6078      	str	r0, [r7, #4]
 8004006:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d101      	bne.n	8004012 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	e046      	b.n	80040a0 <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	795b      	ldrb	r3, [r3, #5]
 8004016:	2b01      	cmp	r3, #1
 8004018:	d101      	bne.n	800401e <HAL_DAC_Start+0x20>
 800401a:	2302      	movs	r3, #2
 800401c:	e040      	b.n	80040a0 <HAL_DAC_Start+0xa2>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2201      	movs	r2, #1
 8004022:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2202      	movs	r2, #2
 8004028:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	6819      	ldr	r1, [r3, #0]
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	f003 0310 	and.w	r3, r3, #16
 8004036:	2201      	movs	r2, #1
 8004038:	409a      	lsls	r2, r3
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	430a      	orrs	r2, r1
 8004040:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d10f      	bne.n	8004068 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 8004052:	2b3c      	cmp	r3, #60	@ 0x3c
 8004054:	d11d      	bne.n	8004092 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	685a      	ldr	r2, [r3, #4]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f042 0201 	orr.w	r2, r2, #1
 8004064:	605a      	str	r2, [r3, #4]
 8004066:	e014      	b.n	8004092 <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	f003 0310 	and.w	r3, r3, #16
 8004078:	213c      	movs	r1, #60	@ 0x3c
 800407a:	fa01 f303 	lsl.w	r3, r1, r3
 800407e:	429a      	cmp	r2, r3
 8004080:	d107      	bne.n	8004092 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	685a      	ldr	r2, [r3, #4]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f042 0202 	orr.w	r2, r2, #2
 8004090:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2201      	movs	r2, #1
 8004096:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2200      	movs	r2, #0
 800409c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800409e:	2300      	movs	r3, #0
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	370c      	adds	r7, #12
 80040a4:	46bd      	mov	sp, r7
 80040a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040aa:	4770      	bx	lr

080040ac <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b087      	sub	sp, #28
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	60f8      	str	r0, [r7, #12]
 80040b4:	60b9      	str	r1, [r7, #8]
 80040b6:	607a      	str	r2, [r7, #4]
 80040b8:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 80040ba:	2300      	movs	r3, #0
 80040bc:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d101      	bne.n	80040c8 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	e015      	b.n	80040f4 <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d105      	bne.n	80040e0 <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80040d4:	697a      	ldr	r2, [r7, #20]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	4413      	add	r3, r2
 80040da:	3308      	adds	r3, #8
 80040dc:	617b      	str	r3, [r7, #20]
 80040de:	e004      	b.n	80040ea <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80040e0:	697a      	ldr	r2, [r7, #20]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	4413      	add	r3, r2
 80040e6:	3314      	adds	r3, #20
 80040e8:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	461a      	mov	r2, r3
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80040f2:	2300      	movs	r3, #0
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	371c      	adds	r7, #28
 80040f8:	46bd      	mov	sp, r7
 80040fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fe:	4770      	bx	lr

08004100 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004100:	b480      	push	{r7}
 8004102:	b089      	sub	sp, #36	@ 0x24
 8004104:	af00      	add	r7, sp, #0
 8004106:	60f8      	str	r0, [r7, #12]
 8004108:	60b9      	str	r1, [r7, #8]
 800410a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800410c:	2300      	movs	r3, #0
 800410e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d002      	beq.n	800411c <HAL_DAC_ConfigChannel+0x1c>
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d101      	bne.n	8004120 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 800411c:	2301      	movs	r3, #1
 800411e:	e042      	b.n	80041a6 <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	795b      	ldrb	r3, [r3, #5]
 8004124:	2b01      	cmp	r3, #1
 8004126:	d101      	bne.n	800412c <HAL_DAC_ConfigChannel+0x2c>
 8004128:	2302      	movs	r3, #2
 800412a:	e03c      	b.n	80041a6 <HAL_DAC_ConfigChannel+0xa6>
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2201      	movs	r2, #1
 8004130:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2202      	movs	r2, #2
 8004136:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	f003 0310 	and.w	r3, r3, #16
 8004146:	f640 72fe 	movw	r2, #4094	@ 0xffe
 800414a:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 800414e:	43db      	mvns	r3, r3
 8004150:	69ba      	ldr	r2, [r7, #24]
 8004152:	4013      	ands	r3, r2
 8004154:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	681a      	ldr	r2, [r3, #0]
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	4313      	orrs	r3, r2
 8004160:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	f003 0310 	and.w	r3, r3, #16
 8004168:	697a      	ldr	r2, [r7, #20]
 800416a:	fa02 f303 	lsl.w	r3, r2, r3
 800416e:	69ba      	ldr	r2, [r7, #24]
 8004170:	4313      	orrs	r3, r2
 8004172:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	69ba      	ldr	r2, [r7, #24]
 800417a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	6819      	ldr	r1, [r3, #0]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	f003 0310 	and.w	r3, r3, #16
 8004188:	22c0      	movs	r2, #192	@ 0xc0
 800418a:	fa02 f303 	lsl.w	r3, r2, r3
 800418e:	43da      	mvns	r2, r3
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	400a      	ands	r2, r1
 8004196:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2201      	movs	r2, #1
 800419c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	2200      	movs	r2, #0
 80041a2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80041a4:	7ffb      	ldrb	r3, [r7, #31]
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3724      	adds	r7, #36	@ 0x24
 80041aa:	46bd      	mov	sp, r7
 80041ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b0:	4770      	bx	lr
	...

080041b4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b086      	sub	sp, #24
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80041bc:	2300      	movs	r3, #0
 80041be:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80041c0:	f7ff f97e 	bl	80034c0 <HAL_GetTick>
 80041c4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d101      	bne.n	80041d0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	e099      	b.n	8004304 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2202      	movs	r2, #2
 80041d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2200      	movs	r2, #0
 80041dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f022 0201 	bic.w	r2, r2, #1
 80041ee:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80041f0:	e00f      	b.n	8004212 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80041f2:	f7ff f965 	bl	80034c0 <HAL_GetTick>
 80041f6:	4602      	mov	r2, r0
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	1ad3      	subs	r3, r2, r3
 80041fc:	2b05      	cmp	r3, #5
 80041fe:	d908      	bls.n	8004212 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2220      	movs	r2, #32
 8004204:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2203      	movs	r2, #3
 800420a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800420e:	2303      	movs	r3, #3
 8004210:	e078      	b.n	8004304 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f003 0301 	and.w	r3, r3, #1
 800421c:	2b00      	cmp	r3, #0
 800421e:	d1e8      	bne.n	80041f2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004228:	697a      	ldr	r2, [r7, #20]
 800422a:	4b38      	ldr	r3, [pc, #224]	@ (800430c <HAL_DMA_Init+0x158>)
 800422c:	4013      	ands	r3, r2
 800422e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	685a      	ldr	r2, [r3, #4]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800423e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	691b      	ldr	r3, [r3, #16]
 8004244:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800424a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	699b      	ldr	r3, [r3, #24]
 8004250:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004256:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6a1b      	ldr	r3, [r3, #32]
 800425c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800425e:	697a      	ldr	r2, [r7, #20]
 8004260:	4313      	orrs	r3, r2
 8004262:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004268:	2b04      	cmp	r3, #4
 800426a:	d107      	bne.n	800427c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004274:	4313      	orrs	r3, r2
 8004276:	697a      	ldr	r2, [r7, #20]
 8004278:	4313      	orrs	r3, r2
 800427a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	697a      	ldr	r2, [r7, #20]
 8004282:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	695b      	ldr	r3, [r3, #20]
 800428a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	f023 0307 	bic.w	r3, r3, #7
 8004292:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004298:	697a      	ldr	r2, [r7, #20]
 800429a:	4313      	orrs	r3, r2
 800429c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042a2:	2b04      	cmp	r3, #4
 80042a4:	d117      	bne.n	80042d6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042aa:	697a      	ldr	r2, [r7, #20]
 80042ac:	4313      	orrs	r3, r2
 80042ae:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d00e      	beq.n	80042d6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80042b8:	6878      	ldr	r0, [r7, #4]
 80042ba:	f000 fb09 	bl	80048d0 <DMA_CheckFifoParam>
 80042be:	4603      	mov	r3, r0
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d008      	beq.n	80042d6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2240      	movs	r2, #64	@ 0x40
 80042c8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2200      	movs	r2, #0
 80042ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80042d2:	2301      	movs	r3, #1
 80042d4:	e016      	b.n	8004304 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	697a      	ldr	r2, [r7, #20]
 80042dc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	f000 fac0 	bl	8004864 <DMA_CalcBaseAndBitshift>
 80042e4:	4603      	mov	r3, r0
 80042e6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042ec:	223f      	movs	r2, #63	@ 0x3f
 80042ee:	409a      	lsls	r2, r3
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2200      	movs	r2, #0
 80042f8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2201      	movs	r2, #1
 80042fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004302:	2300      	movs	r3, #0
}
 8004304:	4618      	mov	r0, r3
 8004306:	3718      	adds	r7, #24
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}
 800430c:	e010803f 	.word	0xe010803f

08004310 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b086      	sub	sp, #24
 8004314:	af00      	add	r7, sp, #0
 8004316:	60f8      	str	r0, [r7, #12]
 8004318:	60b9      	str	r1, [r7, #8]
 800431a:	607a      	str	r2, [r7, #4]
 800431c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800431e:	2300      	movs	r3, #0
 8004320:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004326:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800432e:	2b01      	cmp	r3, #1
 8004330:	d101      	bne.n	8004336 <HAL_DMA_Start_IT+0x26>
 8004332:	2302      	movs	r3, #2
 8004334:	e048      	b.n	80043c8 <HAL_DMA_Start_IT+0xb8>
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2201      	movs	r2, #1
 800433a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004344:	b2db      	uxtb	r3, r3
 8004346:	2b01      	cmp	r3, #1
 8004348:	d137      	bne.n	80043ba <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2202      	movs	r2, #2
 800434e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2200      	movs	r2, #0
 8004356:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	687a      	ldr	r2, [r7, #4]
 800435c:	68b9      	ldr	r1, [r7, #8]
 800435e:	68f8      	ldr	r0, [r7, #12]
 8004360:	f000 fa52 	bl	8004808 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004368:	223f      	movs	r2, #63	@ 0x3f
 800436a:	409a      	lsls	r2, r3
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	681a      	ldr	r2, [r3, #0]
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f042 0216 	orr.w	r2, r2, #22
 800437e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	695a      	ldr	r2, [r3, #20]
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800438e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004394:	2b00      	cmp	r3, #0
 8004396:	d007      	beq.n	80043a8 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	681a      	ldr	r2, [r3, #0]
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f042 0208 	orr.w	r2, r2, #8
 80043a6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	681a      	ldr	r2, [r3, #0]
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f042 0201 	orr.w	r2, r2, #1
 80043b6:	601a      	str	r2, [r3, #0]
 80043b8:	e005      	b.n	80043c6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	2200      	movs	r2, #0
 80043be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80043c2:	2302      	movs	r3, #2
 80043c4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80043c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	3718      	adds	r7, #24
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd80      	pop	{r7, pc}

080043d0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b084      	sub	sp, #16
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043dc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80043de:	f7ff f86f 	bl	80034c0 <HAL_GetTick>
 80043e2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80043ea:	b2db      	uxtb	r3, r3
 80043ec:	2b02      	cmp	r3, #2
 80043ee:	d008      	beq.n	8004402 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2280      	movs	r2, #128	@ 0x80
 80043f4:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2200      	movs	r2, #0
 80043fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80043fe:	2301      	movs	r3, #1
 8004400:	e052      	b.n	80044a8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	681a      	ldr	r2, [r3, #0]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f022 0216 	bic.w	r2, r2, #22
 8004410:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	695a      	ldr	r2, [r3, #20]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004420:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004426:	2b00      	cmp	r3, #0
 8004428:	d103      	bne.n	8004432 <HAL_DMA_Abort+0x62>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800442e:	2b00      	cmp	r3, #0
 8004430:	d007      	beq.n	8004442 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	681a      	ldr	r2, [r3, #0]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f022 0208 	bic.w	r2, r2, #8
 8004440:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	681a      	ldr	r2, [r3, #0]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f022 0201 	bic.w	r2, r2, #1
 8004450:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004452:	e013      	b.n	800447c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004454:	f7ff f834 	bl	80034c0 <HAL_GetTick>
 8004458:	4602      	mov	r2, r0
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	1ad3      	subs	r3, r2, r3
 800445e:	2b05      	cmp	r3, #5
 8004460:	d90c      	bls.n	800447c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2220      	movs	r2, #32
 8004466:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2203      	movs	r2, #3
 800446c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2200      	movs	r2, #0
 8004474:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8004478:	2303      	movs	r3, #3
 800447a:	e015      	b.n	80044a8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 0301 	and.w	r3, r3, #1
 8004486:	2b00      	cmp	r3, #0
 8004488:	d1e4      	bne.n	8004454 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800448e:	223f      	movs	r2, #63	@ 0x3f
 8004490:	409a      	lsls	r2, r3
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2201      	movs	r2, #1
 800449a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2200      	movs	r2, #0
 80044a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 80044a6:	2300      	movs	r3, #0
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	3710      	adds	r7, #16
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd80      	pop	{r7, pc}

080044b0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b083      	sub	sp, #12
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80044be:	b2db      	uxtb	r3, r3
 80044c0:	2b02      	cmp	r3, #2
 80044c2:	d004      	beq.n	80044ce <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2280      	movs	r2, #128	@ 0x80
 80044c8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	e00c      	b.n	80044e8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2205      	movs	r2, #5
 80044d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f022 0201 	bic.w	r2, r2, #1
 80044e4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80044e6:	2300      	movs	r3, #0
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	370c      	adds	r7, #12
 80044ec:	46bd      	mov	sp, r7
 80044ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f2:	4770      	bx	lr

080044f4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b086      	sub	sp, #24
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80044fc:	2300      	movs	r3, #0
 80044fe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8004500:	4b8e      	ldr	r3, [pc, #568]	@ (800473c <HAL_DMA_IRQHandler+0x248>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a8e      	ldr	r2, [pc, #568]	@ (8004740 <HAL_DMA_IRQHandler+0x24c>)
 8004506:	fba2 2303 	umull	r2, r3, r2, r3
 800450a:	0a9b      	lsrs	r3, r3, #10
 800450c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004512:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800451e:	2208      	movs	r2, #8
 8004520:	409a      	lsls	r2, r3
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	4013      	ands	r3, r2
 8004526:	2b00      	cmp	r3, #0
 8004528:	d01a      	beq.n	8004560 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f003 0304 	and.w	r3, r3, #4
 8004534:	2b00      	cmp	r3, #0
 8004536:	d013      	beq.n	8004560 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	681a      	ldr	r2, [r3, #0]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f022 0204 	bic.w	r2, r2, #4
 8004546:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800454c:	2208      	movs	r2, #8
 800454e:	409a      	lsls	r2, r3
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004558:	f043 0201 	orr.w	r2, r3, #1
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004564:	2201      	movs	r2, #1
 8004566:	409a      	lsls	r2, r3
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	4013      	ands	r3, r2
 800456c:	2b00      	cmp	r3, #0
 800456e:	d012      	beq.n	8004596 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	695b      	ldr	r3, [r3, #20]
 8004576:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800457a:	2b00      	cmp	r3, #0
 800457c:	d00b      	beq.n	8004596 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004582:	2201      	movs	r2, #1
 8004584:	409a      	lsls	r2, r3
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800458e:	f043 0202 	orr.w	r2, r3, #2
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800459a:	2204      	movs	r2, #4
 800459c:	409a      	lsls	r2, r3
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	4013      	ands	r3, r2
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d012      	beq.n	80045cc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f003 0302 	and.w	r3, r3, #2
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d00b      	beq.n	80045cc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045b8:	2204      	movs	r2, #4
 80045ba:	409a      	lsls	r2, r3
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045c4:	f043 0204 	orr.w	r2, r3, #4
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045d0:	2210      	movs	r2, #16
 80045d2:	409a      	lsls	r2, r3
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	4013      	ands	r3, r2
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d043      	beq.n	8004664 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f003 0308 	and.w	r3, r3, #8
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d03c      	beq.n	8004664 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045ee:	2210      	movs	r2, #16
 80045f0:	409a      	lsls	r2, r3
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004600:	2b00      	cmp	r3, #0
 8004602:	d018      	beq.n	8004636 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800460e:	2b00      	cmp	r3, #0
 8004610:	d108      	bne.n	8004624 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004616:	2b00      	cmp	r3, #0
 8004618:	d024      	beq.n	8004664 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	4798      	blx	r3
 8004622:	e01f      	b.n	8004664 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004628:	2b00      	cmp	r3, #0
 800462a:	d01b      	beq.n	8004664 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004630:	6878      	ldr	r0, [r7, #4]
 8004632:	4798      	blx	r3
 8004634:	e016      	b.n	8004664 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004640:	2b00      	cmp	r3, #0
 8004642:	d107      	bne.n	8004654 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	681a      	ldr	r2, [r3, #0]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f022 0208 	bic.w	r2, r2, #8
 8004652:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004658:	2b00      	cmp	r3, #0
 800465a:	d003      	beq.n	8004664 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004660:	6878      	ldr	r0, [r7, #4]
 8004662:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004668:	2220      	movs	r2, #32
 800466a:	409a      	lsls	r2, r3
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	4013      	ands	r3, r2
 8004670:	2b00      	cmp	r3, #0
 8004672:	f000 808f 	beq.w	8004794 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f003 0310 	and.w	r3, r3, #16
 8004680:	2b00      	cmp	r3, #0
 8004682:	f000 8087 	beq.w	8004794 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800468a:	2220      	movs	r2, #32
 800468c:	409a      	lsls	r2, r3
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004698:	b2db      	uxtb	r3, r3
 800469a:	2b05      	cmp	r3, #5
 800469c:	d136      	bne.n	800470c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	681a      	ldr	r2, [r3, #0]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f022 0216 	bic.w	r2, r2, #22
 80046ac:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	695a      	ldr	r2, [r3, #20]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80046bc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d103      	bne.n	80046ce <HAL_DMA_IRQHandler+0x1da>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d007      	beq.n	80046de <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	681a      	ldr	r2, [r3, #0]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f022 0208 	bic.w	r2, r2, #8
 80046dc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046e2:	223f      	movs	r2, #63	@ 0x3f
 80046e4:	409a      	lsls	r2, r3
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2201      	movs	r2, #1
 80046ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2200      	movs	r2, #0
 80046f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d07e      	beq.n	8004800 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	4798      	blx	r3
        }
        return;
 800470a:	e079      	b.n	8004800 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004716:	2b00      	cmp	r3, #0
 8004718:	d01d      	beq.n	8004756 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004724:	2b00      	cmp	r3, #0
 8004726:	d10d      	bne.n	8004744 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800472c:	2b00      	cmp	r3, #0
 800472e:	d031      	beq.n	8004794 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004734:	6878      	ldr	r0, [r7, #4]
 8004736:	4798      	blx	r3
 8004738:	e02c      	b.n	8004794 <HAL_DMA_IRQHandler+0x2a0>
 800473a:	bf00      	nop
 800473c:	2000004c 	.word	0x2000004c
 8004740:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004748:	2b00      	cmp	r3, #0
 800474a:	d023      	beq.n	8004794 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004750:	6878      	ldr	r0, [r7, #4]
 8004752:	4798      	blx	r3
 8004754:	e01e      	b.n	8004794 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004760:	2b00      	cmp	r3, #0
 8004762:	d10f      	bne.n	8004784 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	681a      	ldr	r2, [r3, #0]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f022 0210 	bic.w	r2, r2, #16
 8004772:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2201      	movs	r2, #1
 8004778:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2200      	movs	r2, #0
 8004780:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004788:	2b00      	cmp	r3, #0
 800478a:	d003      	beq.n	8004794 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004790:	6878      	ldr	r0, [r7, #4]
 8004792:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004798:	2b00      	cmp	r3, #0
 800479a:	d032      	beq.n	8004802 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047a0:	f003 0301 	and.w	r3, r3, #1
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d022      	beq.n	80047ee <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2205      	movs	r2, #5
 80047ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	681a      	ldr	r2, [r3, #0]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f022 0201 	bic.w	r2, r2, #1
 80047be:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	3301      	adds	r3, #1
 80047c4:	60bb      	str	r3, [r7, #8]
 80047c6:	697a      	ldr	r2, [r7, #20]
 80047c8:	429a      	cmp	r2, r3
 80047ca:	d307      	bcc.n	80047dc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f003 0301 	and.w	r3, r3, #1
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d1f2      	bne.n	80047c0 <HAL_DMA_IRQHandler+0x2cc>
 80047da:	e000      	b.n	80047de <HAL_DMA_IRQHandler+0x2ea>
          break;
 80047dc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2201      	movs	r2, #1
 80047e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2200      	movs	r2, #0
 80047ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d005      	beq.n	8004802 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	4798      	blx	r3
 80047fe:	e000      	b.n	8004802 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004800:	bf00      	nop
    }
  }
}
 8004802:	3718      	adds	r7, #24
 8004804:	46bd      	mov	sp, r7
 8004806:	bd80      	pop	{r7, pc}

08004808 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004808:	b480      	push	{r7}
 800480a:	b085      	sub	sp, #20
 800480c:	af00      	add	r7, sp, #0
 800480e:	60f8      	str	r0, [r7, #12]
 8004810:	60b9      	str	r1, [r7, #8]
 8004812:	607a      	str	r2, [r7, #4]
 8004814:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	681a      	ldr	r2, [r3, #0]
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004824:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	683a      	ldr	r2, [r7, #0]
 800482c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	2b40      	cmp	r3, #64	@ 0x40
 8004834:	d108      	bne.n	8004848 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	687a      	ldr	r2, [r7, #4]
 800483c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	68ba      	ldr	r2, [r7, #8]
 8004844:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004846:	e007      	b.n	8004858 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	68ba      	ldr	r2, [r7, #8]
 800484e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	687a      	ldr	r2, [r7, #4]
 8004856:	60da      	str	r2, [r3, #12]
}
 8004858:	bf00      	nop
 800485a:	3714      	adds	r7, #20
 800485c:	46bd      	mov	sp, r7
 800485e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004862:	4770      	bx	lr

08004864 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004864:	b480      	push	{r7}
 8004866:	b085      	sub	sp, #20
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	b2db      	uxtb	r3, r3
 8004872:	3b10      	subs	r3, #16
 8004874:	4a13      	ldr	r2, [pc, #76]	@ (80048c4 <DMA_CalcBaseAndBitshift+0x60>)
 8004876:	fba2 2303 	umull	r2, r3, r2, r3
 800487a:	091b      	lsrs	r3, r3, #4
 800487c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800487e:	4a12      	ldr	r2, [pc, #72]	@ (80048c8 <DMA_CalcBaseAndBitshift+0x64>)
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	4413      	add	r3, r2
 8004884:	781b      	ldrb	r3, [r3, #0]
 8004886:	461a      	mov	r2, r3
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	2b03      	cmp	r3, #3
 8004890:	d908      	bls.n	80048a4 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	461a      	mov	r2, r3
 8004898:	4b0c      	ldr	r3, [pc, #48]	@ (80048cc <DMA_CalcBaseAndBitshift+0x68>)
 800489a:	4013      	ands	r3, r2
 800489c:	1d1a      	adds	r2, r3, #4
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	659a      	str	r2, [r3, #88]	@ 0x58
 80048a2:	e006      	b.n	80048b2 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	461a      	mov	r2, r3
 80048aa:	4b08      	ldr	r3, [pc, #32]	@ (80048cc <DMA_CalcBaseAndBitshift+0x68>)
 80048ac:	4013      	ands	r3, r2
 80048ae:	687a      	ldr	r2, [r7, #4]
 80048b0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	3714      	adds	r7, #20
 80048ba:	46bd      	mov	sp, r7
 80048bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c0:	4770      	bx	lr
 80048c2:	bf00      	nop
 80048c4:	aaaaaaab 	.word	0xaaaaaaab
 80048c8:	08008a64 	.word	0x08008a64
 80048cc:	fffffc00 	.word	0xfffffc00

080048d0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80048d0:	b480      	push	{r7}
 80048d2:	b085      	sub	sp, #20
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80048d8:	2300      	movs	r3, #0
 80048da:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048e0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	699b      	ldr	r3, [r3, #24]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d11f      	bne.n	800492a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	2b03      	cmp	r3, #3
 80048ee:	d856      	bhi.n	800499e <DMA_CheckFifoParam+0xce>
 80048f0:	a201      	add	r2, pc, #4	@ (adr r2, 80048f8 <DMA_CheckFifoParam+0x28>)
 80048f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048f6:	bf00      	nop
 80048f8:	08004909 	.word	0x08004909
 80048fc:	0800491b 	.word	0x0800491b
 8004900:	08004909 	.word	0x08004909
 8004904:	0800499f 	.word	0x0800499f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800490c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004910:	2b00      	cmp	r3, #0
 8004912:	d046      	beq.n	80049a2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004914:	2301      	movs	r3, #1
 8004916:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004918:	e043      	b.n	80049a2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800491e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004922:	d140      	bne.n	80049a6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004924:	2301      	movs	r3, #1
 8004926:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004928:	e03d      	b.n	80049a6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	699b      	ldr	r3, [r3, #24]
 800492e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004932:	d121      	bne.n	8004978 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	2b03      	cmp	r3, #3
 8004938:	d837      	bhi.n	80049aa <DMA_CheckFifoParam+0xda>
 800493a:	a201      	add	r2, pc, #4	@ (adr r2, 8004940 <DMA_CheckFifoParam+0x70>)
 800493c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004940:	08004951 	.word	0x08004951
 8004944:	08004957 	.word	0x08004957
 8004948:	08004951 	.word	0x08004951
 800494c:	08004969 	.word	0x08004969
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004950:	2301      	movs	r3, #1
 8004952:	73fb      	strb	r3, [r7, #15]
      break;
 8004954:	e030      	b.n	80049b8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800495a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800495e:	2b00      	cmp	r3, #0
 8004960:	d025      	beq.n	80049ae <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004962:	2301      	movs	r3, #1
 8004964:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004966:	e022      	b.n	80049ae <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800496c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004970:	d11f      	bne.n	80049b2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004976:	e01c      	b.n	80049b2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	2b02      	cmp	r3, #2
 800497c:	d903      	bls.n	8004986 <DMA_CheckFifoParam+0xb6>
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	2b03      	cmp	r3, #3
 8004982:	d003      	beq.n	800498c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004984:	e018      	b.n	80049b8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	73fb      	strb	r3, [r7, #15]
      break;
 800498a:	e015      	b.n	80049b8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004990:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004994:	2b00      	cmp	r3, #0
 8004996:	d00e      	beq.n	80049b6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004998:	2301      	movs	r3, #1
 800499a:	73fb      	strb	r3, [r7, #15]
      break;
 800499c:	e00b      	b.n	80049b6 <DMA_CheckFifoParam+0xe6>
      break;
 800499e:	bf00      	nop
 80049a0:	e00a      	b.n	80049b8 <DMA_CheckFifoParam+0xe8>
      break;
 80049a2:	bf00      	nop
 80049a4:	e008      	b.n	80049b8 <DMA_CheckFifoParam+0xe8>
      break;
 80049a6:	bf00      	nop
 80049a8:	e006      	b.n	80049b8 <DMA_CheckFifoParam+0xe8>
      break;
 80049aa:	bf00      	nop
 80049ac:	e004      	b.n	80049b8 <DMA_CheckFifoParam+0xe8>
      break;
 80049ae:	bf00      	nop
 80049b0:	e002      	b.n	80049b8 <DMA_CheckFifoParam+0xe8>
      break;   
 80049b2:	bf00      	nop
 80049b4:	e000      	b.n	80049b8 <DMA_CheckFifoParam+0xe8>
      break;
 80049b6:	bf00      	nop
    }
  } 
  
  return status; 
 80049b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	3714      	adds	r7, #20
 80049be:	46bd      	mov	sp, r7
 80049c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c4:	4770      	bx	lr
 80049c6:	bf00      	nop

080049c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b089      	sub	sp, #36	@ 0x24
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
 80049d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80049d2:	2300      	movs	r3, #0
 80049d4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80049d6:	2300      	movs	r3, #0
 80049d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80049da:	2300      	movs	r3, #0
 80049dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80049de:	2300      	movs	r3, #0
 80049e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80049e2:	2300      	movs	r3, #0
 80049e4:	61fb      	str	r3, [r7, #28]
 80049e6:	e175      	b.n	8004cd4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80049e8:	2201      	movs	r2, #1
 80049ea:	69fb      	ldr	r3, [r7, #28]
 80049ec:	fa02 f303 	lsl.w	r3, r2, r3
 80049f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	697a      	ldr	r2, [r7, #20]
 80049f8:	4013      	ands	r3, r2
 80049fa:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80049fc:	693a      	ldr	r2, [r7, #16]
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	429a      	cmp	r2, r3
 8004a02:	f040 8164 	bne.w	8004cce <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	f003 0303 	and.w	r3, r3, #3
 8004a0e:	2b01      	cmp	r3, #1
 8004a10:	d005      	beq.n	8004a1e <HAL_GPIO_Init+0x56>
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	f003 0303 	and.w	r3, r3, #3
 8004a1a:	2b02      	cmp	r3, #2
 8004a1c:	d130      	bne.n	8004a80 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	689b      	ldr	r3, [r3, #8]
 8004a22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004a24:	69fb      	ldr	r3, [r7, #28]
 8004a26:	005b      	lsls	r3, r3, #1
 8004a28:	2203      	movs	r2, #3
 8004a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a2e:	43db      	mvns	r3, r3
 8004a30:	69ba      	ldr	r2, [r7, #24]
 8004a32:	4013      	ands	r3, r2
 8004a34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	68da      	ldr	r2, [r3, #12]
 8004a3a:	69fb      	ldr	r3, [r7, #28]
 8004a3c:	005b      	lsls	r3, r3, #1
 8004a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a42:	69ba      	ldr	r2, [r7, #24]
 8004a44:	4313      	orrs	r3, r2
 8004a46:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	69ba      	ldr	r2, [r7, #24]
 8004a4c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004a54:	2201      	movs	r2, #1
 8004a56:	69fb      	ldr	r3, [r7, #28]
 8004a58:	fa02 f303 	lsl.w	r3, r2, r3
 8004a5c:	43db      	mvns	r3, r3
 8004a5e:	69ba      	ldr	r2, [r7, #24]
 8004a60:	4013      	ands	r3, r2
 8004a62:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	091b      	lsrs	r3, r3, #4
 8004a6a:	f003 0201 	and.w	r2, r3, #1
 8004a6e:	69fb      	ldr	r3, [r7, #28]
 8004a70:	fa02 f303 	lsl.w	r3, r2, r3
 8004a74:	69ba      	ldr	r2, [r7, #24]
 8004a76:	4313      	orrs	r3, r2
 8004a78:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	69ba      	ldr	r2, [r7, #24]
 8004a7e:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	f003 0303 	and.w	r3, r3, #3
 8004a88:	2b03      	cmp	r3, #3
 8004a8a:	d017      	beq.n	8004abc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	68db      	ldr	r3, [r3, #12]
 8004a90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004a92:	69fb      	ldr	r3, [r7, #28]
 8004a94:	005b      	lsls	r3, r3, #1
 8004a96:	2203      	movs	r2, #3
 8004a98:	fa02 f303 	lsl.w	r3, r2, r3
 8004a9c:	43db      	mvns	r3, r3
 8004a9e:	69ba      	ldr	r2, [r7, #24]
 8004aa0:	4013      	ands	r3, r2
 8004aa2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	689a      	ldr	r2, [r3, #8]
 8004aa8:	69fb      	ldr	r3, [r7, #28]
 8004aaa:	005b      	lsls	r3, r3, #1
 8004aac:	fa02 f303 	lsl.w	r3, r2, r3
 8004ab0:	69ba      	ldr	r2, [r7, #24]
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	69ba      	ldr	r2, [r7, #24]
 8004aba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	f003 0303 	and.w	r3, r3, #3
 8004ac4:	2b02      	cmp	r3, #2
 8004ac6:	d123      	bne.n	8004b10 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004ac8:	69fb      	ldr	r3, [r7, #28]
 8004aca:	08da      	lsrs	r2, r3, #3
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	3208      	adds	r2, #8
 8004ad0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ad4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004ad6:	69fb      	ldr	r3, [r7, #28]
 8004ad8:	f003 0307 	and.w	r3, r3, #7
 8004adc:	009b      	lsls	r3, r3, #2
 8004ade:	220f      	movs	r2, #15
 8004ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ae4:	43db      	mvns	r3, r3
 8004ae6:	69ba      	ldr	r2, [r7, #24]
 8004ae8:	4013      	ands	r3, r2
 8004aea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	691a      	ldr	r2, [r3, #16]
 8004af0:	69fb      	ldr	r3, [r7, #28]
 8004af2:	f003 0307 	and.w	r3, r3, #7
 8004af6:	009b      	lsls	r3, r3, #2
 8004af8:	fa02 f303 	lsl.w	r3, r2, r3
 8004afc:	69ba      	ldr	r2, [r7, #24]
 8004afe:	4313      	orrs	r3, r2
 8004b00:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004b02:	69fb      	ldr	r3, [r7, #28]
 8004b04:	08da      	lsrs	r2, r3, #3
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	3208      	adds	r2, #8
 8004b0a:	69b9      	ldr	r1, [r7, #24]
 8004b0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004b16:	69fb      	ldr	r3, [r7, #28]
 8004b18:	005b      	lsls	r3, r3, #1
 8004b1a:	2203      	movs	r2, #3
 8004b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b20:	43db      	mvns	r3, r3
 8004b22:	69ba      	ldr	r2, [r7, #24]
 8004b24:	4013      	ands	r3, r2
 8004b26:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	f003 0203 	and.w	r2, r3, #3
 8004b30:	69fb      	ldr	r3, [r7, #28]
 8004b32:	005b      	lsls	r3, r3, #1
 8004b34:	fa02 f303 	lsl.w	r3, r2, r3
 8004b38:	69ba      	ldr	r2, [r7, #24]
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	69ba      	ldr	r2, [r7, #24]
 8004b42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	f000 80be 	beq.w	8004cce <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b52:	4b66      	ldr	r3, [pc, #408]	@ (8004cec <HAL_GPIO_Init+0x324>)
 8004b54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b56:	4a65      	ldr	r2, [pc, #404]	@ (8004cec <HAL_GPIO_Init+0x324>)
 8004b58:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004b5c:	6453      	str	r3, [r2, #68]	@ 0x44
 8004b5e:	4b63      	ldr	r3, [pc, #396]	@ (8004cec <HAL_GPIO_Init+0x324>)
 8004b60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b62:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004b66:	60fb      	str	r3, [r7, #12]
 8004b68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004b6a:	4a61      	ldr	r2, [pc, #388]	@ (8004cf0 <HAL_GPIO_Init+0x328>)
 8004b6c:	69fb      	ldr	r3, [r7, #28]
 8004b6e:	089b      	lsrs	r3, r3, #2
 8004b70:	3302      	adds	r3, #2
 8004b72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b76:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004b78:	69fb      	ldr	r3, [r7, #28]
 8004b7a:	f003 0303 	and.w	r3, r3, #3
 8004b7e:	009b      	lsls	r3, r3, #2
 8004b80:	220f      	movs	r2, #15
 8004b82:	fa02 f303 	lsl.w	r3, r2, r3
 8004b86:	43db      	mvns	r3, r3
 8004b88:	69ba      	ldr	r2, [r7, #24]
 8004b8a:	4013      	ands	r3, r2
 8004b8c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	4a58      	ldr	r2, [pc, #352]	@ (8004cf4 <HAL_GPIO_Init+0x32c>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d037      	beq.n	8004c06 <HAL_GPIO_Init+0x23e>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	4a57      	ldr	r2, [pc, #348]	@ (8004cf8 <HAL_GPIO_Init+0x330>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d031      	beq.n	8004c02 <HAL_GPIO_Init+0x23a>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	4a56      	ldr	r2, [pc, #344]	@ (8004cfc <HAL_GPIO_Init+0x334>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d02b      	beq.n	8004bfe <HAL_GPIO_Init+0x236>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	4a55      	ldr	r2, [pc, #340]	@ (8004d00 <HAL_GPIO_Init+0x338>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d025      	beq.n	8004bfa <HAL_GPIO_Init+0x232>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	4a54      	ldr	r2, [pc, #336]	@ (8004d04 <HAL_GPIO_Init+0x33c>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d01f      	beq.n	8004bf6 <HAL_GPIO_Init+0x22e>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	4a53      	ldr	r2, [pc, #332]	@ (8004d08 <HAL_GPIO_Init+0x340>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d019      	beq.n	8004bf2 <HAL_GPIO_Init+0x22a>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	4a52      	ldr	r2, [pc, #328]	@ (8004d0c <HAL_GPIO_Init+0x344>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d013      	beq.n	8004bee <HAL_GPIO_Init+0x226>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	4a51      	ldr	r2, [pc, #324]	@ (8004d10 <HAL_GPIO_Init+0x348>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d00d      	beq.n	8004bea <HAL_GPIO_Init+0x222>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	4a50      	ldr	r2, [pc, #320]	@ (8004d14 <HAL_GPIO_Init+0x34c>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d007      	beq.n	8004be6 <HAL_GPIO_Init+0x21e>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	4a4f      	ldr	r2, [pc, #316]	@ (8004d18 <HAL_GPIO_Init+0x350>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d101      	bne.n	8004be2 <HAL_GPIO_Init+0x21a>
 8004bde:	2309      	movs	r3, #9
 8004be0:	e012      	b.n	8004c08 <HAL_GPIO_Init+0x240>
 8004be2:	230a      	movs	r3, #10
 8004be4:	e010      	b.n	8004c08 <HAL_GPIO_Init+0x240>
 8004be6:	2308      	movs	r3, #8
 8004be8:	e00e      	b.n	8004c08 <HAL_GPIO_Init+0x240>
 8004bea:	2307      	movs	r3, #7
 8004bec:	e00c      	b.n	8004c08 <HAL_GPIO_Init+0x240>
 8004bee:	2306      	movs	r3, #6
 8004bf0:	e00a      	b.n	8004c08 <HAL_GPIO_Init+0x240>
 8004bf2:	2305      	movs	r3, #5
 8004bf4:	e008      	b.n	8004c08 <HAL_GPIO_Init+0x240>
 8004bf6:	2304      	movs	r3, #4
 8004bf8:	e006      	b.n	8004c08 <HAL_GPIO_Init+0x240>
 8004bfa:	2303      	movs	r3, #3
 8004bfc:	e004      	b.n	8004c08 <HAL_GPIO_Init+0x240>
 8004bfe:	2302      	movs	r3, #2
 8004c00:	e002      	b.n	8004c08 <HAL_GPIO_Init+0x240>
 8004c02:	2301      	movs	r3, #1
 8004c04:	e000      	b.n	8004c08 <HAL_GPIO_Init+0x240>
 8004c06:	2300      	movs	r3, #0
 8004c08:	69fa      	ldr	r2, [r7, #28]
 8004c0a:	f002 0203 	and.w	r2, r2, #3
 8004c0e:	0092      	lsls	r2, r2, #2
 8004c10:	4093      	lsls	r3, r2
 8004c12:	69ba      	ldr	r2, [r7, #24]
 8004c14:	4313      	orrs	r3, r2
 8004c16:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004c18:	4935      	ldr	r1, [pc, #212]	@ (8004cf0 <HAL_GPIO_Init+0x328>)
 8004c1a:	69fb      	ldr	r3, [r7, #28]
 8004c1c:	089b      	lsrs	r3, r3, #2
 8004c1e:	3302      	adds	r3, #2
 8004c20:	69ba      	ldr	r2, [r7, #24]
 8004c22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004c26:	4b3d      	ldr	r3, [pc, #244]	@ (8004d1c <HAL_GPIO_Init+0x354>)
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	43db      	mvns	r3, r3
 8004c30:	69ba      	ldr	r2, [r7, #24]
 8004c32:	4013      	ands	r3, r2
 8004c34:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d003      	beq.n	8004c4a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004c42:	69ba      	ldr	r2, [r7, #24]
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	4313      	orrs	r3, r2
 8004c48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004c4a:	4a34      	ldr	r2, [pc, #208]	@ (8004d1c <HAL_GPIO_Init+0x354>)
 8004c4c:	69bb      	ldr	r3, [r7, #24]
 8004c4e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004c50:	4b32      	ldr	r3, [pc, #200]	@ (8004d1c <HAL_GPIO_Init+0x354>)
 8004c52:	68db      	ldr	r3, [r3, #12]
 8004c54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	43db      	mvns	r3, r3
 8004c5a:	69ba      	ldr	r2, [r7, #24]
 8004c5c:	4013      	ands	r3, r2
 8004c5e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d003      	beq.n	8004c74 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004c6c:	69ba      	ldr	r2, [r7, #24]
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	4313      	orrs	r3, r2
 8004c72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004c74:	4a29      	ldr	r2, [pc, #164]	@ (8004d1c <HAL_GPIO_Init+0x354>)
 8004c76:	69bb      	ldr	r3, [r7, #24]
 8004c78:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004c7a:	4b28      	ldr	r3, [pc, #160]	@ (8004d1c <HAL_GPIO_Init+0x354>)
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	43db      	mvns	r3, r3
 8004c84:	69ba      	ldr	r2, [r7, #24]
 8004c86:	4013      	ands	r3, r2
 8004c88:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d003      	beq.n	8004c9e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004c96:	69ba      	ldr	r2, [r7, #24]
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004c9e:	4a1f      	ldr	r2, [pc, #124]	@ (8004d1c <HAL_GPIO_Init+0x354>)
 8004ca0:	69bb      	ldr	r3, [r7, #24]
 8004ca2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004ca4:	4b1d      	ldr	r3, [pc, #116]	@ (8004d1c <HAL_GPIO_Init+0x354>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	43db      	mvns	r3, r3
 8004cae:	69ba      	ldr	r2, [r7, #24]
 8004cb0:	4013      	ands	r3, r2
 8004cb2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d003      	beq.n	8004cc8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004cc0:	69ba      	ldr	r2, [r7, #24]
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004cc8:	4a14      	ldr	r2, [pc, #80]	@ (8004d1c <HAL_GPIO_Init+0x354>)
 8004cca:	69bb      	ldr	r3, [r7, #24]
 8004ccc:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8004cce:	69fb      	ldr	r3, [r7, #28]
 8004cd0:	3301      	adds	r3, #1
 8004cd2:	61fb      	str	r3, [r7, #28]
 8004cd4:	69fb      	ldr	r3, [r7, #28]
 8004cd6:	2b0f      	cmp	r3, #15
 8004cd8:	f67f ae86 	bls.w	80049e8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004cdc:	bf00      	nop
 8004cde:	bf00      	nop
 8004ce0:	3724      	adds	r7, #36	@ 0x24
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce8:	4770      	bx	lr
 8004cea:	bf00      	nop
 8004cec:	40023800 	.word	0x40023800
 8004cf0:	40013800 	.word	0x40013800
 8004cf4:	40020000 	.word	0x40020000
 8004cf8:	40020400 	.word	0x40020400
 8004cfc:	40020800 	.word	0x40020800
 8004d00:	40020c00 	.word	0x40020c00
 8004d04:	40021000 	.word	0x40021000
 8004d08:	40021400 	.word	0x40021400
 8004d0c:	40021800 	.word	0x40021800
 8004d10:	40021c00 	.word	0x40021c00
 8004d14:	40022000 	.word	0x40022000
 8004d18:	40022400 	.word	0x40022400
 8004d1c:	40013c00 	.word	0x40013c00

08004d20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b083      	sub	sp, #12
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
 8004d28:	460b      	mov	r3, r1
 8004d2a:	807b      	strh	r3, [r7, #2]
 8004d2c:	4613      	mov	r3, r2
 8004d2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004d30:	787b      	ldrb	r3, [r7, #1]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d003      	beq.n	8004d3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004d36:	887a      	ldrh	r2, [r7, #2]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004d3c:	e003      	b.n	8004d46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004d3e:	887b      	ldrh	r3, [r7, #2]
 8004d40:	041a      	lsls	r2, r3, #16
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	619a      	str	r2, [r3, #24]
}
 8004d46:	bf00      	nop
 8004d48:	370c      	adds	r7, #12
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d50:	4770      	bx	lr
	...

08004d54 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C4 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C4 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8004d54:	b480      	push	{r7}
 8004d56:	b085      	sub	sp, #20
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d5c:	4b0b      	ldr	r3, [pc, #44]	@ (8004d8c <HAL_I2CEx_EnableFastModePlus+0x38>)
 8004d5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d60:	4a0a      	ldr	r2, [pc, #40]	@ (8004d8c <HAL_I2CEx_EnableFastModePlus+0x38>)
 8004d62:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004d66:	6453      	str	r3, [r2, #68]	@ 0x44
 8004d68:	4b08      	ldr	r3, [pc, #32]	@ (8004d8c <HAL_I2CEx_EnableFastModePlus+0x38>)
 8004d6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d6c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004d70:	60fb      	str	r3, [r7, #12]
 8004d72:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMC, (uint32_t)ConfigFastModePlus);
 8004d74:	4b06      	ldr	r3, [pc, #24]	@ (8004d90 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8004d76:	685a      	ldr	r2, [r3, #4]
 8004d78:	4905      	ldr	r1, [pc, #20]	@ (8004d90 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	604b      	str	r3, [r1, #4]
}
 8004d80:	bf00      	nop
 8004d82:	3714      	adds	r7, #20
 8004d84:	46bd      	mov	sp, r7
 8004d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8a:	4770      	bx	lr
 8004d8c:	40023800 	.word	0x40023800
 8004d90:	40013800 	.word	0x40013800

08004d94 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004d94:	b480      	push	{r7}
 8004d96:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004d98:	4b05      	ldr	r3, [pc, #20]	@ (8004db0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a04      	ldr	r2, [pc, #16]	@ (8004db0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004d9e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004da2:	6013      	str	r3, [r2, #0]
}
 8004da4:	bf00      	nop
 8004da6:	46bd      	mov	sp, r7
 8004da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dac:	4770      	bx	lr
 8004dae:	bf00      	nop
 8004db0:	40007000 	.word	0x40007000

08004db4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b082      	sub	sp, #8
 8004db8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004dba:	2300      	movs	r3, #0
 8004dbc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004dbe:	4b23      	ldr	r3, [pc, #140]	@ (8004e4c <HAL_PWREx_EnableOverDrive+0x98>)
 8004dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dc2:	4a22      	ldr	r2, [pc, #136]	@ (8004e4c <HAL_PWREx_EnableOverDrive+0x98>)
 8004dc4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004dc8:	6413      	str	r3, [r2, #64]	@ 0x40
 8004dca:	4b20      	ldr	r3, [pc, #128]	@ (8004e4c <HAL_PWREx_EnableOverDrive+0x98>)
 8004dcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004dd2:	603b      	str	r3, [r7, #0]
 8004dd4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004dd6:	4b1e      	ldr	r3, [pc, #120]	@ (8004e50 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a1d      	ldr	r2, [pc, #116]	@ (8004e50 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004ddc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004de0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004de2:	f7fe fb6d 	bl	80034c0 <HAL_GetTick>
 8004de6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004de8:	e009      	b.n	8004dfe <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004dea:	f7fe fb69 	bl	80034c0 <HAL_GetTick>
 8004dee:	4602      	mov	r2, r0
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	1ad3      	subs	r3, r2, r3
 8004df4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004df8:	d901      	bls.n	8004dfe <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004dfa:	2303      	movs	r3, #3
 8004dfc:	e022      	b.n	8004e44 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004dfe:	4b14      	ldr	r3, [pc, #80]	@ (8004e50 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e06:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e0a:	d1ee      	bne.n	8004dea <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004e0c:	4b10      	ldr	r3, [pc, #64]	@ (8004e50 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a0f      	ldr	r2, [pc, #60]	@ (8004e50 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004e12:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004e16:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004e18:	f7fe fb52 	bl	80034c0 <HAL_GetTick>
 8004e1c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004e1e:	e009      	b.n	8004e34 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004e20:	f7fe fb4e 	bl	80034c0 <HAL_GetTick>
 8004e24:	4602      	mov	r2, r0
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	1ad3      	subs	r3, r2, r3
 8004e2a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004e2e:	d901      	bls.n	8004e34 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004e30:	2303      	movs	r3, #3
 8004e32:	e007      	b.n	8004e44 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004e34:	4b06      	ldr	r3, [pc, #24]	@ (8004e50 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e3c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004e40:	d1ee      	bne.n	8004e20 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004e42:	2300      	movs	r3, #0
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	3708      	adds	r7, #8
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd80      	pop	{r7, pc}
 8004e4c:	40023800 	.word	0x40023800
 8004e50:	40007000 	.word	0x40007000

08004e54 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b086      	sub	sp, #24
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d101      	bne.n	8004e6a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004e66:	2301      	movs	r3, #1
 8004e68:	e29b      	b.n	80053a2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f003 0301 	and.w	r3, r3, #1
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	f000 8087 	beq.w	8004f86 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004e78:	4b96      	ldr	r3, [pc, #600]	@ (80050d4 <HAL_RCC_OscConfig+0x280>)
 8004e7a:	689b      	ldr	r3, [r3, #8]
 8004e7c:	f003 030c 	and.w	r3, r3, #12
 8004e80:	2b04      	cmp	r3, #4
 8004e82:	d00c      	beq.n	8004e9e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e84:	4b93      	ldr	r3, [pc, #588]	@ (80050d4 <HAL_RCC_OscConfig+0x280>)
 8004e86:	689b      	ldr	r3, [r3, #8]
 8004e88:	f003 030c 	and.w	r3, r3, #12
 8004e8c:	2b08      	cmp	r3, #8
 8004e8e:	d112      	bne.n	8004eb6 <HAL_RCC_OscConfig+0x62>
 8004e90:	4b90      	ldr	r3, [pc, #576]	@ (80050d4 <HAL_RCC_OscConfig+0x280>)
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e98:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004e9c:	d10b      	bne.n	8004eb6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e9e:	4b8d      	ldr	r3, [pc, #564]	@ (80050d4 <HAL_RCC_OscConfig+0x280>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d06c      	beq.n	8004f84 <HAL_RCC_OscConfig+0x130>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d168      	bne.n	8004f84 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	e275      	b.n	80053a2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ebe:	d106      	bne.n	8004ece <HAL_RCC_OscConfig+0x7a>
 8004ec0:	4b84      	ldr	r3, [pc, #528]	@ (80050d4 <HAL_RCC_OscConfig+0x280>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a83      	ldr	r2, [pc, #524]	@ (80050d4 <HAL_RCC_OscConfig+0x280>)
 8004ec6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004eca:	6013      	str	r3, [r2, #0]
 8004ecc:	e02e      	b.n	8004f2c <HAL_RCC_OscConfig+0xd8>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d10c      	bne.n	8004ef0 <HAL_RCC_OscConfig+0x9c>
 8004ed6:	4b7f      	ldr	r3, [pc, #508]	@ (80050d4 <HAL_RCC_OscConfig+0x280>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a7e      	ldr	r2, [pc, #504]	@ (80050d4 <HAL_RCC_OscConfig+0x280>)
 8004edc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ee0:	6013      	str	r3, [r2, #0]
 8004ee2:	4b7c      	ldr	r3, [pc, #496]	@ (80050d4 <HAL_RCC_OscConfig+0x280>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a7b      	ldr	r2, [pc, #492]	@ (80050d4 <HAL_RCC_OscConfig+0x280>)
 8004ee8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004eec:	6013      	str	r3, [r2, #0]
 8004eee:	e01d      	b.n	8004f2c <HAL_RCC_OscConfig+0xd8>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004ef8:	d10c      	bne.n	8004f14 <HAL_RCC_OscConfig+0xc0>
 8004efa:	4b76      	ldr	r3, [pc, #472]	@ (80050d4 <HAL_RCC_OscConfig+0x280>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a75      	ldr	r2, [pc, #468]	@ (80050d4 <HAL_RCC_OscConfig+0x280>)
 8004f00:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004f04:	6013      	str	r3, [r2, #0]
 8004f06:	4b73      	ldr	r3, [pc, #460]	@ (80050d4 <HAL_RCC_OscConfig+0x280>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a72      	ldr	r2, [pc, #456]	@ (80050d4 <HAL_RCC_OscConfig+0x280>)
 8004f0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f10:	6013      	str	r3, [r2, #0]
 8004f12:	e00b      	b.n	8004f2c <HAL_RCC_OscConfig+0xd8>
 8004f14:	4b6f      	ldr	r3, [pc, #444]	@ (80050d4 <HAL_RCC_OscConfig+0x280>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a6e      	ldr	r2, [pc, #440]	@ (80050d4 <HAL_RCC_OscConfig+0x280>)
 8004f1a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f1e:	6013      	str	r3, [r2, #0]
 8004f20:	4b6c      	ldr	r3, [pc, #432]	@ (80050d4 <HAL_RCC_OscConfig+0x280>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a6b      	ldr	r2, [pc, #428]	@ (80050d4 <HAL_RCC_OscConfig+0x280>)
 8004f26:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004f2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d013      	beq.n	8004f5c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f34:	f7fe fac4 	bl	80034c0 <HAL_GetTick>
 8004f38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f3a:	e008      	b.n	8004f4e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f3c:	f7fe fac0 	bl	80034c0 <HAL_GetTick>
 8004f40:	4602      	mov	r2, r0
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	1ad3      	subs	r3, r2, r3
 8004f46:	2b64      	cmp	r3, #100	@ 0x64
 8004f48:	d901      	bls.n	8004f4e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004f4a:	2303      	movs	r3, #3
 8004f4c:	e229      	b.n	80053a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f4e:	4b61      	ldr	r3, [pc, #388]	@ (80050d4 <HAL_RCC_OscConfig+0x280>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d0f0      	beq.n	8004f3c <HAL_RCC_OscConfig+0xe8>
 8004f5a:	e014      	b.n	8004f86 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f5c:	f7fe fab0 	bl	80034c0 <HAL_GetTick>
 8004f60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f62:	e008      	b.n	8004f76 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f64:	f7fe faac 	bl	80034c0 <HAL_GetTick>
 8004f68:	4602      	mov	r2, r0
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	1ad3      	subs	r3, r2, r3
 8004f6e:	2b64      	cmp	r3, #100	@ 0x64
 8004f70:	d901      	bls.n	8004f76 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004f72:	2303      	movs	r3, #3
 8004f74:	e215      	b.n	80053a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f76:	4b57      	ldr	r3, [pc, #348]	@ (80050d4 <HAL_RCC_OscConfig+0x280>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d1f0      	bne.n	8004f64 <HAL_RCC_OscConfig+0x110>
 8004f82:	e000      	b.n	8004f86 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f003 0302 	and.w	r3, r3, #2
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d069      	beq.n	8005066 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004f92:	4b50      	ldr	r3, [pc, #320]	@ (80050d4 <HAL_RCC_OscConfig+0x280>)
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	f003 030c 	and.w	r3, r3, #12
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d00b      	beq.n	8004fb6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f9e:	4b4d      	ldr	r3, [pc, #308]	@ (80050d4 <HAL_RCC_OscConfig+0x280>)
 8004fa0:	689b      	ldr	r3, [r3, #8]
 8004fa2:	f003 030c 	and.w	r3, r3, #12
 8004fa6:	2b08      	cmp	r3, #8
 8004fa8:	d11c      	bne.n	8004fe4 <HAL_RCC_OscConfig+0x190>
 8004faa:	4b4a      	ldr	r3, [pc, #296]	@ (80050d4 <HAL_RCC_OscConfig+0x280>)
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d116      	bne.n	8004fe4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fb6:	4b47      	ldr	r3, [pc, #284]	@ (80050d4 <HAL_RCC_OscConfig+0x280>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f003 0302 	and.w	r3, r3, #2
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d005      	beq.n	8004fce <HAL_RCC_OscConfig+0x17a>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	68db      	ldr	r3, [r3, #12]
 8004fc6:	2b01      	cmp	r3, #1
 8004fc8:	d001      	beq.n	8004fce <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	e1e9      	b.n	80053a2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fce:	4b41      	ldr	r3, [pc, #260]	@ (80050d4 <HAL_RCC_OscConfig+0x280>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	691b      	ldr	r3, [r3, #16]
 8004fda:	00db      	lsls	r3, r3, #3
 8004fdc:	493d      	ldr	r1, [pc, #244]	@ (80050d4 <HAL_RCC_OscConfig+0x280>)
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fe2:	e040      	b.n	8005066 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	68db      	ldr	r3, [r3, #12]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d023      	beq.n	8005034 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004fec:	4b39      	ldr	r3, [pc, #228]	@ (80050d4 <HAL_RCC_OscConfig+0x280>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a38      	ldr	r2, [pc, #224]	@ (80050d4 <HAL_RCC_OscConfig+0x280>)
 8004ff2:	f043 0301 	orr.w	r3, r3, #1
 8004ff6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ff8:	f7fe fa62 	bl	80034c0 <HAL_GetTick>
 8004ffc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ffe:	e008      	b.n	8005012 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005000:	f7fe fa5e 	bl	80034c0 <HAL_GetTick>
 8005004:	4602      	mov	r2, r0
 8005006:	693b      	ldr	r3, [r7, #16]
 8005008:	1ad3      	subs	r3, r2, r3
 800500a:	2b02      	cmp	r3, #2
 800500c:	d901      	bls.n	8005012 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800500e:	2303      	movs	r3, #3
 8005010:	e1c7      	b.n	80053a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005012:	4b30      	ldr	r3, [pc, #192]	@ (80050d4 <HAL_RCC_OscConfig+0x280>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f003 0302 	and.w	r3, r3, #2
 800501a:	2b00      	cmp	r3, #0
 800501c:	d0f0      	beq.n	8005000 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800501e:	4b2d      	ldr	r3, [pc, #180]	@ (80050d4 <HAL_RCC_OscConfig+0x280>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	691b      	ldr	r3, [r3, #16]
 800502a:	00db      	lsls	r3, r3, #3
 800502c:	4929      	ldr	r1, [pc, #164]	@ (80050d4 <HAL_RCC_OscConfig+0x280>)
 800502e:	4313      	orrs	r3, r2
 8005030:	600b      	str	r3, [r1, #0]
 8005032:	e018      	b.n	8005066 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005034:	4b27      	ldr	r3, [pc, #156]	@ (80050d4 <HAL_RCC_OscConfig+0x280>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a26      	ldr	r2, [pc, #152]	@ (80050d4 <HAL_RCC_OscConfig+0x280>)
 800503a:	f023 0301 	bic.w	r3, r3, #1
 800503e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005040:	f7fe fa3e 	bl	80034c0 <HAL_GetTick>
 8005044:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005046:	e008      	b.n	800505a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005048:	f7fe fa3a 	bl	80034c0 <HAL_GetTick>
 800504c:	4602      	mov	r2, r0
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	1ad3      	subs	r3, r2, r3
 8005052:	2b02      	cmp	r3, #2
 8005054:	d901      	bls.n	800505a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005056:	2303      	movs	r3, #3
 8005058:	e1a3      	b.n	80053a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800505a:	4b1e      	ldr	r3, [pc, #120]	@ (80050d4 <HAL_RCC_OscConfig+0x280>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f003 0302 	and.w	r3, r3, #2
 8005062:	2b00      	cmp	r3, #0
 8005064:	d1f0      	bne.n	8005048 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f003 0308 	and.w	r3, r3, #8
 800506e:	2b00      	cmp	r3, #0
 8005070:	d038      	beq.n	80050e4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	695b      	ldr	r3, [r3, #20]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d019      	beq.n	80050ae <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800507a:	4b16      	ldr	r3, [pc, #88]	@ (80050d4 <HAL_RCC_OscConfig+0x280>)
 800507c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800507e:	4a15      	ldr	r2, [pc, #84]	@ (80050d4 <HAL_RCC_OscConfig+0x280>)
 8005080:	f043 0301 	orr.w	r3, r3, #1
 8005084:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005086:	f7fe fa1b 	bl	80034c0 <HAL_GetTick>
 800508a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800508c:	e008      	b.n	80050a0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800508e:	f7fe fa17 	bl	80034c0 <HAL_GetTick>
 8005092:	4602      	mov	r2, r0
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	1ad3      	subs	r3, r2, r3
 8005098:	2b02      	cmp	r3, #2
 800509a:	d901      	bls.n	80050a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800509c:	2303      	movs	r3, #3
 800509e:	e180      	b.n	80053a2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050a0:	4b0c      	ldr	r3, [pc, #48]	@ (80050d4 <HAL_RCC_OscConfig+0x280>)
 80050a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80050a4:	f003 0302 	and.w	r3, r3, #2
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d0f0      	beq.n	800508e <HAL_RCC_OscConfig+0x23a>
 80050ac:	e01a      	b.n	80050e4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80050ae:	4b09      	ldr	r3, [pc, #36]	@ (80050d4 <HAL_RCC_OscConfig+0x280>)
 80050b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80050b2:	4a08      	ldr	r2, [pc, #32]	@ (80050d4 <HAL_RCC_OscConfig+0x280>)
 80050b4:	f023 0301 	bic.w	r3, r3, #1
 80050b8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050ba:	f7fe fa01 	bl	80034c0 <HAL_GetTick>
 80050be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050c0:	e00a      	b.n	80050d8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80050c2:	f7fe f9fd 	bl	80034c0 <HAL_GetTick>
 80050c6:	4602      	mov	r2, r0
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	1ad3      	subs	r3, r2, r3
 80050cc:	2b02      	cmp	r3, #2
 80050ce:	d903      	bls.n	80050d8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80050d0:	2303      	movs	r3, #3
 80050d2:	e166      	b.n	80053a2 <HAL_RCC_OscConfig+0x54e>
 80050d4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050d8:	4b92      	ldr	r3, [pc, #584]	@ (8005324 <HAL_RCC_OscConfig+0x4d0>)
 80050da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80050dc:	f003 0302 	and.w	r3, r3, #2
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d1ee      	bne.n	80050c2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f003 0304 	and.w	r3, r3, #4
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	f000 80a4 	beq.w	800523a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80050f2:	4b8c      	ldr	r3, [pc, #560]	@ (8005324 <HAL_RCC_OscConfig+0x4d0>)
 80050f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d10d      	bne.n	800511a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80050fe:	4b89      	ldr	r3, [pc, #548]	@ (8005324 <HAL_RCC_OscConfig+0x4d0>)
 8005100:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005102:	4a88      	ldr	r2, [pc, #544]	@ (8005324 <HAL_RCC_OscConfig+0x4d0>)
 8005104:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005108:	6413      	str	r3, [r2, #64]	@ 0x40
 800510a:	4b86      	ldr	r3, [pc, #536]	@ (8005324 <HAL_RCC_OscConfig+0x4d0>)
 800510c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800510e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005112:	60bb      	str	r3, [r7, #8]
 8005114:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005116:	2301      	movs	r3, #1
 8005118:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800511a:	4b83      	ldr	r3, [pc, #524]	@ (8005328 <HAL_RCC_OscConfig+0x4d4>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005122:	2b00      	cmp	r3, #0
 8005124:	d118      	bne.n	8005158 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8005126:	4b80      	ldr	r3, [pc, #512]	@ (8005328 <HAL_RCC_OscConfig+0x4d4>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a7f      	ldr	r2, [pc, #508]	@ (8005328 <HAL_RCC_OscConfig+0x4d4>)
 800512c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005130:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005132:	f7fe f9c5 	bl	80034c0 <HAL_GetTick>
 8005136:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005138:	e008      	b.n	800514c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800513a:	f7fe f9c1 	bl	80034c0 <HAL_GetTick>
 800513e:	4602      	mov	r2, r0
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	1ad3      	subs	r3, r2, r3
 8005144:	2b64      	cmp	r3, #100	@ 0x64
 8005146:	d901      	bls.n	800514c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005148:	2303      	movs	r3, #3
 800514a:	e12a      	b.n	80053a2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800514c:	4b76      	ldr	r3, [pc, #472]	@ (8005328 <HAL_RCC_OscConfig+0x4d4>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005154:	2b00      	cmp	r3, #0
 8005156:	d0f0      	beq.n	800513a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	689b      	ldr	r3, [r3, #8]
 800515c:	2b01      	cmp	r3, #1
 800515e:	d106      	bne.n	800516e <HAL_RCC_OscConfig+0x31a>
 8005160:	4b70      	ldr	r3, [pc, #448]	@ (8005324 <HAL_RCC_OscConfig+0x4d0>)
 8005162:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005164:	4a6f      	ldr	r2, [pc, #444]	@ (8005324 <HAL_RCC_OscConfig+0x4d0>)
 8005166:	f043 0301 	orr.w	r3, r3, #1
 800516a:	6713      	str	r3, [r2, #112]	@ 0x70
 800516c:	e02d      	b.n	80051ca <HAL_RCC_OscConfig+0x376>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	689b      	ldr	r3, [r3, #8]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d10c      	bne.n	8005190 <HAL_RCC_OscConfig+0x33c>
 8005176:	4b6b      	ldr	r3, [pc, #428]	@ (8005324 <HAL_RCC_OscConfig+0x4d0>)
 8005178:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800517a:	4a6a      	ldr	r2, [pc, #424]	@ (8005324 <HAL_RCC_OscConfig+0x4d0>)
 800517c:	f023 0301 	bic.w	r3, r3, #1
 8005180:	6713      	str	r3, [r2, #112]	@ 0x70
 8005182:	4b68      	ldr	r3, [pc, #416]	@ (8005324 <HAL_RCC_OscConfig+0x4d0>)
 8005184:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005186:	4a67      	ldr	r2, [pc, #412]	@ (8005324 <HAL_RCC_OscConfig+0x4d0>)
 8005188:	f023 0304 	bic.w	r3, r3, #4
 800518c:	6713      	str	r3, [r2, #112]	@ 0x70
 800518e:	e01c      	b.n	80051ca <HAL_RCC_OscConfig+0x376>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	689b      	ldr	r3, [r3, #8]
 8005194:	2b05      	cmp	r3, #5
 8005196:	d10c      	bne.n	80051b2 <HAL_RCC_OscConfig+0x35e>
 8005198:	4b62      	ldr	r3, [pc, #392]	@ (8005324 <HAL_RCC_OscConfig+0x4d0>)
 800519a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800519c:	4a61      	ldr	r2, [pc, #388]	@ (8005324 <HAL_RCC_OscConfig+0x4d0>)
 800519e:	f043 0304 	orr.w	r3, r3, #4
 80051a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80051a4:	4b5f      	ldr	r3, [pc, #380]	@ (8005324 <HAL_RCC_OscConfig+0x4d0>)
 80051a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051a8:	4a5e      	ldr	r2, [pc, #376]	@ (8005324 <HAL_RCC_OscConfig+0x4d0>)
 80051aa:	f043 0301 	orr.w	r3, r3, #1
 80051ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80051b0:	e00b      	b.n	80051ca <HAL_RCC_OscConfig+0x376>
 80051b2:	4b5c      	ldr	r3, [pc, #368]	@ (8005324 <HAL_RCC_OscConfig+0x4d0>)
 80051b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051b6:	4a5b      	ldr	r2, [pc, #364]	@ (8005324 <HAL_RCC_OscConfig+0x4d0>)
 80051b8:	f023 0301 	bic.w	r3, r3, #1
 80051bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80051be:	4b59      	ldr	r3, [pc, #356]	@ (8005324 <HAL_RCC_OscConfig+0x4d0>)
 80051c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051c2:	4a58      	ldr	r2, [pc, #352]	@ (8005324 <HAL_RCC_OscConfig+0x4d0>)
 80051c4:	f023 0304 	bic.w	r3, r3, #4
 80051c8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	689b      	ldr	r3, [r3, #8]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d015      	beq.n	80051fe <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051d2:	f7fe f975 	bl	80034c0 <HAL_GetTick>
 80051d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051d8:	e00a      	b.n	80051f0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051da:	f7fe f971 	bl	80034c0 <HAL_GetTick>
 80051de:	4602      	mov	r2, r0
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	1ad3      	subs	r3, r2, r3
 80051e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d901      	bls.n	80051f0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80051ec:	2303      	movs	r3, #3
 80051ee:	e0d8      	b.n	80053a2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051f0:	4b4c      	ldr	r3, [pc, #304]	@ (8005324 <HAL_RCC_OscConfig+0x4d0>)
 80051f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051f4:	f003 0302 	and.w	r3, r3, #2
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d0ee      	beq.n	80051da <HAL_RCC_OscConfig+0x386>
 80051fc:	e014      	b.n	8005228 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051fe:	f7fe f95f 	bl	80034c0 <HAL_GetTick>
 8005202:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005204:	e00a      	b.n	800521c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005206:	f7fe f95b 	bl	80034c0 <HAL_GetTick>
 800520a:	4602      	mov	r2, r0
 800520c:	693b      	ldr	r3, [r7, #16]
 800520e:	1ad3      	subs	r3, r2, r3
 8005210:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005214:	4293      	cmp	r3, r2
 8005216:	d901      	bls.n	800521c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005218:	2303      	movs	r3, #3
 800521a:	e0c2      	b.n	80053a2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800521c:	4b41      	ldr	r3, [pc, #260]	@ (8005324 <HAL_RCC_OscConfig+0x4d0>)
 800521e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005220:	f003 0302 	and.w	r3, r3, #2
 8005224:	2b00      	cmp	r3, #0
 8005226:	d1ee      	bne.n	8005206 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005228:	7dfb      	ldrb	r3, [r7, #23]
 800522a:	2b01      	cmp	r3, #1
 800522c:	d105      	bne.n	800523a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800522e:	4b3d      	ldr	r3, [pc, #244]	@ (8005324 <HAL_RCC_OscConfig+0x4d0>)
 8005230:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005232:	4a3c      	ldr	r2, [pc, #240]	@ (8005324 <HAL_RCC_OscConfig+0x4d0>)
 8005234:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005238:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	699b      	ldr	r3, [r3, #24]
 800523e:	2b00      	cmp	r3, #0
 8005240:	f000 80ae 	beq.w	80053a0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005244:	4b37      	ldr	r3, [pc, #220]	@ (8005324 <HAL_RCC_OscConfig+0x4d0>)
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	f003 030c 	and.w	r3, r3, #12
 800524c:	2b08      	cmp	r3, #8
 800524e:	d06d      	beq.n	800532c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	699b      	ldr	r3, [r3, #24]
 8005254:	2b02      	cmp	r3, #2
 8005256:	d14b      	bne.n	80052f0 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005258:	4b32      	ldr	r3, [pc, #200]	@ (8005324 <HAL_RCC_OscConfig+0x4d0>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4a31      	ldr	r2, [pc, #196]	@ (8005324 <HAL_RCC_OscConfig+0x4d0>)
 800525e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005262:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005264:	f7fe f92c 	bl	80034c0 <HAL_GetTick>
 8005268:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800526a:	e008      	b.n	800527e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800526c:	f7fe f928 	bl	80034c0 <HAL_GetTick>
 8005270:	4602      	mov	r2, r0
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	1ad3      	subs	r3, r2, r3
 8005276:	2b02      	cmp	r3, #2
 8005278:	d901      	bls.n	800527e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800527a:	2303      	movs	r3, #3
 800527c:	e091      	b.n	80053a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800527e:	4b29      	ldr	r3, [pc, #164]	@ (8005324 <HAL_RCC_OscConfig+0x4d0>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005286:	2b00      	cmp	r3, #0
 8005288:	d1f0      	bne.n	800526c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	69da      	ldr	r2, [r3, #28]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6a1b      	ldr	r3, [r3, #32]
 8005292:	431a      	orrs	r2, r3
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005298:	019b      	lsls	r3, r3, #6
 800529a:	431a      	orrs	r2, r3
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052a0:	085b      	lsrs	r3, r3, #1
 80052a2:	3b01      	subs	r3, #1
 80052a4:	041b      	lsls	r3, r3, #16
 80052a6:	431a      	orrs	r2, r3
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052ac:	061b      	lsls	r3, r3, #24
 80052ae:	431a      	orrs	r2, r3
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052b4:	071b      	lsls	r3, r3, #28
 80052b6:	491b      	ldr	r1, [pc, #108]	@ (8005324 <HAL_RCC_OscConfig+0x4d0>)
 80052b8:	4313      	orrs	r3, r2
 80052ba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80052bc:	4b19      	ldr	r3, [pc, #100]	@ (8005324 <HAL_RCC_OscConfig+0x4d0>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a18      	ldr	r2, [pc, #96]	@ (8005324 <HAL_RCC_OscConfig+0x4d0>)
 80052c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80052c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052c8:	f7fe f8fa 	bl	80034c0 <HAL_GetTick>
 80052cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052ce:	e008      	b.n	80052e2 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052d0:	f7fe f8f6 	bl	80034c0 <HAL_GetTick>
 80052d4:	4602      	mov	r2, r0
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	1ad3      	subs	r3, r2, r3
 80052da:	2b02      	cmp	r3, #2
 80052dc:	d901      	bls.n	80052e2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80052de:	2303      	movs	r3, #3
 80052e0:	e05f      	b.n	80053a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052e2:	4b10      	ldr	r3, [pc, #64]	@ (8005324 <HAL_RCC_OscConfig+0x4d0>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d0f0      	beq.n	80052d0 <HAL_RCC_OscConfig+0x47c>
 80052ee:	e057      	b.n	80053a0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052f0:	4b0c      	ldr	r3, [pc, #48]	@ (8005324 <HAL_RCC_OscConfig+0x4d0>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4a0b      	ldr	r2, [pc, #44]	@ (8005324 <HAL_RCC_OscConfig+0x4d0>)
 80052f6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80052fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052fc:	f7fe f8e0 	bl	80034c0 <HAL_GetTick>
 8005300:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005302:	e008      	b.n	8005316 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005304:	f7fe f8dc 	bl	80034c0 <HAL_GetTick>
 8005308:	4602      	mov	r2, r0
 800530a:	693b      	ldr	r3, [r7, #16]
 800530c:	1ad3      	subs	r3, r2, r3
 800530e:	2b02      	cmp	r3, #2
 8005310:	d901      	bls.n	8005316 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8005312:	2303      	movs	r3, #3
 8005314:	e045      	b.n	80053a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005316:	4b03      	ldr	r3, [pc, #12]	@ (8005324 <HAL_RCC_OscConfig+0x4d0>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800531e:	2b00      	cmp	r3, #0
 8005320:	d1f0      	bne.n	8005304 <HAL_RCC_OscConfig+0x4b0>
 8005322:	e03d      	b.n	80053a0 <HAL_RCC_OscConfig+0x54c>
 8005324:	40023800 	.word	0x40023800
 8005328:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800532c:	4b1f      	ldr	r3, [pc, #124]	@ (80053ac <HAL_RCC_OscConfig+0x558>)
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	699b      	ldr	r3, [r3, #24]
 8005336:	2b01      	cmp	r3, #1
 8005338:	d030      	beq.n	800539c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005344:	429a      	cmp	r2, r3
 8005346:	d129      	bne.n	800539c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005352:	429a      	cmp	r2, r3
 8005354:	d122      	bne.n	800539c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005356:	68fa      	ldr	r2, [r7, #12]
 8005358:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800535c:	4013      	ands	r3, r2
 800535e:	687a      	ldr	r2, [r7, #4]
 8005360:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005362:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005364:	4293      	cmp	r3, r2
 8005366:	d119      	bne.n	800539c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005372:	085b      	lsrs	r3, r3, #1
 8005374:	3b01      	subs	r3, #1
 8005376:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005378:	429a      	cmp	r2, r3
 800537a:	d10f      	bne.n	800539c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005386:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005388:	429a      	cmp	r2, r3
 800538a:	d107      	bne.n	800539c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005396:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005398:	429a      	cmp	r2, r3
 800539a:	d001      	beq.n	80053a0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800539c:	2301      	movs	r3, #1
 800539e:	e000      	b.n	80053a2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80053a0:	2300      	movs	r3, #0
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	3718      	adds	r7, #24
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}
 80053aa:	bf00      	nop
 80053ac:	40023800 	.word	0x40023800

080053b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b084      	sub	sp, #16
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
 80053b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80053ba:	2300      	movs	r3, #0
 80053bc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d101      	bne.n	80053c8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80053c4:	2301      	movs	r3, #1
 80053c6:	e0d0      	b.n	800556a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80053c8:	4b6a      	ldr	r3, [pc, #424]	@ (8005574 <HAL_RCC_ClockConfig+0x1c4>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f003 030f 	and.w	r3, r3, #15
 80053d0:	683a      	ldr	r2, [r7, #0]
 80053d2:	429a      	cmp	r2, r3
 80053d4:	d910      	bls.n	80053f8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053d6:	4b67      	ldr	r3, [pc, #412]	@ (8005574 <HAL_RCC_ClockConfig+0x1c4>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f023 020f 	bic.w	r2, r3, #15
 80053de:	4965      	ldr	r1, [pc, #404]	@ (8005574 <HAL_RCC_ClockConfig+0x1c4>)
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	4313      	orrs	r3, r2
 80053e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80053e6:	4b63      	ldr	r3, [pc, #396]	@ (8005574 <HAL_RCC_ClockConfig+0x1c4>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f003 030f 	and.w	r3, r3, #15
 80053ee:	683a      	ldr	r2, [r7, #0]
 80053f0:	429a      	cmp	r2, r3
 80053f2:	d001      	beq.n	80053f8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80053f4:	2301      	movs	r3, #1
 80053f6:	e0b8      	b.n	800556a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f003 0302 	and.w	r3, r3, #2
 8005400:	2b00      	cmp	r3, #0
 8005402:	d020      	beq.n	8005446 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f003 0304 	and.w	r3, r3, #4
 800540c:	2b00      	cmp	r3, #0
 800540e:	d005      	beq.n	800541c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005410:	4b59      	ldr	r3, [pc, #356]	@ (8005578 <HAL_RCC_ClockConfig+0x1c8>)
 8005412:	689b      	ldr	r3, [r3, #8]
 8005414:	4a58      	ldr	r2, [pc, #352]	@ (8005578 <HAL_RCC_ClockConfig+0x1c8>)
 8005416:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800541a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f003 0308 	and.w	r3, r3, #8
 8005424:	2b00      	cmp	r3, #0
 8005426:	d005      	beq.n	8005434 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005428:	4b53      	ldr	r3, [pc, #332]	@ (8005578 <HAL_RCC_ClockConfig+0x1c8>)
 800542a:	689b      	ldr	r3, [r3, #8]
 800542c:	4a52      	ldr	r2, [pc, #328]	@ (8005578 <HAL_RCC_ClockConfig+0x1c8>)
 800542e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005432:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005434:	4b50      	ldr	r3, [pc, #320]	@ (8005578 <HAL_RCC_ClockConfig+0x1c8>)
 8005436:	689b      	ldr	r3, [r3, #8]
 8005438:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	689b      	ldr	r3, [r3, #8]
 8005440:	494d      	ldr	r1, [pc, #308]	@ (8005578 <HAL_RCC_ClockConfig+0x1c8>)
 8005442:	4313      	orrs	r3, r2
 8005444:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f003 0301 	and.w	r3, r3, #1
 800544e:	2b00      	cmp	r3, #0
 8005450:	d040      	beq.n	80054d4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	2b01      	cmp	r3, #1
 8005458:	d107      	bne.n	800546a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800545a:	4b47      	ldr	r3, [pc, #284]	@ (8005578 <HAL_RCC_ClockConfig+0x1c8>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005462:	2b00      	cmp	r3, #0
 8005464:	d115      	bne.n	8005492 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005466:	2301      	movs	r3, #1
 8005468:	e07f      	b.n	800556a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	2b02      	cmp	r3, #2
 8005470:	d107      	bne.n	8005482 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005472:	4b41      	ldr	r3, [pc, #260]	@ (8005578 <HAL_RCC_ClockConfig+0x1c8>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800547a:	2b00      	cmp	r3, #0
 800547c:	d109      	bne.n	8005492 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800547e:	2301      	movs	r3, #1
 8005480:	e073      	b.n	800556a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005482:	4b3d      	ldr	r3, [pc, #244]	@ (8005578 <HAL_RCC_ClockConfig+0x1c8>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f003 0302 	and.w	r3, r3, #2
 800548a:	2b00      	cmp	r3, #0
 800548c:	d101      	bne.n	8005492 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800548e:	2301      	movs	r3, #1
 8005490:	e06b      	b.n	800556a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005492:	4b39      	ldr	r3, [pc, #228]	@ (8005578 <HAL_RCC_ClockConfig+0x1c8>)
 8005494:	689b      	ldr	r3, [r3, #8]
 8005496:	f023 0203 	bic.w	r2, r3, #3
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	4936      	ldr	r1, [pc, #216]	@ (8005578 <HAL_RCC_ClockConfig+0x1c8>)
 80054a0:	4313      	orrs	r3, r2
 80054a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054a4:	f7fe f80c 	bl	80034c0 <HAL_GetTick>
 80054a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054aa:	e00a      	b.n	80054c2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80054ac:	f7fe f808 	bl	80034c0 <HAL_GetTick>
 80054b0:	4602      	mov	r2, r0
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	1ad3      	subs	r3, r2, r3
 80054b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d901      	bls.n	80054c2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80054be:	2303      	movs	r3, #3
 80054c0:	e053      	b.n	800556a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054c2:	4b2d      	ldr	r3, [pc, #180]	@ (8005578 <HAL_RCC_ClockConfig+0x1c8>)
 80054c4:	689b      	ldr	r3, [r3, #8]
 80054c6:	f003 020c 	and.w	r2, r3, #12
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	009b      	lsls	r3, r3, #2
 80054d0:	429a      	cmp	r2, r3
 80054d2:	d1eb      	bne.n	80054ac <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80054d4:	4b27      	ldr	r3, [pc, #156]	@ (8005574 <HAL_RCC_ClockConfig+0x1c4>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f003 030f 	and.w	r3, r3, #15
 80054dc:	683a      	ldr	r2, [r7, #0]
 80054de:	429a      	cmp	r2, r3
 80054e0:	d210      	bcs.n	8005504 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054e2:	4b24      	ldr	r3, [pc, #144]	@ (8005574 <HAL_RCC_ClockConfig+0x1c4>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f023 020f 	bic.w	r2, r3, #15
 80054ea:	4922      	ldr	r1, [pc, #136]	@ (8005574 <HAL_RCC_ClockConfig+0x1c4>)
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	4313      	orrs	r3, r2
 80054f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80054f2:	4b20      	ldr	r3, [pc, #128]	@ (8005574 <HAL_RCC_ClockConfig+0x1c4>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f003 030f 	and.w	r3, r3, #15
 80054fa:	683a      	ldr	r2, [r7, #0]
 80054fc:	429a      	cmp	r2, r3
 80054fe:	d001      	beq.n	8005504 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005500:	2301      	movs	r3, #1
 8005502:	e032      	b.n	800556a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f003 0304 	and.w	r3, r3, #4
 800550c:	2b00      	cmp	r3, #0
 800550e:	d008      	beq.n	8005522 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005510:	4b19      	ldr	r3, [pc, #100]	@ (8005578 <HAL_RCC_ClockConfig+0x1c8>)
 8005512:	689b      	ldr	r3, [r3, #8]
 8005514:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	68db      	ldr	r3, [r3, #12]
 800551c:	4916      	ldr	r1, [pc, #88]	@ (8005578 <HAL_RCC_ClockConfig+0x1c8>)
 800551e:	4313      	orrs	r3, r2
 8005520:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f003 0308 	and.w	r3, r3, #8
 800552a:	2b00      	cmp	r3, #0
 800552c:	d009      	beq.n	8005542 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800552e:	4b12      	ldr	r3, [pc, #72]	@ (8005578 <HAL_RCC_ClockConfig+0x1c8>)
 8005530:	689b      	ldr	r3, [r3, #8]
 8005532:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	691b      	ldr	r3, [r3, #16]
 800553a:	00db      	lsls	r3, r3, #3
 800553c:	490e      	ldr	r1, [pc, #56]	@ (8005578 <HAL_RCC_ClockConfig+0x1c8>)
 800553e:	4313      	orrs	r3, r2
 8005540:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005542:	f000 f821 	bl	8005588 <HAL_RCC_GetSysClockFreq>
 8005546:	4602      	mov	r2, r0
 8005548:	4b0b      	ldr	r3, [pc, #44]	@ (8005578 <HAL_RCC_ClockConfig+0x1c8>)
 800554a:	689b      	ldr	r3, [r3, #8]
 800554c:	091b      	lsrs	r3, r3, #4
 800554e:	f003 030f 	and.w	r3, r3, #15
 8005552:	490a      	ldr	r1, [pc, #40]	@ (800557c <HAL_RCC_ClockConfig+0x1cc>)
 8005554:	5ccb      	ldrb	r3, [r1, r3]
 8005556:	fa22 f303 	lsr.w	r3, r2, r3
 800555a:	4a09      	ldr	r2, [pc, #36]	@ (8005580 <HAL_RCC_ClockConfig+0x1d0>)
 800555c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800555e:	4b09      	ldr	r3, [pc, #36]	@ (8005584 <HAL_RCC_ClockConfig+0x1d4>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4618      	mov	r0, r3
 8005564:	f7fd ff68 	bl	8003438 <HAL_InitTick>

  return HAL_OK;
 8005568:	2300      	movs	r3, #0
}
 800556a:	4618      	mov	r0, r3
 800556c:	3710      	adds	r7, #16
 800556e:	46bd      	mov	sp, r7
 8005570:	bd80      	pop	{r7, pc}
 8005572:	bf00      	nop
 8005574:	40023c00 	.word	0x40023c00
 8005578:	40023800 	.word	0x40023800
 800557c:	08008a4c 	.word	0x08008a4c
 8005580:	2000004c 	.word	0x2000004c
 8005584:	20000074 	.word	0x20000074

08005588 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005588:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800558c:	b094      	sub	sp, #80	@ 0x50
 800558e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005590:	2300      	movs	r3, #0
 8005592:	647b      	str	r3, [r7, #68]	@ 0x44
 8005594:	2300      	movs	r3, #0
 8005596:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005598:	2300      	movs	r3, #0
 800559a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 800559c:	2300      	movs	r3, #0
 800559e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80055a0:	4b79      	ldr	r3, [pc, #484]	@ (8005788 <HAL_RCC_GetSysClockFreq+0x200>)
 80055a2:	689b      	ldr	r3, [r3, #8]
 80055a4:	f003 030c 	and.w	r3, r3, #12
 80055a8:	2b08      	cmp	r3, #8
 80055aa:	d00d      	beq.n	80055c8 <HAL_RCC_GetSysClockFreq+0x40>
 80055ac:	2b08      	cmp	r3, #8
 80055ae:	f200 80e1 	bhi.w	8005774 <HAL_RCC_GetSysClockFreq+0x1ec>
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d002      	beq.n	80055bc <HAL_RCC_GetSysClockFreq+0x34>
 80055b6:	2b04      	cmp	r3, #4
 80055b8:	d003      	beq.n	80055c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80055ba:	e0db      	b.n	8005774 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80055bc:	4b73      	ldr	r3, [pc, #460]	@ (800578c <HAL_RCC_GetSysClockFreq+0x204>)
 80055be:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80055c0:	e0db      	b.n	800577a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80055c2:	4b73      	ldr	r3, [pc, #460]	@ (8005790 <HAL_RCC_GetSysClockFreq+0x208>)
 80055c4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80055c6:	e0d8      	b.n	800577a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80055c8:	4b6f      	ldr	r3, [pc, #444]	@ (8005788 <HAL_RCC_GetSysClockFreq+0x200>)
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80055d0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80055d2:	4b6d      	ldr	r3, [pc, #436]	@ (8005788 <HAL_RCC_GetSysClockFreq+0x200>)
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d063      	beq.n	80056a6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80055de:	4b6a      	ldr	r3, [pc, #424]	@ (8005788 <HAL_RCC_GetSysClockFreq+0x200>)
 80055e0:	685b      	ldr	r3, [r3, #4]
 80055e2:	099b      	lsrs	r3, r3, #6
 80055e4:	2200      	movs	r2, #0
 80055e6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80055e8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80055ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055f0:	633b      	str	r3, [r7, #48]	@ 0x30
 80055f2:	2300      	movs	r3, #0
 80055f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80055f6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80055fa:	4622      	mov	r2, r4
 80055fc:	462b      	mov	r3, r5
 80055fe:	f04f 0000 	mov.w	r0, #0
 8005602:	f04f 0100 	mov.w	r1, #0
 8005606:	0159      	lsls	r1, r3, #5
 8005608:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800560c:	0150      	lsls	r0, r2, #5
 800560e:	4602      	mov	r2, r0
 8005610:	460b      	mov	r3, r1
 8005612:	4621      	mov	r1, r4
 8005614:	1a51      	subs	r1, r2, r1
 8005616:	6139      	str	r1, [r7, #16]
 8005618:	4629      	mov	r1, r5
 800561a:	eb63 0301 	sbc.w	r3, r3, r1
 800561e:	617b      	str	r3, [r7, #20]
 8005620:	f04f 0200 	mov.w	r2, #0
 8005624:	f04f 0300 	mov.w	r3, #0
 8005628:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800562c:	4659      	mov	r1, fp
 800562e:	018b      	lsls	r3, r1, #6
 8005630:	4651      	mov	r1, sl
 8005632:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005636:	4651      	mov	r1, sl
 8005638:	018a      	lsls	r2, r1, #6
 800563a:	4651      	mov	r1, sl
 800563c:	ebb2 0801 	subs.w	r8, r2, r1
 8005640:	4659      	mov	r1, fp
 8005642:	eb63 0901 	sbc.w	r9, r3, r1
 8005646:	f04f 0200 	mov.w	r2, #0
 800564a:	f04f 0300 	mov.w	r3, #0
 800564e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005652:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005656:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800565a:	4690      	mov	r8, r2
 800565c:	4699      	mov	r9, r3
 800565e:	4623      	mov	r3, r4
 8005660:	eb18 0303 	adds.w	r3, r8, r3
 8005664:	60bb      	str	r3, [r7, #8]
 8005666:	462b      	mov	r3, r5
 8005668:	eb49 0303 	adc.w	r3, r9, r3
 800566c:	60fb      	str	r3, [r7, #12]
 800566e:	f04f 0200 	mov.w	r2, #0
 8005672:	f04f 0300 	mov.w	r3, #0
 8005676:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800567a:	4629      	mov	r1, r5
 800567c:	024b      	lsls	r3, r1, #9
 800567e:	4621      	mov	r1, r4
 8005680:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005684:	4621      	mov	r1, r4
 8005686:	024a      	lsls	r2, r1, #9
 8005688:	4610      	mov	r0, r2
 800568a:	4619      	mov	r1, r3
 800568c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800568e:	2200      	movs	r2, #0
 8005690:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005692:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005694:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005698:	f7fa fe32 	bl	8000300 <__aeabi_uldivmod>
 800569c:	4602      	mov	r2, r0
 800569e:	460b      	mov	r3, r1
 80056a0:	4613      	mov	r3, r2
 80056a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80056a4:	e058      	b.n	8005758 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80056a6:	4b38      	ldr	r3, [pc, #224]	@ (8005788 <HAL_RCC_GetSysClockFreq+0x200>)
 80056a8:	685b      	ldr	r3, [r3, #4]
 80056aa:	099b      	lsrs	r3, r3, #6
 80056ac:	2200      	movs	r2, #0
 80056ae:	4618      	mov	r0, r3
 80056b0:	4611      	mov	r1, r2
 80056b2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80056b6:	623b      	str	r3, [r7, #32]
 80056b8:	2300      	movs	r3, #0
 80056ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80056bc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80056c0:	4642      	mov	r2, r8
 80056c2:	464b      	mov	r3, r9
 80056c4:	f04f 0000 	mov.w	r0, #0
 80056c8:	f04f 0100 	mov.w	r1, #0
 80056cc:	0159      	lsls	r1, r3, #5
 80056ce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80056d2:	0150      	lsls	r0, r2, #5
 80056d4:	4602      	mov	r2, r0
 80056d6:	460b      	mov	r3, r1
 80056d8:	4641      	mov	r1, r8
 80056da:	ebb2 0a01 	subs.w	sl, r2, r1
 80056de:	4649      	mov	r1, r9
 80056e0:	eb63 0b01 	sbc.w	fp, r3, r1
 80056e4:	f04f 0200 	mov.w	r2, #0
 80056e8:	f04f 0300 	mov.w	r3, #0
 80056ec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80056f0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80056f4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80056f8:	ebb2 040a 	subs.w	r4, r2, sl
 80056fc:	eb63 050b 	sbc.w	r5, r3, fp
 8005700:	f04f 0200 	mov.w	r2, #0
 8005704:	f04f 0300 	mov.w	r3, #0
 8005708:	00eb      	lsls	r3, r5, #3
 800570a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800570e:	00e2      	lsls	r2, r4, #3
 8005710:	4614      	mov	r4, r2
 8005712:	461d      	mov	r5, r3
 8005714:	4643      	mov	r3, r8
 8005716:	18e3      	adds	r3, r4, r3
 8005718:	603b      	str	r3, [r7, #0]
 800571a:	464b      	mov	r3, r9
 800571c:	eb45 0303 	adc.w	r3, r5, r3
 8005720:	607b      	str	r3, [r7, #4]
 8005722:	f04f 0200 	mov.w	r2, #0
 8005726:	f04f 0300 	mov.w	r3, #0
 800572a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800572e:	4629      	mov	r1, r5
 8005730:	028b      	lsls	r3, r1, #10
 8005732:	4621      	mov	r1, r4
 8005734:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005738:	4621      	mov	r1, r4
 800573a:	028a      	lsls	r2, r1, #10
 800573c:	4610      	mov	r0, r2
 800573e:	4619      	mov	r1, r3
 8005740:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005742:	2200      	movs	r2, #0
 8005744:	61bb      	str	r3, [r7, #24]
 8005746:	61fa      	str	r2, [r7, #28]
 8005748:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800574c:	f7fa fdd8 	bl	8000300 <__aeabi_uldivmod>
 8005750:	4602      	mov	r2, r0
 8005752:	460b      	mov	r3, r1
 8005754:	4613      	mov	r3, r2
 8005756:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005758:	4b0b      	ldr	r3, [pc, #44]	@ (8005788 <HAL_RCC_GetSysClockFreq+0x200>)
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	0c1b      	lsrs	r3, r3, #16
 800575e:	f003 0303 	and.w	r3, r3, #3
 8005762:	3301      	adds	r3, #1
 8005764:	005b      	lsls	r3, r3, #1
 8005766:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005768:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800576a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800576c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005770:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005772:	e002      	b.n	800577a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005774:	4b05      	ldr	r3, [pc, #20]	@ (800578c <HAL_RCC_GetSysClockFreq+0x204>)
 8005776:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005778:	bf00      	nop
    }
  }
  return sysclockfreq;
 800577a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800577c:	4618      	mov	r0, r3
 800577e:	3750      	adds	r7, #80	@ 0x50
 8005780:	46bd      	mov	sp, r7
 8005782:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005786:	bf00      	nop
 8005788:	40023800 	.word	0x40023800
 800578c:	00f42400 	.word	0x00f42400
 8005790:	007a1200 	.word	0x007a1200

08005794 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005794:	b480      	push	{r7}
 8005796:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005798:	4b03      	ldr	r3, [pc, #12]	@ (80057a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800579a:	681b      	ldr	r3, [r3, #0]
}
 800579c:	4618      	mov	r0, r3
 800579e:	46bd      	mov	sp, r7
 80057a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a4:	4770      	bx	lr
 80057a6:	bf00      	nop
 80057a8:	2000004c 	.word	0x2000004c

080057ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80057b0:	f7ff fff0 	bl	8005794 <HAL_RCC_GetHCLKFreq>
 80057b4:	4602      	mov	r2, r0
 80057b6:	4b05      	ldr	r3, [pc, #20]	@ (80057cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80057b8:	689b      	ldr	r3, [r3, #8]
 80057ba:	0a9b      	lsrs	r3, r3, #10
 80057bc:	f003 0307 	and.w	r3, r3, #7
 80057c0:	4903      	ldr	r1, [pc, #12]	@ (80057d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80057c2:	5ccb      	ldrb	r3, [r1, r3]
 80057c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80057c8:	4618      	mov	r0, r3
 80057ca:	bd80      	pop	{r7, pc}
 80057cc:	40023800 	.word	0x40023800
 80057d0:	08008a5c 	.word	0x08008a5c

080057d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80057d8:	f7ff ffdc 	bl	8005794 <HAL_RCC_GetHCLKFreq>
 80057dc:	4602      	mov	r2, r0
 80057de:	4b05      	ldr	r3, [pc, #20]	@ (80057f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80057e0:	689b      	ldr	r3, [r3, #8]
 80057e2:	0b5b      	lsrs	r3, r3, #13
 80057e4:	f003 0307 	and.w	r3, r3, #7
 80057e8:	4903      	ldr	r1, [pc, #12]	@ (80057f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80057ea:	5ccb      	ldrb	r3, [r1, r3]
 80057ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80057f0:	4618      	mov	r0, r3
 80057f2:	bd80      	pop	{r7, pc}
 80057f4:	40023800 	.word	0x40023800
 80057f8:	08008a5c 	.word	0x08008a5c

080057fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b088      	sub	sp, #32
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005804:	2300      	movs	r3, #0
 8005806:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005808:	2300      	movs	r3, #0
 800580a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800580c:	2300      	movs	r3, #0
 800580e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005810:	2300      	movs	r3, #0
 8005812:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005814:	2300      	movs	r3, #0
 8005816:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f003 0301 	and.w	r3, r3, #1
 8005820:	2b00      	cmp	r3, #0
 8005822:	d012      	beq.n	800584a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005824:	4b69      	ldr	r3, [pc, #420]	@ (80059cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005826:	689b      	ldr	r3, [r3, #8]
 8005828:	4a68      	ldr	r2, [pc, #416]	@ (80059cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800582a:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800582e:	6093      	str	r3, [r2, #8]
 8005830:	4b66      	ldr	r3, [pc, #408]	@ (80059cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005832:	689a      	ldr	r2, [r3, #8]
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005838:	4964      	ldr	r1, [pc, #400]	@ (80059cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800583a:	4313      	orrs	r3, r2
 800583c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005842:	2b00      	cmp	r3, #0
 8005844:	d101      	bne.n	800584a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8005846:	2301      	movs	r3, #1
 8005848:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005852:	2b00      	cmp	r3, #0
 8005854:	d017      	beq.n	8005886 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005856:	4b5d      	ldr	r3, [pc, #372]	@ (80059cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005858:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800585c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005864:	4959      	ldr	r1, [pc, #356]	@ (80059cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005866:	4313      	orrs	r3, r2
 8005868:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005870:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005874:	d101      	bne.n	800587a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8005876:	2301      	movs	r3, #1
 8005878:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800587e:	2b00      	cmp	r3, #0
 8005880:	d101      	bne.n	8005886 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8005882:	2301      	movs	r3, #1
 8005884:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800588e:	2b00      	cmp	r3, #0
 8005890:	d017      	beq.n	80058c2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005892:	4b4e      	ldr	r3, [pc, #312]	@ (80059cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005894:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005898:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058a0:	494a      	ldr	r1, [pc, #296]	@ (80059cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058a2:	4313      	orrs	r3, r2
 80058a4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058ac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80058b0:	d101      	bne.n	80058b6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80058b2:	2301      	movs	r3, #1
 80058b4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d101      	bne.n	80058c2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80058be:	2301      	movs	r3, #1
 80058c0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d001      	beq.n	80058d2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80058ce:	2301      	movs	r3, #1
 80058d0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f003 0320 	and.w	r3, r3, #32
 80058da:	2b00      	cmp	r3, #0
 80058dc:	f000 808b 	beq.w	80059f6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80058e0:	4b3a      	ldr	r3, [pc, #232]	@ (80059cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058e4:	4a39      	ldr	r2, [pc, #228]	@ (80059cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80058ea:	6413      	str	r3, [r2, #64]	@ 0x40
 80058ec:	4b37      	ldr	r3, [pc, #220]	@ (80059cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80058f4:	60bb      	str	r3, [r7, #8]
 80058f6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80058f8:	4b35      	ldr	r3, [pc, #212]	@ (80059d0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4a34      	ldr	r2, [pc, #208]	@ (80059d0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80058fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005902:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005904:	f7fd fddc 	bl	80034c0 <HAL_GetTick>
 8005908:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800590a:	e008      	b.n	800591e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800590c:	f7fd fdd8 	bl	80034c0 <HAL_GetTick>
 8005910:	4602      	mov	r2, r0
 8005912:	697b      	ldr	r3, [r7, #20]
 8005914:	1ad3      	subs	r3, r2, r3
 8005916:	2b64      	cmp	r3, #100	@ 0x64
 8005918:	d901      	bls.n	800591e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800591a:	2303      	movs	r3, #3
 800591c:	e38f      	b.n	800603e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800591e:	4b2c      	ldr	r3, [pc, #176]	@ (80059d0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005926:	2b00      	cmp	r3, #0
 8005928:	d0f0      	beq.n	800590c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800592a:	4b28      	ldr	r3, [pc, #160]	@ (80059cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800592c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800592e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005932:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005934:	693b      	ldr	r3, [r7, #16]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d035      	beq.n	80059a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800593e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005942:	693a      	ldr	r2, [r7, #16]
 8005944:	429a      	cmp	r2, r3
 8005946:	d02e      	beq.n	80059a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005948:	4b20      	ldr	r3, [pc, #128]	@ (80059cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800594a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800594c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005950:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005952:	4b1e      	ldr	r3, [pc, #120]	@ (80059cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005954:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005956:	4a1d      	ldr	r2, [pc, #116]	@ (80059cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005958:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800595c:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800595e:	4b1b      	ldr	r3, [pc, #108]	@ (80059cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005960:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005962:	4a1a      	ldr	r2, [pc, #104]	@ (80059cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005964:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005968:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800596a:	4a18      	ldr	r2, [pc, #96]	@ (80059cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005970:	4b16      	ldr	r3, [pc, #88]	@ (80059cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005972:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005974:	f003 0301 	and.w	r3, r3, #1
 8005978:	2b01      	cmp	r3, #1
 800597a:	d114      	bne.n	80059a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800597c:	f7fd fda0 	bl	80034c0 <HAL_GetTick>
 8005980:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005982:	e00a      	b.n	800599a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005984:	f7fd fd9c 	bl	80034c0 <HAL_GetTick>
 8005988:	4602      	mov	r2, r0
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	1ad3      	subs	r3, r2, r3
 800598e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005992:	4293      	cmp	r3, r2
 8005994:	d901      	bls.n	800599a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8005996:	2303      	movs	r3, #3
 8005998:	e351      	b.n	800603e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800599a:	4b0c      	ldr	r3, [pc, #48]	@ (80059cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800599c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800599e:	f003 0302 	and.w	r3, r3, #2
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d0ee      	beq.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80059ae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80059b2:	d111      	bne.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80059b4:	4b05      	ldr	r3, [pc, #20]	@ (80059cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059b6:	689b      	ldr	r3, [r3, #8]
 80059b8:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80059c0:	4b04      	ldr	r3, [pc, #16]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80059c2:	400b      	ands	r3, r1
 80059c4:	4901      	ldr	r1, [pc, #4]	@ (80059cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059c6:	4313      	orrs	r3, r2
 80059c8:	608b      	str	r3, [r1, #8]
 80059ca:	e00b      	b.n	80059e4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80059cc:	40023800 	.word	0x40023800
 80059d0:	40007000 	.word	0x40007000
 80059d4:	0ffffcff 	.word	0x0ffffcff
 80059d8:	4bac      	ldr	r3, [pc, #688]	@ (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80059da:	689b      	ldr	r3, [r3, #8]
 80059dc:	4aab      	ldr	r2, [pc, #684]	@ (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80059de:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80059e2:	6093      	str	r3, [r2, #8]
 80059e4:	4ba9      	ldr	r3, [pc, #676]	@ (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80059e6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059f0:	49a6      	ldr	r1, [pc, #664]	@ (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80059f2:	4313      	orrs	r3, r2
 80059f4:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f003 0310 	and.w	r3, r3, #16
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d010      	beq.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005a02:	4ba2      	ldr	r3, [pc, #648]	@ (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a04:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005a08:	4aa0      	ldr	r2, [pc, #640]	@ (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a0a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005a0e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8005a12:	4b9e      	ldr	r3, [pc, #632]	@ (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a14:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a1c:	499b      	ldr	r1, [pc, #620]	@ (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d00a      	beq.n	8005a46 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005a30:	4b96      	ldr	r3, [pc, #600]	@ (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a36:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005a3e:	4993      	ldr	r1, [pc, #588]	@ (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a40:	4313      	orrs	r3, r2
 8005a42:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d00a      	beq.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005a52:	4b8e      	ldr	r3, [pc, #568]	@ (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a58:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005a60:	498a      	ldr	r1, [pc, #552]	@ (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a62:	4313      	orrs	r3, r2
 8005a64:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d00a      	beq.n	8005a8a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005a74:	4b85      	ldr	r3, [pc, #532]	@ (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a7a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005a82:	4982      	ldr	r1, [pc, #520]	@ (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a84:	4313      	orrs	r3, r2
 8005a86:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d00a      	beq.n	8005aac <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005a96:	4b7d      	ldr	r3, [pc, #500]	@ (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a9c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005aa4:	4979      	ldr	r1, [pc, #484]	@ (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d00a      	beq.n	8005ace <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005ab8:	4b74      	ldr	r3, [pc, #464]	@ (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005aba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005abe:	f023 0203 	bic.w	r2, r3, #3
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ac6:	4971      	ldr	r1, [pc, #452]	@ (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005ac8:	4313      	orrs	r3, r2
 8005aca:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d00a      	beq.n	8005af0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005ada:	4b6c      	ldr	r3, [pc, #432]	@ (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005adc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ae0:	f023 020c 	bic.w	r2, r3, #12
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ae8:	4968      	ldr	r1, [pc, #416]	@ (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005aea:	4313      	orrs	r3, r2
 8005aec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d00a      	beq.n	8005b12 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005afc:	4b63      	ldr	r3, [pc, #396]	@ (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005afe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b02:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b0a:	4960      	ldr	r1, [pc, #384]	@ (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b0c:	4313      	orrs	r3, r2
 8005b0e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d00a      	beq.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005b1e:	4b5b      	ldr	r3, [pc, #364]	@ (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b24:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b2c:	4957      	ldr	r1, [pc, #348]	@ (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b2e:	4313      	orrs	r3, r2
 8005b30:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d00a      	beq.n	8005b56 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005b40:	4b52      	ldr	r3, [pc, #328]	@ (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b46:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b4e:	494f      	ldr	r1, [pc, #316]	@ (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b50:	4313      	orrs	r3, r2
 8005b52:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d00a      	beq.n	8005b78 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005b62:	4b4a      	ldr	r3, [pc, #296]	@ (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b68:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b70:	4946      	ldr	r1, [pc, #280]	@ (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b72:	4313      	orrs	r3, r2
 8005b74:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d00a      	beq.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005b84:	4b41      	ldr	r3, [pc, #260]	@ (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b8a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b92:	493e      	ldr	r1, [pc, #248]	@ (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b94:	4313      	orrs	r3, r2
 8005b96:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d00a      	beq.n	8005bbc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005ba6:	4b39      	ldr	r3, [pc, #228]	@ (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005ba8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005bac:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005bb4:	4935      	ldr	r1, [pc, #212]	@ (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d00a      	beq.n	8005bde <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005bc8:	4b30      	ldr	r3, [pc, #192]	@ (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005bca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005bce:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005bd6:	492d      	ldr	r1, [pc, #180]	@ (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005bd8:	4313      	orrs	r3, r2
 8005bda:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d011      	beq.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005bea:	4b28      	ldr	r3, [pc, #160]	@ (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005bec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005bf0:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005bf8:	4924      	ldr	r1, [pc, #144]	@ (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005c04:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005c08:	d101      	bne.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f003 0308 	and.w	r3, r3, #8
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d001      	beq.n	8005c1e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d00a      	beq.n	8005c40 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005c2a:	4b18      	ldr	r3, [pc, #96]	@ (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005c2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c30:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c38:	4914      	ldr	r1, [pc, #80]	@ (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d00b      	beq.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005c4c:	4b0f      	ldr	r3, [pc, #60]	@ (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005c4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c52:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005c5c:	490b      	ldr	r1, [pc, #44]	@ (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005c5e:	4313      	orrs	r3, r2
 8005c60:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d00f      	beq.n	8005c90 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8005c70:	4b06      	ldr	r3, [pc, #24]	@ (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005c72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c76:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005c80:	4902      	ldr	r1, [pc, #8]	@ (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005c82:	4313      	orrs	r3, r2
 8005c84:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005c88:	e002      	b.n	8005c90 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8005c8a:	bf00      	nop
 8005c8c:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d00b      	beq.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005c9c:	4b8a      	ldr	r3, [pc, #552]	@ (8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005c9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005ca2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cac:	4986      	ldr	r1, [pc, #536]	@ (8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d00b      	beq.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005cc0:	4b81      	ldr	r3, [pc, #516]	@ (8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005cc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005cc6:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005cd0:	497d      	ldr	r1, [pc, #500]	@ (8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005cd2:	4313      	orrs	r3, r2
 8005cd4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005cd8:	69fb      	ldr	r3, [r7, #28]
 8005cda:	2b01      	cmp	r3, #1
 8005cdc:	d006      	beq.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	f000 80d6 	beq.w	8005e98 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005cec:	4b76      	ldr	r3, [pc, #472]	@ (8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4a75      	ldr	r2, [pc, #468]	@ (8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005cf2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005cf6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005cf8:	f7fd fbe2 	bl	80034c0 <HAL_GetTick>
 8005cfc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005cfe:	e008      	b.n	8005d12 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005d00:	f7fd fbde 	bl	80034c0 <HAL_GetTick>
 8005d04:	4602      	mov	r2, r0
 8005d06:	697b      	ldr	r3, [r7, #20]
 8005d08:	1ad3      	subs	r3, r2, r3
 8005d0a:	2b64      	cmp	r3, #100	@ 0x64
 8005d0c:	d901      	bls.n	8005d12 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005d0e:	2303      	movs	r3, #3
 8005d10:	e195      	b.n	800603e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005d12:	4b6d      	ldr	r3, [pc, #436]	@ (8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d1f0      	bne.n	8005d00 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f003 0301 	and.w	r3, r3, #1
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d021      	beq.n	8005d6e <HAL_RCCEx_PeriphCLKConfig+0x572>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d11d      	bne.n	8005d6e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005d32:	4b65      	ldr	r3, [pc, #404]	@ (8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005d34:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005d38:	0c1b      	lsrs	r3, r3, #16
 8005d3a:	f003 0303 	and.w	r3, r3, #3
 8005d3e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005d40:	4b61      	ldr	r3, [pc, #388]	@ (8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005d42:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005d46:	0e1b      	lsrs	r3, r3, #24
 8005d48:	f003 030f 	and.w	r3, r3, #15
 8005d4c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	019a      	lsls	r2, r3, #6
 8005d54:	693b      	ldr	r3, [r7, #16]
 8005d56:	041b      	lsls	r3, r3, #16
 8005d58:	431a      	orrs	r2, r3
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	061b      	lsls	r3, r3, #24
 8005d5e:	431a      	orrs	r2, r3
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	689b      	ldr	r3, [r3, #8]
 8005d64:	071b      	lsls	r3, r3, #28
 8005d66:	4958      	ldr	r1, [pc, #352]	@ (8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005d68:	4313      	orrs	r3, r2
 8005d6a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d004      	beq.n	8005d84 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d7e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005d82:	d00a      	beq.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d02e      	beq.n	8005dee <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d94:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005d98:	d129      	bne.n	8005dee <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005d9a:	4b4b      	ldr	r3, [pc, #300]	@ (8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005d9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005da0:	0c1b      	lsrs	r3, r3, #16
 8005da2:	f003 0303 	and.w	r3, r3, #3
 8005da6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005da8:	4b47      	ldr	r3, [pc, #284]	@ (8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005daa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005dae:	0f1b      	lsrs	r3, r3, #28
 8005db0:	f003 0307 	and.w	r3, r3, #7
 8005db4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	019a      	lsls	r2, r3, #6
 8005dbc:	693b      	ldr	r3, [r7, #16]
 8005dbe:	041b      	lsls	r3, r3, #16
 8005dc0:	431a      	orrs	r2, r3
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	68db      	ldr	r3, [r3, #12]
 8005dc6:	061b      	lsls	r3, r3, #24
 8005dc8:	431a      	orrs	r2, r3
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	071b      	lsls	r3, r3, #28
 8005dce:	493e      	ldr	r1, [pc, #248]	@ (8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005dd0:	4313      	orrs	r3, r2
 8005dd2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005dd6:	4b3c      	ldr	r3, [pc, #240]	@ (8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005dd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005ddc:	f023 021f 	bic.w	r2, r3, #31
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005de4:	3b01      	subs	r3, #1
 8005de6:	4938      	ldr	r1, [pc, #224]	@ (8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005de8:	4313      	orrs	r3, r2
 8005dea:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d01d      	beq.n	8005e36 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005dfa:	4b33      	ldr	r3, [pc, #204]	@ (8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005dfc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005e00:	0e1b      	lsrs	r3, r3, #24
 8005e02:	f003 030f 	and.w	r3, r3, #15
 8005e06:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005e08:	4b2f      	ldr	r3, [pc, #188]	@ (8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005e0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005e0e:	0f1b      	lsrs	r3, r3, #28
 8005e10:	f003 0307 	and.w	r3, r3, #7
 8005e14:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	019a      	lsls	r2, r3, #6
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	691b      	ldr	r3, [r3, #16]
 8005e20:	041b      	lsls	r3, r3, #16
 8005e22:	431a      	orrs	r2, r3
 8005e24:	693b      	ldr	r3, [r7, #16]
 8005e26:	061b      	lsls	r3, r3, #24
 8005e28:	431a      	orrs	r2, r3
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	071b      	lsls	r3, r3, #28
 8005e2e:	4926      	ldr	r1, [pc, #152]	@ (8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005e30:	4313      	orrs	r3, r2
 8005e32:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d011      	beq.n	8005e66 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	019a      	lsls	r2, r3, #6
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	691b      	ldr	r3, [r3, #16]
 8005e4c:	041b      	lsls	r3, r3, #16
 8005e4e:	431a      	orrs	r2, r3
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	68db      	ldr	r3, [r3, #12]
 8005e54:	061b      	lsls	r3, r3, #24
 8005e56:	431a      	orrs	r2, r3
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	689b      	ldr	r3, [r3, #8]
 8005e5c:	071b      	lsls	r3, r3, #28
 8005e5e:	491a      	ldr	r1, [pc, #104]	@ (8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005e60:	4313      	orrs	r3, r2
 8005e62:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005e66:	4b18      	ldr	r3, [pc, #96]	@ (8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4a17      	ldr	r2, [pc, #92]	@ (8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005e6c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005e70:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e72:	f7fd fb25 	bl	80034c0 <HAL_GetTick>
 8005e76:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005e78:	e008      	b.n	8005e8c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005e7a:	f7fd fb21 	bl	80034c0 <HAL_GetTick>
 8005e7e:	4602      	mov	r2, r0
 8005e80:	697b      	ldr	r3, [r7, #20]
 8005e82:	1ad3      	subs	r3, r2, r3
 8005e84:	2b64      	cmp	r3, #100	@ 0x64
 8005e86:	d901      	bls.n	8005e8c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005e88:	2303      	movs	r3, #3
 8005e8a:	e0d8      	b.n	800603e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005e8c:	4b0e      	ldr	r3, [pc, #56]	@ (8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d0f0      	beq.n	8005e7a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005e98:	69bb      	ldr	r3, [r7, #24]
 8005e9a:	2b01      	cmp	r3, #1
 8005e9c:	f040 80ce 	bne.w	800603c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005ea0:	4b09      	ldr	r3, [pc, #36]	@ (8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4a08      	ldr	r2, [pc, #32]	@ (8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005ea6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005eaa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005eac:	f7fd fb08 	bl	80034c0 <HAL_GetTick>
 8005eb0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005eb2:	e00b      	b.n	8005ecc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005eb4:	f7fd fb04 	bl	80034c0 <HAL_GetTick>
 8005eb8:	4602      	mov	r2, r0
 8005eba:	697b      	ldr	r3, [r7, #20]
 8005ebc:	1ad3      	subs	r3, r2, r3
 8005ebe:	2b64      	cmp	r3, #100	@ 0x64
 8005ec0:	d904      	bls.n	8005ecc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005ec2:	2303      	movs	r3, #3
 8005ec4:	e0bb      	b.n	800603e <HAL_RCCEx_PeriphCLKConfig+0x842>
 8005ec6:	bf00      	nop
 8005ec8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005ecc:	4b5e      	ldr	r3, [pc, #376]	@ (8006048 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005ed4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005ed8:	d0ec      	beq.n	8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d003      	beq.n	8005eee <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d009      	beq.n	8005f02 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d02e      	beq.n	8005f58 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d12a      	bne.n	8005f58 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005f02:	4b51      	ldr	r3, [pc, #324]	@ (8006048 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005f04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f08:	0c1b      	lsrs	r3, r3, #16
 8005f0a:	f003 0303 	and.w	r3, r3, #3
 8005f0e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005f10:	4b4d      	ldr	r3, [pc, #308]	@ (8006048 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f16:	0f1b      	lsrs	r3, r3, #28
 8005f18:	f003 0307 	and.w	r3, r3, #7
 8005f1c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	695b      	ldr	r3, [r3, #20]
 8005f22:	019a      	lsls	r2, r3, #6
 8005f24:	693b      	ldr	r3, [r7, #16]
 8005f26:	041b      	lsls	r3, r3, #16
 8005f28:	431a      	orrs	r2, r3
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	699b      	ldr	r3, [r3, #24]
 8005f2e:	061b      	lsls	r3, r3, #24
 8005f30:	431a      	orrs	r2, r3
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	071b      	lsls	r3, r3, #28
 8005f36:	4944      	ldr	r1, [pc, #272]	@ (8006048 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005f38:	4313      	orrs	r3, r2
 8005f3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005f3e:	4b42      	ldr	r3, [pc, #264]	@ (8006048 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005f40:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005f44:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f4c:	3b01      	subs	r3, #1
 8005f4e:	021b      	lsls	r3, r3, #8
 8005f50:	493d      	ldr	r1, [pc, #244]	@ (8006048 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005f52:	4313      	orrs	r3, r2
 8005f54:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d022      	beq.n	8005faa <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005f68:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005f6c:	d11d      	bne.n	8005faa <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005f6e:	4b36      	ldr	r3, [pc, #216]	@ (8006048 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005f70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f74:	0e1b      	lsrs	r3, r3, #24
 8005f76:	f003 030f 	and.w	r3, r3, #15
 8005f7a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005f7c:	4b32      	ldr	r3, [pc, #200]	@ (8006048 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f82:	0f1b      	lsrs	r3, r3, #28
 8005f84:	f003 0307 	and.w	r3, r3, #7
 8005f88:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	695b      	ldr	r3, [r3, #20]
 8005f8e:	019a      	lsls	r2, r3, #6
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6a1b      	ldr	r3, [r3, #32]
 8005f94:	041b      	lsls	r3, r3, #16
 8005f96:	431a      	orrs	r2, r3
 8005f98:	693b      	ldr	r3, [r7, #16]
 8005f9a:	061b      	lsls	r3, r3, #24
 8005f9c:	431a      	orrs	r2, r3
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	071b      	lsls	r3, r3, #28
 8005fa2:	4929      	ldr	r1, [pc, #164]	@ (8006048 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005fa4:	4313      	orrs	r3, r2
 8005fa6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f003 0308 	and.w	r3, r3, #8
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d028      	beq.n	8006008 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005fb6:	4b24      	ldr	r3, [pc, #144]	@ (8006048 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005fb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fbc:	0e1b      	lsrs	r3, r3, #24
 8005fbe:	f003 030f 	and.w	r3, r3, #15
 8005fc2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005fc4:	4b20      	ldr	r3, [pc, #128]	@ (8006048 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fca:	0c1b      	lsrs	r3, r3, #16
 8005fcc:	f003 0303 	and.w	r3, r3, #3
 8005fd0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	695b      	ldr	r3, [r3, #20]
 8005fd6:	019a      	lsls	r2, r3, #6
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	041b      	lsls	r3, r3, #16
 8005fdc:	431a      	orrs	r2, r3
 8005fde:	693b      	ldr	r3, [r7, #16]
 8005fe0:	061b      	lsls	r3, r3, #24
 8005fe2:	431a      	orrs	r2, r3
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	69db      	ldr	r3, [r3, #28]
 8005fe8:	071b      	lsls	r3, r3, #28
 8005fea:	4917      	ldr	r1, [pc, #92]	@ (8006048 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005fec:	4313      	orrs	r3, r2
 8005fee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005ff2:	4b15      	ldr	r3, [pc, #84]	@ (8006048 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005ff4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005ff8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006000:	4911      	ldr	r1, [pc, #68]	@ (8006048 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006002:	4313      	orrs	r3, r2
 8006004:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006008:	4b0f      	ldr	r3, [pc, #60]	@ (8006048 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a0e      	ldr	r2, [pc, #56]	@ (8006048 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800600e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006012:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006014:	f7fd fa54 	bl	80034c0 <HAL_GetTick>
 8006018:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800601a:	e008      	b.n	800602e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800601c:	f7fd fa50 	bl	80034c0 <HAL_GetTick>
 8006020:	4602      	mov	r2, r0
 8006022:	697b      	ldr	r3, [r7, #20]
 8006024:	1ad3      	subs	r3, r2, r3
 8006026:	2b64      	cmp	r3, #100	@ 0x64
 8006028:	d901      	bls.n	800602e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800602a:	2303      	movs	r3, #3
 800602c:	e007      	b.n	800603e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800602e:	4b06      	ldr	r3, [pc, #24]	@ (8006048 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006036:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800603a:	d1ef      	bne.n	800601c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 800603c:	2300      	movs	r3, #0
}
 800603e:	4618      	mov	r0, r3
 8006040:	3720      	adds	r7, #32
 8006042:	46bd      	mov	sp, r7
 8006044:	bd80      	pop	{r7, pc}
 8006046:	bf00      	nop
 8006048:	40023800 	.word	0x40023800

0800604c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b082      	sub	sp, #8
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d101      	bne.n	800605e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800605a:	2301      	movs	r3, #1
 800605c:	e049      	b.n	80060f2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006064:	b2db      	uxtb	r3, r3
 8006066:	2b00      	cmp	r3, #0
 8006068:	d106      	bne.n	8006078 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2200      	movs	r2, #0
 800606e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	f7fc fe54 	bl	8002d20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2202      	movs	r2, #2
 800607c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681a      	ldr	r2, [r3, #0]
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	3304      	adds	r3, #4
 8006088:	4619      	mov	r1, r3
 800608a:	4610      	mov	r0, r2
 800608c:	f000 f9a8 	bl	80063e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2201      	movs	r2, #1
 8006094:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2201      	movs	r2, #1
 800609c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2201      	movs	r2, #1
 80060a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2201      	movs	r2, #1
 80060ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2201      	movs	r2, #1
 80060b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2201      	movs	r2, #1
 80060bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2201      	movs	r2, #1
 80060c4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2201      	movs	r2, #1
 80060cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2201      	movs	r2, #1
 80060d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2201      	movs	r2, #1
 80060dc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2201      	movs	r2, #1
 80060e4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2201      	movs	r2, #1
 80060ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80060f0:	2300      	movs	r3, #0
}
 80060f2:	4618      	mov	r0, r3
 80060f4:	3708      	adds	r7, #8
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bd80      	pop	{r7, pc}
	...

080060fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80060fc:	b480      	push	{r7}
 80060fe:	b085      	sub	sp, #20
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800610a:	b2db      	uxtb	r3, r3
 800610c:	2b01      	cmp	r3, #1
 800610e:	d001      	beq.n	8006114 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006110:	2301      	movs	r3, #1
 8006112:	e054      	b.n	80061be <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2202      	movs	r2, #2
 8006118:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	68da      	ldr	r2, [r3, #12]
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f042 0201 	orr.w	r2, r2, #1
 800612a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4a26      	ldr	r2, [pc, #152]	@ (80061cc <HAL_TIM_Base_Start_IT+0xd0>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d022      	beq.n	800617c <HAL_TIM_Base_Start_IT+0x80>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800613e:	d01d      	beq.n	800617c <HAL_TIM_Base_Start_IT+0x80>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a22      	ldr	r2, [pc, #136]	@ (80061d0 <HAL_TIM_Base_Start_IT+0xd4>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d018      	beq.n	800617c <HAL_TIM_Base_Start_IT+0x80>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4a21      	ldr	r2, [pc, #132]	@ (80061d4 <HAL_TIM_Base_Start_IT+0xd8>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d013      	beq.n	800617c <HAL_TIM_Base_Start_IT+0x80>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4a1f      	ldr	r2, [pc, #124]	@ (80061d8 <HAL_TIM_Base_Start_IT+0xdc>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d00e      	beq.n	800617c <HAL_TIM_Base_Start_IT+0x80>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4a1e      	ldr	r2, [pc, #120]	@ (80061dc <HAL_TIM_Base_Start_IT+0xe0>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d009      	beq.n	800617c <HAL_TIM_Base_Start_IT+0x80>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4a1c      	ldr	r2, [pc, #112]	@ (80061e0 <HAL_TIM_Base_Start_IT+0xe4>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d004      	beq.n	800617c <HAL_TIM_Base_Start_IT+0x80>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	4a1b      	ldr	r2, [pc, #108]	@ (80061e4 <HAL_TIM_Base_Start_IT+0xe8>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d115      	bne.n	80061a8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	689a      	ldr	r2, [r3, #8]
 8006182:	4b19      	ldr	r3, [pc, #100]	@ (80061e8 <HAL_TIM_Base_Start_IT+0xec>)
 8006184:	4013      	ands	r3, r2
 8006186:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	2b06      	cmp	r3, #6
 800618c:	d015      	beq.n	80061ba <HAL_TIM_Base_Start_IT+0xbe>
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006194:	d011      	beq.n	80061ba <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	681a      	ldr	r2, [r3, #0]
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f042 0201 	orr.w	r2, r2, #1
 80061a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061a6:	e008      	b.n	80061ba <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	681a      	ldr	r2, [r3, #0]
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f042 0201 	orr.w	r2, r2, #1
 80061b6:	601a      	str	r2, [r3, #0]
 80061b8:	e000      	b.n	80061bc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061ba:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80061bc:	2300      	movs	r3, #0
}
 80061be:	4618      	mov	r0, r3
 80061c0:	3714      	adds	r7, #20
 80061c2:	46bd      	mov	sp, r7
 80061c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c8:	4770      	bx	lr
 80061ca:	bf00      	nop
 80061cc:	40010000 	.word	0x40010000
 80061d0:	40000400 	.word	0x40000400
 80061d4:	40000800 	.word	0x40000800
 80061d8:	40000c00 	.word	0x40000c00
 80061dc:	40010400 	.word	0x40010400
 80061e0:	40014000 	.word	0x40014000
 80061e4:	40001800 	.word	0x40001800
 80061e8:	00010007 	.word	0x00010007

080061ec <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80061ec:	b480      	push	{r7}
 80061ee:	b083      	sub	sp, #12
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	68da      	ldr	r2, [r3, #12]
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f022 0201 	bic.w	r2, r2, #1
 8006202:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	6a1a      	ldr	r2, [r3, #32]
 800620a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800620e:	4013      	ands	r3, r2
 8006210:	2b00      	cmp	r3, #0
 8006212:	d10f      	bne.n	8006234 <HAL_TIM_Base_Stop_IT+0x48>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	6a1a      	ldr	r2, [r3, #32]
 800621a:	f240 4344 	movw	r3, #1092	@ 0x444
 800621e:	4013      	ands	r3, r2
 8006220:	2b00      	cmp	r3, #0
 8006222:	d107      	bne.n	8006234 <HAL_TIM_Base_Stop_IT+0x48>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	681a      	ldr	r2, [r3, #0]
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f022 0201 	bic.w	r2, r2, #1
 8006232:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2201      	movs	r2, #1
 8006238:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800623c:	2300      	movs	r3, #0
}
 800623e:	4618      	mov	r0, r3
 8006240:	370c      	adds	r7, #12
 8006242:	46bd      	mov	sp, r7
 8006244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006248:	4770      	bx	lr
	...

0800624c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b084      	sub	sp, #16
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
 8006254:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006256:	2300      	movs	r3, #0
 8006258:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006260:	2b01      	cmp	r3, #1
 8006262:	d101      	bne.n	8006268 <HAL_TIM_ConfigClockSource+0x1c>
 8006264:	2302      	movs	r3, #2
 8006266:	e0b4      	b.n	80063d2 <HAL_TIM_ConfigClockSource+0x186>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2201      	movs	r2, #1
 800626c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2202      	movs	r2, #2
 8006274:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	689b      	ldr	r3, [r3, #8]
 800627e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006280:	68ba      	ldr	r2, [r7, #8]
 8006282:	4b56      	ldr	r3, [pc, #344]	@ (80063dc <HAL_TIM_ConfigClockSource+0x190>)
 8006284:	4013      	ands	r3, r2
 8006286:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800628e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	68ba      	ldr	r2, [r7, #8]
 8006296:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80062a0:	d03e      	beq.n	8006320 <HAL_TIM_ConfigClockSource+0xd4>
 80062a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80062a6:	f200 8087 	bhi.w	80063b8 <HAL_TIM_ConfigClockSource+0x16c>
 80062aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80062ae:	f000 8086 	beq.w	80063be <HAL_TIM_ConfigClockSource+0x172>
 80062b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80062b6:	d87f      	bhi.n	80063b8 <HAL_TIM_ConfigClockSource+0x16c>
 80062b8:	2b70      	cmp	r3, #112	@ 0x70
 80062ba:	d01a      	beq.n	80062f2 <HAL_TIM_ConfigClockSource+0xa6>
 80062bc:	2b70      	cmp	r3, #112	@ 0x70
 80062be:	d87b      	bhi.n	80063b8 <HAL_TIM_ConfigClockSource+0x16c>
 80062c0:	2b60      	cmp	r3, #96	@ 0x60
 80062c2:	d050      	beq.n	8006366 <HAL_TIM_ConfigClockSource+0x11a>
 80062c4:	2b60      	cmp	r3, #96	@ 0x60
 80062c6:	d877      	bhi.n	80063b8 <HAL_TIM_ConfigClockSource+0x16c>
 80062c8:	2b50      	cmp	r3, #80	@ 0x50
 80062ca:	d03c      	beq.n	8006346 <HAL_TIM_ConfigClockSource+0xfa>
 80062cc:	2b50      	cmp	r3, #80	@ 0x50
 80062ce:	d873      	bhi.n	80063b8 <HAL_TIM_ConfigClockSource+0x16c>
 80062d0:	2b40      	cmp	r3, #64	@ 0x40
 80062d2:	d058      	beq.n	8006386 <HAL_TIM_ConfigClockSource+0x13a>
 80062d4:	2b40      	cmp	r3, #64	@ 0x40
 80062d6:	d86f      	bhi.n	80063b8 <HAL_TIM_ConfigClockSource+0x16c>
 80062d8:	2b30      	cmp	r3, #48	@ 0x30
 80062da:	d064      	beq.n	80063a6 <HAL_TIM_ConfigClockSource+0x15a>
 80062dc:	2b30      	cmp	r3, #48	@ 0x30
 80062de:	d86b      	bhi.n	80063b8 <HAL_TIM_ConfigClockSource+0x16c>
 80062e0:	2b20      	cmp	r3, #32
 80062e2:	d060      	beq.n	80063a6 <HAL_TIM_ConfigClockSource+0x15a>
 80062e4:	2b20      	cmp	r3, #32
 80062e6:	d867      	bhi.n	80063b8 <HAL_TIM_ConfigClockSource+0x16c>
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d05c      	beq.n	80063a6 <HAL_TIM_ConfigClockSource+0x15a>
 80062ec:	2b10      	cmp	r3, #16
 80062ee:	d05a      	beq.n	80063a6 <HAL_TIM_ConfigClockSource+0x15a>
 80062f0:	e062      	b.n	80063b8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006302:	f000 f993 	bl	800662c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	689b      	ldr	r3, [r3, #8]
 800630c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006314:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	68ba      	ldr	r2, [r7, #8]
 800631c:	609a      	str	r2, [r3, #8]
      break;
 800631e:	e04f      	b.n	80063c0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006330:	f000 f97c 	bl	800662c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	689a      	ldr	r2, [r3, #8]
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006342:	609a      	str	r2, [r3, #8]
      break;
 8006344:	e03c      	b.n	80063c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006352:	461a      	mov	r2, r3
 8006354:	f000 f8f0 	bl	8006538 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	2150      	movs	r1, #80	@ 0x50
 800635e:	4618      	mov	r0, r3
 8006360:	f000 f949 	bl	80065f6 <TIM_ITRx_SetConfig>
      break;
 8006364:	e02c      	b.n	80063c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006372:	461a      	mov	r2, r3
 8006374:	f000 f90f 	bl	8006596 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	2160      	movs	r1, #96	@ 0x60
 800637e:	4618      	mov	r0, r3
 8006380:	f000 f939 	bl	80065f6 <TIM_ITRx_SetConfig>
      break;
 8006384:	e01c      	b.n	80063c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006392:	461a      	mov	r2, r3
 8006394:	f000 f8d0 	bl	8006538 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	2140      	movs	r1, #64	@ 0x40
 800639e:	4618      	mov	r0, r3
 80063a0:	f000 f929 	bl	80065f6 <TIM_ITRx_SetConfig>
      break;
 80063a4:	e00c      	b.n	80063c0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681a      	ldr	r2, [r3, #0]
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	4619      	mov	r1, r3
 80063b0:	4610      	mov	r0, r2
 80063b2:	f000 f920 	bl	80065f6 <TIM_ITRx_SetConfig>
      break;
 80063b6:	e003      	b.n	80063c0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80063b8:	2301      	movs	r3, #1
 80063ba:	73fb      	strb	r3, [r7, #15]
      break;
 80063bc:	e000      	b.n	80063c0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80063be:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2201      	movs	r2, #1
 80063c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2200      	movs	r2, #0
 80063cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80063d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80063d2:	4618      	mov	r0, r3
 80063d4:	3710      	adds	r7, #16
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bd80      	pop	{r7, pc}
 80063da:	bf00      	nop
 80063dc:	fffeff88 	.word	0xfffeff88

080063e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80063e0:	b480      	push	{r7}
 80063e2:	b085      	sub	sp, #20
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
 80063e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	4a46      	ldr	r2, [pc, #280]	@ (800650c <TIM_Base_SetConfig+0x12c>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d013      	beq.n	8006420 <TIM_Base_SetConfig+0x40>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063fe:	d00f      	beq.n	8006420 <TIM_Base_SetConfig+0x40>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	4a43      	ldr	r2, [pc, #268]	@ (8006510 <TIM_Base_SetConfig+0x130>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d00b      	beq.n	8006420 <TIM_Base_SetConfig+0x40>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	4a42      	ldr	r2, [pc, #264]	@ (8006514 <TIM_Base_SetConfig+0x134>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d007      	beq.n	8006420 <TIM_Base_SetConfig+0x40>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	4a41      	ldr	r2, [pc, #260]	@ (8006518 <TIM_Base_SetConfig+0x138>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d003      	beq.n	8006420 <TIM_Base_SetConfig+0x40>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	4a40      	ldr	r2, [pc, #256]	@ (800651c <TIM_Base_SetConfig+0x13c>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d108      	bne.n	8006432 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006426:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	685b      	ldr	r3, [r3, #4]
 800642c:	68fa      	ldr	r2, [r7, #12]
 800642e:	4313      	orrs	r3, r2
 8006430:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	4a35      	ldr	r2, [pc, #212]	@ (800650c <TIM_Base_SetConfig+0x12c>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d02b      	beq.n	8006492 <TIM_Base_SetConfig+0xb2>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006440:	d027      	beq.n	8006492 <TIM_Base_SetConfig+0xb2>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	4a32      	ldr	r2, [pc, #200]	@ (8006510 <TIM_Base_SetConfig+0x130>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d023      	beq.n	8006492 <TIM_Base_SetConfig+0xb2>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	4a31      	ldr	r2, [pc, #196]	@ (8006514 <TIM_Base_SetConfig+0x134>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d01f      	beq.n	8006492 <TIM_Base_SetConfig+0xb2>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	4a30      	ldr	r2, [pc, #192]	@ (8006518 <TIM_Base_SetConfig+0x138>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d01b      	beq.n	8006492 <TIM_Base_SetConfig+0xb2>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	4a2f      	ldr	r2, [pc, #188]	@ (800651c <TIM_Base_SetConfig+0x13c>)
 800645e:	4293      	cmp	r3, r2
 8006460:	d017      	beq.n	8006492 <TIM_Base_SetConfig+0xb2>
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	4a2e      	ldr	r2, [pc, #184]	@ (8006520 <TIM_Base_SetConfig+0x140>)
 8006466:	4293      	cmp	r3, r2
 8006468:	d013      	beq.n	8006492 <TIM_Base_SetConfig+0xb2>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	4a2d      	ldr	r2, [pc, #180]	@ (8006524 <TIM_Base_SetConfig+0x144>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d00f      	beq.n	8006492 <TIM_Base_SetConfig+0xb2>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	4a2c      	ldr	r2, [pc, #176]	@ (8006528 <TIM_Base_SetConfig+0x148>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d00b      	beq.n	8006492 <TIM_Base_SetConfig+0xb2>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	4a2b      	ldr	r2, [pc, #172]	@ (800652c <TIM_Base_SetConfig+0x14c>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d007      	beq.n	8006492 <TIM_Base_SetConfig+0xb2>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	4a2a      	ldr	r2, [pc, #168]	@ (8006530 <TIM_Base_SetConfig+0x150>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d003      	beq.n	8006492 <TIM_Base_SetConfig+0xb2>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	4a29      	ldr	r2, [pc, #164]	@ (8006534 <TIM_Base_SetConfig+0x154>)
 800648e:	4293      	cmp	r3, r2
 8006490:	d108      	bne.n	80064a4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006498:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	68db      	ldr	r3, [r3, #12]
 800649e:	68fa      	ldr	r2, [r7, #12]
 80064a0:	4313      	orrs	r3, r2
 80064a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	695b      	ldr	r3, [r3, #20]
 80064ae:	4313      	orrs	r3, r2
 80064b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	68fa      	ldr	r2, [r7, #12]
 80064b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	689a      	ldr	r2, [r3, #8]
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	681a      	ldr	r2, [r3, #0]
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	4a10      	ldr	r2, [pc, #64]	@ (800650c <TIM_Base_SetConfig+0x12c>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d003      	beq.n	80064d8 <TIM_Base_SetConfig+0xf8>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	4a12      	ldr	r2, [pc, #72]	@ (800651c <TIM_Base_SetConfig+0x13c>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d103      	bne.n	80064e0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	691a      	ldr	r2, [r3, #16]
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2201      	movs	r2, #1
 80064e4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	691b      	ldr	r3, [r3, #16]
 80064ea:	f003 0301 	and.w	r3, r3, #1
 80064ee:	2b01      	cmp	r3, #1
 80064f0:	d105      	bne.n	80064fe <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	691b      	ldr	r3, [r3, #16]
 80064f6:	f023 0201 	bic.w	r2, r3, #1
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	611a      	str	r2, [r3, #16]
  }
}
 80064fe:	bf00      	nop
 8006500:	3714      	adds	r7, #20
 8006502:	46bd      	mov	sp, r7
 8006504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006508:	4770      	bx	lr
 800650a:	bf00      	nop
 800650c:	40010000 	.word	0x40010000
 8006510:	40000400 	.word	0x40000400
 8006514:	40000800 	.word	0x40000800
 8006518:	40000c00 	.word	0x40000c00
 800651c:	40010400 	.word	0x40010400
 8006520:	40014000 	.word	0x40014000
 8006524:	40014400 	.word	0x40014400
 8006528:	40014800 	.word	0x40014800
 800652c:	40001800 	.word	0x40001800
 8006530:	40001c00 	.word	0x40001c00
 8006534:	40002000 	.word	0x40002000

08006538 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006538:	b480      	push	{r7}
 800653a:	b087      	sub	sp, #28
 800653c:	af00      	add	r7, sp, #0
 800653e:	60f8      	str	r0, [r7, #12]
 8006540:	60b9      	str	r1, [r7, #8]
 8006542:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	6a1b      	ldr	r3, [r3, #32]
 8006548:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	6a1b      	ldr	r3, [r3, #32]
 800654e:	f023 0201 	bic.w	r2, r3, #1
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	699b      	ldr	r3, [r3, #24]
 800655a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800655c:	693b      	ldr	r3, [r7, #16]
 800655e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006562:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	011b      	lsls	r3, r3, #4
 8006568:	693a      	ldr	r2, [r7, #16]
 800656a:	4313      	orrs	r3, r2
 800656c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800656e:	697b      	ldr	r3, [r7, #20]
 8006570:	f023 030a 	bic.w	r3, r3, #10
 8006574:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006576:	697a      	ldr	r2, [r7, #20]
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	4313      	orrs	r3, r2
 800657c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	693a      	ldr	r2, [r7, #16]
 8006582:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	697a      	ldr	r2, [r7, #20]
 8006588:	621a      	str	r2, [r3, #32]
}
 800658a:	bf00      	nop
 800658c:	371c      	adds	r7, #28
 800658e:	46bd      	mov	sp, r7
 8006590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006594:	4770      	bx	lr

08006596 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006596:	b480      	push	{r7}
 8006598:	b087      	sub	sp, #28
 800659a:	af00      	add	r7, sp, #0
 800659c:	60f8      	str	r0, [r7, #12]
 800659e:	60b9      	str	r1, [r7, #8]
 80065a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	6a1b      	ldr	r3, [r3, #32]
 80065a6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	6a1b      	ldr	r3, [r3, #32]
 80065ac:	f023 0210 	bic.w	r2, r3, #16
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	699b      	ldr	r3, [r3, #24]
 80065b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80065ba:	693b      	ldr	r3, [r7, #16]
 80065bc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80065c0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	031b      	lsls	r3, r3, #12
 80065c6:	693a      	ldr	r2, [r7, #16]
 80065c8:	4313      	orrs	r3, r2
 80065ca:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80065cc:	697b      	ldr	r3, [r7, #20]
 80065ce:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80065d2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	011b      	lsls	r3, r3, #4
 80065d8:	697a      	ldr	r2, [r7, #20]
 80065da:	4313      	orrs	r3, r2
 80065dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	693a      	ldr	r2, [r7, #16]
 80065e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	697a      	ldr	r2, [r7, #20]
 80065e8:	621a      	str	r2, [r3, #32]
}
 80065ea:	bf00      	nop
 80065ec:	371c      	adds	r7, #28
 80065ee:	46bd      	mov	sp, r7
 80065f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f4:	4770      	bx	lr

080065f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80065f6:	b480      	push	{r7}
 80065f8:	b085      	sub	sp, #20
 80065fa:	af00      	add	r7, sp, #0
 80065fc:	6078      	str	r0, [r7, #4]
 80065fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	689b      	ldr	r3, [r3, #8]
 8006604:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800660c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800660e:	683a      	ldr	r2, [r7, #0]
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	4313      	orrs	r3, r2
 8006614:	f043 0307 	orr.w	r3, r3, #7
 8006618:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	68fa      	ldr	r2, [r7, #12]
 800661e:	609a      	str	r2, [r3, #8]
}
 8006620:	bf00      	nop
 8006622:	3714      	adds	r7, #20
 8006624:	46bd      	mov	sp, r7
 8006626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662a:	4770      	bx	lr

0800662c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800662c:	b480      	push	{r7}
 800662e:	b087      	sub	sp, #28
 8006630:	af00      	add	r7, sp, #0
 8006632:	60f8      	str	r0, [r7, #12]
 8006634:	60b9      	str	r1, [r7, #8]
 8006636:	607a      	str	r2, [r7, #4]
 8006638:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	689b      	ldr	r3, [r3, #8]
 800663e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006640:	697b      	ldr	r3, [r7, #20]
 8006642:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006646:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	021a      	lsls	r2, r3, #8
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	431a      	orrs	r2, r3
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	4313      	orrs	r3, r2
 8006654:	697a      	ldr	r2, [r7, #20]
 8006656:	4313      	orrs	r3, r2
 8006658:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	697a      	ldr	r2, [r7, #20]
 800665e:	609a      	str	r2, [r3, #8]
}
 8006660:	bf00      	nop
 8006662:	371c      	adds	r7, #28
 8006664:	46bd      	mov	sp, r7
 8006666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666a:	4770      	bx	lr

0800666c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800666c:	b480      	push	{r7}
 800666e:	b085      	sub	sp, #20
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
 8006674:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800667c:	2b01      	cmp	r3, #1
 800667e:	d101      	bne.n	8006684 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006680:	2302      	movs	r3, #2
 8006682:	e06d      	b.n	8006760 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2201      	movs	r2, #1
 8006688:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2202      	movs	r2, #2
 8006690:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	685b      	ldr	r3, [r3, #4]
 800669a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	689b      	ldr	r3, [r3, #8]
 80066a2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	4a30      	ldr	r2, [pc, #192]	@ (800676c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d004      	beq.n	80066b8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	4a2f      	ldr	r2, [pc, #188]	@ (8006770 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d108      	bne.n	80066ca <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80066be:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	685b      	ldr	r3, [r3, #4]
 80066c4:	68fa      	ldr	r2, [r7, #12]
 80066c6:	4313      	orrs	r3, r2
 80066c8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066d0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	68fa      	ldr	r2, [r7, #12]
 80066d8:	4313      	orrs	r3, r2
 80066da:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	68fa      	ldr	r2, [r7, #12]
 80066e2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	4a20      	ldr	r2, [pc, #128]	@ (800676c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d022      	beq.n	8006734 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80066f6:	d01d      	beq.n	8006734 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4a1d      	ldr	r2, [pc, #116]	@ (8006774 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d018      	beq.n	8006734 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	4a1c      	ldr	r2, [pc, #112]	@ (8006778 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006708:	4293      	cmp	r3, r2
 800670a:	d013      	beq.n	8006734 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4a1a      	ldr	r2, [pc, #104]	@ (800677c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d00e      	beq.n	8006734 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	4a15      	ldr	r2, [pc, #84]	@ (8006770 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800671c:	4293      	cmp	r3, r2
 800671e:	d009      	beq.n	8006734 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	4a16      	ldr	r2, [pc, #88]	@ (8006780 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006726:	4293      	cmp	r3, r2
 8006728:	d004      	beq.n	8006734 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	4a15      	ldr	r2, [pc, #84]	@ (8006784 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006730:	4293      	cmp	r3, r2
 8006732:	d10c      	bne.n	800674e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006734:	68bb      	ldr	r3, [r7, #8]
 8006736:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800673a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	689b      	ldr	r3, [r3, #8]
 8006740:	68ba      	ldr	r2, [r7, #8]
 8006742:	4313      	orrs	r3, r2
 8006744:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	68ba      	ldr	r2, [r7, #8]
 800674c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2201      	movs	r2, #1
 8006752:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2200      	movs	r2, #0
 800675a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800675e:	2300      	movs	r3, #0
}
 8006760:	4618      	mov	r0, r3
 8006762:	3714      	adds	r7, #20
 8006764:	46bd      	mov	sp, r7
 8006766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676a:	4770      	bx	lr
 800676c:	40010000 	.word	0x40010000
 8006770:	40010400 	.word	0x40010400
 8006774:	40000400 	.word	0x40000400
 8006778:	40000800 	.word	0x40000800
 800677c:	40000c00 	.word	0x40000c00
 8006780:	40014000 	.word	0x40014000
 8006784:	40001800 	.word	0x40001800

08006788 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b082      	sub	sp, #8
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d101      	bne.n	800679a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006796:	2301      	movs	r3, #1
 8006798:	e040      	b.n	800681c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d106      	bne.n	80067b0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2200      	movs	r2, #0
 80067a6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	f7fc fc76 	bl	800309c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2224      	movs	r2, #36	@ 0x24
 80067b4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	681a      	ldr	r2, [r3, #0]
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f022 0201 	bic.w	r2, r2, #1
 80067c4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d002      	beq.n	80067d4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80067ce:	6878      	ldr	r0, [r7, #4]
 80067d0:	f000 fe28 	bl	8007424 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80067d4:	6878      	ldr	r0, [r7, #4]
 80067d6:	f000 fbc1 	bl	8006f5c <UART_SetConfig>
 80067da:	4603      	mov	r3, r0
 80067dc:	2b01      	cmp	r3, #1
 80067de:	d101      	bne.n	80067e4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80067e0:	2301      	movs	r3, #1
 80067e2:	e01b      	b.n	800681c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	685a      	ldr	r2, [r3, #4]
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80067f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	689a      	ldr	r2, [r3, #8]
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006802:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	681a      	ldr	r2, [r3, #0]
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f042 0201 	orr.w	r2, r2, #1
 8006812:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006814:	6878      	ldr	r0, [r7, #4]
 8006816:	f000 fea7 	bl	8007568 <UART_CheckIdleState>
 800681a:	4603      	mov	r3, r0
}
 800681c:	4618      	mov	r0, r3
 800681e:	3708      	adds	r7, #8
 8006820:	46bd      	mov	sp, r7
 8006822:	bd80      	pop	{r7, pc}

08006824 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b08a      	sub	sp, #40	@ 0x28
 8006828:	af02      	add	r7, sp, #8
 800682a:	60f8      	str	r0, [r7, #12]
 800682c:	60b9      	str	r1, [r7, #8]
 800682e:	603b      	str	r3, [r7, #0]
 8006830:	4613      	mov	r3, r2
 8006832:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006838:	2b20      	cmp	r3, #32
 800683a:	d177      	bne.n	800692c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d002      	beq.n	8006848 <HAL_UART_Transmit+0x24>
 8006842:	88fb      	ldrh	r3, [r7, #6]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d101      	bne.n	800684c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006848:	2301      	movs	r3, #1
 800684a:	e070      	b.n	800692e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	2200      	movs	r2, #0
 8006850:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	2221      	movs	r2, #33	@ 0x21
 8006858:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800685a:	f7fc fe31 	bl	80034c0 <HAL_GetTick>
 800685e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	88fa      	ldrh	r2, [r7, #6]
 8006864:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	88fa      	ldrh	r2, [r7, #6]
 800686c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	689b      	ldr	r3, [r3, #8]
 8006874:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006878:	d108      	bne.n	800688c <HAL_UART_Transmit+0x68>
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	691b      	ldr	r3, [r3, #16]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d104      	bne.n	800688c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006882:	2300      	movs	r3, #0
 8006884:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006886:	68bb      	ldr	r3, [r7, #8]
 8006888:	61bb      	str	r3, [r7, #24]
 800688a:	e003      	b.n	8006894 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006890:	2300      	movs	r3, #0
 8006892:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006894:	e02f      	b.n	80068f6 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	9300      	str	r3, [sp, #0]
 800689a:	697b      	ldr	r3, [r7, #20]
 800689c:	2200      	movs	r2, #0
 800689e:	2180      	movs	r1, #128	@ 0x80
 80068a0:	68f8      	ldr	r0, [r7, #12]
 80068a2:	f000 ff09 	bl	80076b8 <UART_WaitOnFlagUntilTimeout>
 80068a6:	4603      	mov	r3, r0
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d004      	beq.n	80068b6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	2220      	movs	r2, #32
 80068b0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80068b2:	2303      	movs	r3, #3
 80068b4:	e03b      	b.n	800692e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80068b6:	69fb      	ldr	r3, [r7, #28]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d10b      	bne.n	80068d4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80068bc:	69bb      	ldr	r3, [r7, #24]
 80068be:	881b      	ldrh	r3, [r3, #0]
 80068c0:	461a      	mov	r2, r3
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80068ca:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80068cc:	69bb      	ldr	r3, [r7, #24]
 80068ce:	3302      	adds	r3, #2
 80068d0:	61bb      	str	r3, [r7, #24]
 80068d2:	e007      	b.n	80068e4 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80068d4:	69fb      	ldr	r3, [r7, #28]
 80068d6:	781a      	ldrb	r2, [r3, #0]
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80068de:	69fb      	ldr	r3, [r7, #28]
 80068e0:	3301      	adds	r3, #1
 80068e2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80068ea:	b29b      	uxth	r3, r3
 80068ec:	3b01      	subs	r3, #1
 80068ee:	b29a      	uxth	r2, r3
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80068fc:	b29b      	uxth	r3, r3
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d1c9      	bne.n	8006896 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	9300      	str	r3, [sp, #0]
 8006906:	697b      	ldr	r3, [r7, #20]
 8006908:	2200      	movs	r2, #0
 800690a:	2140      	movs	r1, #64	@ 0x40
 800690c:	68f8      	ldr	r0, [r7, #12]
 800690e:	f000 fed3 	bl	80076b8 <UART_WaitOnFlagUntilTimeout>
 8006912:	4603      	mov	r3, r0
 8006914:	2b00      	cmp	r3, #0
 8006916:	d004      	beq.n	8006922 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	2220      	movs	r2, #32
 800691c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800691e:	2303      	movs	r3, #3
 8006920:	e005      	b.n	800692e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	2220      	movs	r2, #32
 8006926:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8006928:	2300      	movs	r3, #0
 800692a:	e000      	b.n	800692e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800692c:	2302      	movs	r3, #2
  }
}
 800692e:	4618      	mov	r0, r3
 8006930:	3720      	adds	r7, #32
 8006932:	46bd      	mov	sp, r7
 8006934:	bd80      	pop	{r7, pc}
	...

08006938 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b0ba      	sub	sp, #232	@ 0xe8
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	69db      	ldr	r3, [r3, #28]
 8006946:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	689b      	ldr	r3, [r3, #8]
 800695a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800695e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8006962:	f640 030f 	movw	r3, #2063	@ 0x80f
 8006966:	4013      	ands	r3, r2
 8006968:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800696c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006970:	2b00      	cmp	r3, #0
 8006972:	d115      	bne.n	80069a0 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006974:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006978:	f003 0320 	and.w	r3, r3, #32
 800697c:	2b00      	cmp	r3, #0
 800697e:	d00f      	beq.n	80069a0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006980:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006984:	f003 0320 	and.w	r3, r3, #32
 8006988:	2b00      	cmp	r3, #0
 800698a:	d009      	beq.n	80069a0 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006990:	2b00      	cmp	r3, #0
 8006992:	f000 82ac 	beq.w	8006eee <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	4798      	blx	r3
      }
      return;
 800699e:	e2a6      	b.n	8006eee <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80069a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	f000 8117 	beq.w	8006bd8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80069aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80069ae:	f003 0301 	and.w	r3, r3, #1
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d106      	bne.n	80069c4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80069b6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80069ba:	4b85      	ldr	r3, [pc, #532]	@ (8006bd0 <HAL_UART_IRQHandler+0x298>)
 80069bc:	4013      	ands	r3, r2
 80069be:	2b00      	cmp	r3, #0
 80069c0:	f000 810a 	beq.w	8006bd8 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80069c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069c8:	f003 0301 	and.w	r3, r3, #1
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d011      	beq.n	80069f4 <HAL_UART_IRQHandler+0xbc>
 80069d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80069d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d00b      	beq.n	80069f4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	2201      	movs	r2, #1
 80069e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80069ea:	f043 0201 	orr.w	r2, r3, #1
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80069f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069f8:	f003 0302 	and.w	r3, r3, #2
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d011      	beq.n	8006a24 <HAL_UART_IRQHandler+0xec>
 8006a00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006a04:	f003 0301 	and.w	r3, r3, #1
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d00b      	beq.n	8006a24 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	2202      	movs	r2, #2
 8006a12:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006a1a:	f043 0204 	orr.w	r2, r3, #4
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006a24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a28:	f003 0304 	and.w	r3, r3, #4
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d011      	beq.n	8006a54 <HAL_UART_IRQHandler+0x11c>
 8006a30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006a34:	f003 0301 	and.w	r3, r3, #1
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d00b      	beq.n	8006a54 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	2204      	movs	r2, #4
 8006a42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006a4a:	f043 0202 	orr.w	r2, r3, #2
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006a54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a58:	f003 0308 	and.w	r3, r3, #8
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d017      	beq.n	8006a90 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006a60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a64:	f003 0320 	and.w	r3, r3, #32
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d105      	bne.n	8006a78 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006a6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006a70:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d00b      	beq.n	8006a90 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	2208      	movs	r2, #8
 8006a7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006a86:	f043 0208 	orr.w	r2, r3, #8
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006a90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a94:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d012      	beq.n	8006ac2 <HAL_UART_IRQHandler+0x18a>
 8006a9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006aa0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d00c      	beq.n	8006ac2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006ab0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006ab8:	f043 0220 	orr.w	r2, r3, #32
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	f000 8212 	beq.w	8006ef2 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006ace:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ad2:	f003 0320 	and.w	r3, r3, #32
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d00d      	beq.n	8006af6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006ada:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ade:	f003 0320 	and.w	r3, r3, #32
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d007      	beq.n	8006af6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d003      	beq.n	8006af6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006afc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	689b      	ldr	r3, [r3, #8]
 8006b06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b0a:	2b40      	cmp	r3, #64	@ 0x40
 8006b0c:	d005      	beq.n	8006b1a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006b0e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006b12:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d04f      	beq.n	8006bba <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	f000 fe39 	bl	8007792 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	689b      	ldr	r3, [r3, #8]
 8006b26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b2a:	2b40      	cmp	r3, #64	@ 0x40
 8006b2c:	d141      	bne.n	8006bb2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	3308      	adds	r3, #8
 8006b34:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b38:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006b3c:	e853 3f00 	ldrex	r3, [r3]
 8006b40:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006b44:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006b48:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006b4c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	3308      	adds	r3, #8
 8006b56:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006b5a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006b5e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b62:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006b66:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006b6a:	e841 2300 	strex	r3, r2, [r1]
 8006b6e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006b72:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d1d9      	bne.n	8006b2e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d013      	beq.n	8006baa <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b86:	4a13      	ldr	r2, [pc, #76]	@ (8006bd4 <HAL_UART_IRQHandler+0x29c>)
 8006b88:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b8e:	4618      	mov	r0, r3
 8006b90:	f7fd fc8e 	bl	80044b0 <HAL_DMA_Abort_IT>
 8006b94:	4603      	mov	r3, r0
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d017      	beq.n	8006bca <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ba0:	687a      	ldr	r2, [r7, #4]
 8006ba2:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006ba4:	4610      	mov	r0, r2
 8006ba6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ba8:	e00f      	b.n	8006bca <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006baa:	6878      	ldr	r0, [r7, #4]
 8006bac:	f000 f9b6 	bl	8006f1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bb0:	e00b      	b.n	8006bca <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f000 f9b2 	bl	8006f1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bb8:	e007      	b.n	8006bca <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006bba:	6878      	ldr	r0, [r7, #4]
 8006bbc:	f000 f9ae 	bl	8006f1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8006bc8:	e193      	b.n	8006ef2 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bca:	bf00      	nop
    return;
 8006bcc:	e191      	b.n	8006ef2 <HAL_UART_IRQHandler+0x5ba>
 8006bce:	bf00      	nop
 8006bd0:	04000120 	.word	0x04000120
 8006bd4:	0800785b 	.word	0x0800785b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006bdc:	2b01      	cmp	r3, #1
 8006bde:	f040 814c 	bne.w	8006e7a <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006be2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006be6:	f003 0310 	and.w	r3, r3, #16
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	f000 8145 	beq.w	8006e7a <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006bf0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006bf4:	f003 0310 	and.w	r3, r3, #16
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	f000 813e 	beq.w	8006e7a <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	2210      	movs	r2, #16
 8006c04:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	689b      	ldr	r3, [r3, #8]
 8006c0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c10:	2b40      	cmp	r3, #64	@ 0x40
 8006c12:	f040 80b6 	bne.w	8006d82 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	685b      	ldr	r3, [r3, #4]
 8006c1e:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006c22:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	f000 8165 	beq.w	8006ef6 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006c32:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006c36:	429a      	cmp	r2, r3
 8006c38:	f080 815d 	bcs.w	8006ef6 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006c42:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006c4a:	69db      	ldr	r3, [r3, #28]
 8006c4c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006c50:	f000 8086 	beq.w	8006d60 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c5c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006c60:	e853 3f00 	ldrex	r3, [r3]
 8006c64:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006c68:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006c6c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006c70:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	461a      	mov	r2, r3
 8006c7a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006c7e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006c82:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c86:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006c8a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006c8e:	e841 2300 	strex	r3, r2, [r1]
 8006c92:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006c96:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d1da      	bne.n	8006c54 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	3308      	adds	r3, #8
 8006ca4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ca6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006ca8:	e853 3f00 	ldrex	r3, [r3]
 8006cac:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006cae:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006cb0:	f023 0301 	bic.w	r3, r3, #1
 8006cb4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	3308      	adds	r3, #8
 8006cbe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006cc2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006cc6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cc8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006cca:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006cce:	e841 2300 	strex	r3, r2, [r1]
 8006cd2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006cd4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d1e1      	bne.n	8006c9e <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	3308      	adds	r3, #8
 8006ce0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ce2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006ce4:	e853 3f00 	ldrex	r3, [r3]
 8006ce8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006cea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006cec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006cf0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	3308      	adds	r3, #8
 8006cfa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006cfe:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006d00:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d02:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006d04:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006d06:	e841 2300 	strex	r3, r2, [r1]
 8006d0a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006d0c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d1e3      	bne.n	8006cda <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2220      	movs	r2, #32
 8006d16:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d26:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d28:	e853 3f00 	ldrex	r3, [r3]
 8006d2c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006d2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006d30:	f023 0310 	bic.w	r3, r3, #16
 8006d34:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	461a      	mov	r2, r3
 8006d3e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006d42:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006d44:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d46:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006d48:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006d4a:	e841 2300 	strex	r3, r2, [r1]
 8006d4e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006d50:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d1e4      	bne.n	8006d20 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	f7fd fb38 	bl	80043d0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2202      	movs	r2, #2
 8006d64:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006d72:	b29b      	uxth	r3, r3
 8006d74:	1ad3      	subs	r3, r2, r3
 8006d76:	b29b      	uxth	r3, r3
 8006d78:	4619      	mov	r1, r3
 8006d7a:	6878      	ldr	r0, [r7, #4]
 8006d7c:	f000 f8d8 	bl	8006f30 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006d80:	e0b9      	b.n	8006ef6 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006d8e:	b29b      	uxth	r3, r3
 8006d90:	1ad3      	subs	r3, r2, r3
 8006d92:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006d9c:	b29b      	uxth	r3, r3
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	f000 80ab 	beq.w	8006efa <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8006da4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	f000 80a6 	beq.w	8006efa <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006db4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006db6:	e853 3f00 	ldrex	r3, [r3]
 8006dba:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006dbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006dbe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006dc2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	461a      	mov	r2, r3
 8006dcc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006dd0:	647b      	str	r3, [r7, #68]	@ 0x44
 8006dd2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dd4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006dd6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006dd8:	e841 2300 	strex	r3, r2, [r1]
 8006ddc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006dde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d1e4      	bne.n	8006dae <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	3308      	adds	r3, #8
 8006dea:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dee:	e853 3f00 	ldrex	r3, [r3]
 8006df2:	623b      	str	r3, [r7, #32]
   return(result);
 8006df4:	6a3b      	ldr	r3, [r7, #32]
 8006df6:	f023 0301 	bic.w	r3, r3, #1
 8006dfa:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	3308      	adds	r3, #8
 8006e04:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006e08:	633a      	str	r2, [r7, #48]	@ 0x30
 8006e0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e0c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006e0e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006e10:	e841 2300 	strex	r3, r2, [r1]
 8006e14:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006e16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d1e3      	bne.n	8006de4 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2220      	movs	r2, #32
 8006e20:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2200      	movs	r2, #0
 8006e28:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e36:	693b      	ldr	r3, [r7, #16]
 8006e38:	e853 3f00 	ldrex	r3, [r3]
 8006e3c:	60fb      	str	r3, [r7, #12]
   return(result);
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	f023 0310 	bic.w	r3, r3, #16
 8006e44:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	461a      	mov	r2, r3
 8006e4e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006e52:	61fb      	str	r3, [r7, #28]
 8006e54:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e56:	69b9      	ldr	r1, [r7, #24]
 8006e58:	69fa      	ldr	r2, [r7, #28]
 8006e5a:	e841 2300 	strex	r3, r2, [r1]
 8006e5e:	617b      	str	r3, [r7, #20]
   return(result);
 8006e60:	697b      	ldr	r3, [r7, #20]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d1e4      	bne.n	8006e30 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2202      	movs	r2, #2
 8006e6a:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006e6c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006e70:	4619      	mov	r1, r3
 8006e72:	6878      	ldr	r0, [r7, #4]
 8006e74:	f000 f85c 	bl	8006f30 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006e78:	e03f      	b.n	8006efa <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006e7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e7e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d00e      	beq.n	8006ea4 <HAL_UART_IRQHandler+0x56c>
 8006e86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006e8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d008      	beq.n	8006ea4 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006e9a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006e9c:	6878      	ldr	r0, [r7, #4]
 8006e9e:	f000 f853 	bl	8006f48 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006ea2:	e02d      	b.n	8006f00 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006ea4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ea8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d00e      	beq.n	8006ece <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006eb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006eb4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d008      	beq.n	8006ece <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d01c      	beq.n	8006efe <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006ec8:	6878      	ldr	r0, [r7, #4]
 8006eca:	4798      	blx	r3
    }
    return;
 8006ecc:	e017      	b.n	8006efe <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006ece:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ed2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d012      	beq.n	8006f00 <HAL_UART_IRQHandler+0x5c8>
 8006eda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ede:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d00c      	beq.n	8006f00 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	f000 fccd 	bl	8007886 <UART_EndTransmit_IT>
    return;
 8006eec:	e008      	b.n	8006f00 <HAL_UART_IRQHandler+0x5c8>
      return;
 8006eee:	bf00      	nop
 8006ef0:	e006      	b.n	8006f00 <HAL_UART_IRQHandler+0x5c8>
    return;
 8006ef2:	bf00      	nop
 8006ef4:	e004      	b.n	8006f00 <HAL_UART_IRQHandler+0x5c8>
      return;
 8006ef6:	bf00      	nop
 8006ef8:	e002      	b.n	8006f00 <HAL_UART_IRQHandler+0x5c8>
      return;
 8006efa:	bf00      	nop
 8006efc:	e000      	b.n	8006f00 <HAL_UART_IRQHandler+0x5c8>
    return;
 8006efe:	bf00      	nop
  }

}
 8006f00:	37e8      	adds	r7, #232	@ 0xe8
 8006f02:	46bd      	mov	sp, r7
 8006f04:	bd80      	pop	{r7, pc}
 8006f06:	bf00      	nop

08006f08 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006f08:	b480      	push	{r7}
 8006f0a:	b083      	sub	sp, #12
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006f10:	bf00      	nop
 8006f12:	370c      	adds	r7, #12
 8006f14:	46bd      	mov	sp, r7
 8006f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1a:	4770      	bx	lr

08006f1c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006f1c:	b480      	push	{r7}
 8006f1e:	b083      	sub	sp, #12
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006f24:	bf00      	nop
 8006f26:	370c      	adds	r7, #12
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2e:	4770      	bx	lr

08006f30 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006f30:	b480      	push	{r7}
 8006f32:	b083      	sub	sp, #12
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
 8006f38:	460b      	mov	r3, r1
 8006f3a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006f3c:	bf00      	nop
 8006f3e:	370c      	adds	r7, #12
 8006f40:	46bd      	mov	sp, r7
 8006f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f46:	4770      	bx	lr

08006f48 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006f48:	b480      	push	{r7}
 8006f4a:	b083      	sub	sp, #12
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006f50:	bf00      	nop
 8006f52:	370c      	adds	r7, #12
 8006f54:	46bd      	mov	sp, r7
 8006f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5a:	4770      	bx	lr

08006f5c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b088      	sub	sp, #32
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006f64:	2300      	movs	r3, #0
 8006f66:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	689a      	ldr	r2, [r3, #8]
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	691b      	ldr	r3, [r3, #16]
 8006f70:	431a      	orrs	r2, r3
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	695b      	ldr	r3, [r3, #20]
 8006f76:	431a      	orrs	r2, r3
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	69db      	ldr	r3, [r3, #28]
 8006f7c:	4313      	orrs	r3, r2
 8006f7e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	681a      	ldr	r2, [r3, #0]
 8006f86:	4ba6      	ldr	r3, [pc, #664]	@ (8007220 <UART_SetConfig+0x2c4>)
 8006f88:	4013      	ands	r3, r2
 8006f8a:	687a      	ldr	r2, [r7, #4]
 8006f8c:	6812      	ldr	r2, [r2, #0]
 8006f8e:	6979      	ldr	r1, [r7, #20]
 8006f90:	430b      	orrs	r3, r1
 8006f92:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	685b      	ldr	r3, [r3, #4]
 8006f9a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	68da      	ldr	r2, [r3, #12]
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	430a      	orrs	r2, r1
 8006fa8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	699b      	ldr	r3, [r3, #24]
 8006fae:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	6a1b      	ldr	r3, [r3, #32]
 8006fb4:	697a      	ldr	r2, [r7, #20]
 8006fb6:	4313      	orrs	r3, r2
 8006fb8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	689b      	ldr	r3, [r3, #8]
 8006fc0:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	697a      	ldr	r2, [r7, #20]
 8006fca:	430a      	orrs	r2, r1
 8006fcc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	4a94      	ldr	r2, [pc, #592]	@ (8007224 <UART_SetConfig+0x2c8>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d120      	bne.n	800701a <UART_SetConfig+0xbe>
 8006fd8:	4b93      	ldr	r3, [pc, #588]	@ (8007228 <UART_SetConfig+0x2cc>)
 8006fda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006fde:	f003 0303 	and.w	r3, r3, #3
 8006fe2:	2b03      	cmp	r3, #3
 8006fe4:	d816      	bhi.n	8007014 <UART_SetConfig+0xb8>
 8006fe6:	a201      	add	r2, pc, #4	@ (adr r2, 8006fec <UART_SetConfig+0x90>)
 8006fe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fec:	08006ffd 	.word	0x08006ffd
 8006ff0:	08007009 	.word	0x08007009
 8006ff4:	08007003 	.word	0x08007003
 8006ff8:	0800700f 	.word	0x0800700f
 8006ffc:	2301      	movs	r3, #1
 8006ffe:	77fb      	strb	r3, [r7, #31]
 8007000:	e150      	b.n	80072a4 <UART_SetConfig+0x348>
 8007002:	2302      	movs	r3, #2
 8007004:	77fb      	strb	r3, [r7, #31]
 8007006:	e14d      	b.n	80072a4 <UART_SetConfig+0x348>
 8007008:	2304      	movs	r3, #4
 800700a:	77fb      	strb	r3, [r7, #31]
 800700c:	e14a      	b.n	80072a4 <UART_SetConfig+0x348>
 800700e:	2308      	movs	r3, #8
 8007010:	77fb      	strb	r3, [r7, #31]
 8007012:	e147      	b.n	80072a4 <UART_SetConfig+0x348>
 8007014:	2310      	movs	r3, #16
 8007016:	77fb      	strb	r3, [r7, #31]
 8007018:	e144      	b.n	80072a4 <UART_SetConfig+0x348>
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	4a83      	ldr	r2, [pc, #524]	@ (800722c <UART_SetConfig+0x2d0>)
 8007020:	4293      	cmp	r3, r2
 8007022:	d132      	bne.n	800708a <UART_SetConfig+0x12e>
 8007024:	4b80      	ldr	r3, [pc, #512]	@ (8007228 <UART_SetConfig+0x2cc>)
 8007026:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800702a:	f003 030c 	and.w	r3, r3, #12
 800702e:	2b0c      	cmp	r3, #12
 8007030:	d828      	bhi.n	8007084 <UART_SetConfig+0x128>
 8007032:	a201      	add	r2, pc, #4	@ (adr r2, 8007038 <UART_SetConfig+0xdc>)
 8007034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007038:	0800706d 	.word	0x0800706d
 800703c:	08007085 	.word	0x08007085
 8007040:	08007085 	.word	0x08007085
 8007044:	08007085 	.word	0x08007085
 8007048:	08007079 	.word	0x08007079
 800704c:	08007085 	.word	0x08007085
 8007050:	08007085 	.word	0x08007085
 8007054:	08007085 	.word	0x08007085
 8007058:	08007073 	.word	0x08007073
 800705c:	08007085 	.word	0x08007085
 8007060:	08007085 	.word	0x08007085
 8007064:	08007085 	.word	0x08007085
 8007068:	0800707f 	.word	0x0800707f
 800706c:	2300      	movs	r3, #0
 800706e:	77fb      	strb	r3, [r7, #31]
 8007070:	e118      	b.n	80072a4 <UART_SetConfig+0x348>
 8007072:	2302      	movs	r3, #2
 8007074:	77fb      	strb	r3, [r7, #31]
 8007076:	e115      	b.n	80072a4 <UART_SetConfig+0x348>
 8007078:	2304      	movs	r3, #4
 800707a:	77fb      	strb	r3, [r7, #31]
 800707c:	e112      	b.n	80072a4 <UART_SetConfig+0x348>
 800707e:	2308      	movs	r3, #8
 8007080:	77fb      	strb	r3, [r7, #31]
 8007082:	e10f      	b.n	80072a4 <UART_SetConfig+0x348>
 8007084:	2310      	movs	r3, #16
 8007086:	77fb      	strb	r3, [r7, #31]
 8007088:	e10c      	b.n	80072a4 <UART_SetConfig+0x348>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	4a68      	ldr	r2, [pc, #416]	@ (8007230 <UART_SetConfig+0x2d4>)
 8007090:	4293      	cmp	r3, r2
 8007092:	d120      	bne.n	80070d6 <UART_SetConfig+0x17a>
 8007094:	4b64      	ldr	r3, [pc, #400]	@ (8007228 <UART_SetConfig+0x2cc>)
 8007096:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800709a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800709e:	2b30      	cmp	r3, #48	@ 0x30
 80070a0:	d013      	beq.n	80070ca <UART_SetConfig+0x16e>
 80070a2:	2b30      	cmp	r3, #48	@ 0x30
 80070a4:	d814      	bhi.n	80070d0 <UART_SetConfig+0x174>
 80070a6:	2b20      	cmp	r3, #32
 80070a8:	d009      	beq.n	80070be <UART_SetConfig+0x162>
 80070aa:	2b20      	cmp	r3, #32
 80070ac:	d810      	bhi.n	80070d0 <UART_SetConfig+0x174>
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d002      	beq.n	80070b8 <UART_SetConfig+0x15c>
 80070b2:	2b10      	cmp	r3, #16
 80070b4:	d006      	beq.n	80070c4 <UART_SetConfig+0x168>
 80070b6:	e00b      	b.n	80070d0 <UART_SetConfig+0x174>
 80070b8:	2300      	movs	r3, #0
 80070ba:	77fb      	strb	r3, [r7, #31]
 80070bc:	e0f2      	b.n	80072a4 <UART_SetConfig+0x348>
 80070be:	2302      	movs	r3, #2
 80070c0:	77fb      	strb	r3, [r7, #31]
 80070c2:	e0ef      	b.n	80072a4 <UART_SetConfig+0x348>
 80070c4:	2304      	movs	r3, #4
 80070c6:	77fb      	strb	r3, [r7, #31]
 80070c8:	e0ec      	b.n	80072a4 <UART_SetConfig+0x348>
 80070ca:	2308      	movs	r3, #8
 80070cc:	77fb      	strb	r3, [r7, #31]
 80070ce:	e0e9      	b.n	80072a4 <UART_SetConfig+0x348>
 80070d0:	2310      	movs	r3, #16
 80070d2:	77fb      	strb	r3, [r7, #31]
 80070d4:	e0e6      	b.n	80072a4 <UART_SetConfig+0x348>
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	4a56      	ldr	r2, [pc, #344]	@ (8007234 <UART_SetConfig+0x2d8>)
 80070dc:	4293      	cmp	r3, r2
 80070de:	d120      	bne.n	8007122 <UART_SetConfig+0x1c6>
 80070e0:	4b51      	ldr	r3, [pc, #324]	@ (8007228 <UART_SetConfig+0x2cc>)
 80070e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80070e6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80070ea:	2bc0      	cmp	r3, #192	@ 0xc0
 80070ec:	d013      	beq.n	8007116 <UART_SetConfig+0x1ba>
 80070ee:	2bc0      	cmp	r3, #192	@ 0xc0
 80070f0:	d814      	bhi.n	800711c <UART_SetConfig+0x1c0>
 80070f2:	2b80      	cmp	r3, #128	@ 0x80
 80070f4:	d009      	beq.n	800710a <UART_SetConfig+0x1ae>
 80070f6:	2b80      	cmp	r3, #128	@ 0x80
 80070f8:	d810      	bhi.n	800711c <UART_SetConfig+0x1c0>
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d002      	beq.n	8007104 <UART_SetConfig+0x1a8>
 80070fe:	2b40      	cmp	r3, #64	@ 0x40
 8007100:	d006      	beq.n	8007110 <UART_SetConfig+0x1b4>
 8007102:	e00b      	b.n	800711c <UART_SetConfig+0x1c0>
 8007104:	2300      	movs	r3, #0
 8007106:	77fb      	strb	r3, [r7, #31]
 8007108:	e0cc      	b.n	80072a4 <UART_SetConfig+0x348>
 800710a:	2302      	movs	r3, #2
 800710c:	77fb      	strb	r3, [r7, #31]
 800710e:	e0c9      	b.n	80072a4 <UART_SetConfig+0x348>
 8007110:	2304      	movs	r3, #4
 8007112:	77fb      	strb	r3, [r7, #31]
 8007114:	e0c6      	b.n	80072a4 <UART_SetConfig+0x348>
 8007116:	2308      	movs	r3, #8
 8007118:	77fb      	strb	r3, [r7, #31]
 800711a:	e0c3      	b.n	80072a4 <UART_SetConfig+0x348>
 800711c:	2310      	movs	r3, #16
 800711e:	77fb      	strb	r3, [r7, #31]
 8007120:	e0c0      	b.n	80072a4 <UART_SetConfig+0x348>
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	4a44      	ldr	r2, [pc, #272]	@ (8007238 <UART_SetConfig+0x2dc>)
 8007128:	4293      	cmp	r3, r2
 800712a:	d125      	bne.n	8007178 <UART_SetConfig+0x21c>
 800712c:	4b3e      	ldr	r3, [pc, #248]	@ (8007228 <UART_SetConfig+0x2cc>)
 800712e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007132:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007136:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800713a:	d017      	beq.n	800716c <UART_SetConfig+0x210>
 800713c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007140:	d817      	bhi.n	8007172 <UART_SetConfig+0x216>
 8007142:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007146:	d00b      	beq.n	8007160 <UART_SetConfig+0x204>
 8007148:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800714c:	d811      	bhi.n	8007172 <UART_SetConfig+0x216>
 800714e:	2b00      	cmp	r3, #0
 8007150:	d003      	beq.n	800715a <UART_SetConfig+0x1fe>
 8007152:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007156:	d006      	beq.n	8007166 <UART_SetConfig+0x20a>
 8007158:	e00b      	b.n	8007172 <UART_SetConfig+0x216>
 800715a:	2300      	movs	r3, #0
 800715c:	77fb      	strb	r3, [r7, #31]
 800715e:	e0a1      	b.n	80072a4 <UART_SetConfig+0x348>
 8007160:	2302      	movs	r3, #2
 8007162:	77fb      	strb	r3, [r7, #31]
 8007164:	e09e      	b.n	80072a4 <UART_SetConfig+0x348>
 8007166:	2304      	movs	r3, #4
 8007168:	77fb      	strb	r3, [r7, #31]
 800716a:	e09b      	b.n	80072a4 <UART_SetConfig+0x348>
 800716c:	2308      	movs	r3, #8
 800716e:	77fb      	strb	r3, [r7, #31]
 8007170:	e098      	b.n	80072a4 <UART_SetConfig+0x348>
 8007172:	2310      	movs	r3, #16
 8007174:	77fb      	strb	r3, [r7, #31]
 8007176:	e095      	b.n	80072a4 <UART_SetConfig+0x348>
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	4a2f      	ldr	r2, [pc, #188]	@ (800723c <UART_SetConfig+0x2e0>)
 800717e:	4293      	cmp	r3, r2
 8007180:	d125      	bne.n	80071ce <UART_SetConfig+0x272>
 8007182:	4b29      	ldr	r3, [pc, #164]	@ (8007228 <UART_SetConfig+0x2cc>)
 8007184:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007188:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800718c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007190:	d017      	beq.n	80071c2 <UART_SetConfig+0x266>
 8007192:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007196:	d817      	bhi.n	80071c8 <UART_SetConfig+0x26c>
 8007198:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800719c:	d00b      	beq.n	80071b6 <UART_SetConfig+0x25a>
 800719e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80071a2:	d811      	bhi.n	80071c8 <UART_SetConfig+0x26c>
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d003      	beq.n	80071b0 <UART_SetConfig+0x254>
 80071a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80071ac:	d006      	beq.n	80071bc <UART_SetConfig+0x260>
 80071ae:	e00b      	b.n	80071c8 <UART_SetConfig+0x26c>
 80071b0:	2301      	movs	r3, #1
 80071b2:	77fb      	strb	r3, [r7, #31]
 80071b4:	e076      	b.n	80072a4 <UART_SetConfig+0x348>
 80071b6:	2302      	movs	r3, #2
 80071b8:	77fb      	strb	r3, [r7, #31]
 80071ba:	e073      	b.n	80072a4 <UART_SetConfig+0x348>
 80071bc:	2304      	movs	r3, #4
 80071be:	77fb      	strb	r3, [r7, #31]
 80071c0:	e070      	b.n	80072a4 <UART_SetConfig+0x348>
 80071c2:	2308      	movs	r3, #8
 80071c4:	77fb      	strb	r3, [r7, #31]
 80071c6:	e06d      	b.n	80072a4 <UART_SetConfig+0x348>
 80071c8:	2310      	movs	r3, #16
 80071ca:	77fb      	strb	r3, [r7, #31]
 80071cc:	e06a      	b.n	80072a4 <UART_SetConfig+0x348>
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	4a1b      	ldr	r2, [pc, #108]	@ (8007240 <UART_SetConfig+0x2e4>)
 80071d4:	4293      	cmp	r3, r2
 80071d6:	d138      	bne.n	800724a <UART_SetConfig+0x2ee>
 80071d8:	4b13      	ldr	r3, [pc, #76]	@ (8007228 <UART_SetConfig+0x2cc>)
 80071da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80071de:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80071e2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80071e6:	d017      	beq.n	8007218 <UART_SetConfig+0x2bc>
 80071e8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80071ec:	d82a      	bhi.n	8007244 <UART_SetConfig+0x2e8>
 80071ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80071f2:	d00b      	beq.n	800720c <UART_SetConfig+0x2b0>
 80071f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80071f8:	d824      	bhi.n	8007244 <UART_SetConfig+0x2e8>
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d003      	beq.n	8007206 <UART_SetConfig+0x2aa>
 80071fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007202:	d006      	beq.n	8007212 <UART_SetConfig+0x2b6>
 8007204:	e01e      	b.n	8007244 <UART_SetConfig+0x2e8>
 8007206:	2300      	movs	r3, #0
 8007208:	77fb      	strb	r3, [r7, #31]
 800720a:	e04b      	b.n	80072a4 <UART_SetConfig+0x348>
 800720c:	2302      	movs	r3, #2
 800720e:	77fb      	strb	r3, [r7, #31]
 8007210:	e048      	b.n	80072a4 <UART_SetConfig+0x348>
 8007212:	2304      	movs	r3, #4
 8007214:	77fb      	strb	r3, [r7, #31]
 8007216:	e045      	b.n	80072a4 <UART_SetConfig+0x348>
 8007218:	2308      	movs	r3, #8
 800721a:	77fb      	strb	r3, [r7, #31]
 800721c:	e042      	b.n	80072a4 <UART_SetConfig+0x348>
 800721e:	bf00      	nop
 8007220:	efff69f3 	.word	0xefff69f3
 8007224:	40011000 	.word	0x40011000
 8007228:	40023800 	.word	0x40023800
 800722c:	40004400 	.word	0x40004400
 8007230:	40004800 	.word	0x40004800
 8007234:	40004c00 	.word	0x40004c00
 8007238:	40005000 	.word	0x40005000
 800723c:	40011400 	.word	0x40011400
 8007240:	40007800 	.word	0x40007800
 8007244:	2310      	movs	r3, #16
 8007246:	77fb      	strb	r3, [r7, #31]
 8007248:	e02c      	b.n	80072a4 <UART_SetConfig+0x348>
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	4a72      	ldr	r2, [pc, #456]	@ (8007418 <UART_SetConfig+0x4bc>)
 8007250:	4293      	cmp	r3, r2
 8007252:	d125      	bne.n	80072a0 <UART_SetConfig+0x344>
 8007254:	4b71      	ldr	r3, [pc, #452]	@ (800741c <UART_SetConfig+0x4c0>)
 8007256:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800725a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800725e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8007262:	d017      	beq.n	8007294 <UART_SetConfig+0x338>
 8007264:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8007268:	d817      	bhi.n	800729a <UART_SetConfig+0x33e>
 800726a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800726e:	d00b      	beq.n	8007288 <UART_SetConfig+0x32c>
 8007270:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007274:	d811      	bhi.n	800729a <UART_SetConfig+0x33e>
 8007276:	2b00      	cmp	r3, #0
 8007278:	d003      	beq.n	8007282 <UART_SetConfig+0x326>
 800727a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800727e:	d006      	beq.n	800728e <UART_SetConfig+0x332>
 8007280:	e00b      	b.n	800729a <UART_SetConfig+0x33e>
 8007282:	2300      	movs	r3, #0
 8007284:	77fb      	strb	r3, [r7, #31]
 8007286:	e00d      	b.n	80072a4 <UART_SetConfig+0x348>
 8007288:	2302      	movs	r3, #2
 800728a:	77fb      	strb	r3, [r7, #31]
 800728c:	e00a      	b.n	80072a4 <UART_SetConfig+0x348>
 800728e:	2304      	movs	r3, #4
 8007290:	77fb      	strb	r3, [r7, #31]
 8007292:	e007      	b.n	80072a4 <UART_SetConfig+0x348>
 8007294:	2308      	movs	r3, #8
 8007296:	77fb      	strb	r3, [r7, #31]
 8007298:	e004      	b.n	80072a4 <UART_SetConfig+0x348>
 800729a:	2310      	movs	r3, #16
 800729c:	77fb      	strb	r3, [r7, #31]
 800729e:	e001      	b.n	80072a4 <UART_SetConfig+0x348>
 80072a0:	2310      	movs	r3, #16
 80072a2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	69db      	ldr	r3, [r3, #28]
 80072a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80072ac:	d15b      	bne.n	8007366 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80072ae:	7ffb      	ldrb	r3, [r7, #31]
 80072b0:	2b08      	cmp	r3, #8
 80072b2:	d828      	bhi.n	8007306 <UART_SetConfig+0x3aa>
 80072b4:	a201      	add	r2, pc, #4	@ (adr r2, 80072bc <UART_SetConfig+0x360>)
 80072b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072ba:	bf00      	nop
 80072bc:	080072e1 	.word	0x080072e1
 80072c0:	080072e9 	.word	0x080072e9
 80072c4:	080072f1 	.word	0x080072f1
 80072c8:	08007307 	.word	0x08007307
 80072cc:	080072f7 	.word	0x080072f7
 80072d0:	08007307 	.word	0x08007307
 80072d4:	08007307 	.word	0x08007307
 80072d8:	08007307 	.word	0x08007307
 80072dc:	080072ff 	.word	0x080072ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80072e0:	f7fe fa64 	bl	80057ac <HAL_RCC_GetPCLK1Freq>
 80072e4:	61b8      	str	r0, [r7, #24]
        break;
 80072e6:	e013      	b.n	8007310 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80072e8:	f7fe fa74 	bl	80057d4 <HAL_RCC_GetPCLK2Freq>
 80072ec:	61b8      	str	r0, [r7, #24]
        break;
 80072ee:	e00f      	b.n	8007310 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80072f0:	4b4b      	ldr	r3, [pc, #300]	@ (8007420 <UART_SetConfig+0x4c4>)
 80072f2:	61bb      	str	r3, [r7, #24]
        break;
 80072f4:	e00c      	b.n	8007310 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80072f6:	f7fe f947 	bl	8005588 <HAL_RCC_GetSysClockFreq>
 80072fa:	61b8      	str	r0, [r7, #24]
        break;
 80072fc:	e008      	b.n	8007310 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80072fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007302:	61bb      	str	r3, [r7, #24]
        break;
 8007304:	e004      	b.n	8007310 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8007306:	2300      	movs	r3, #0
 8007308:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800730a:	2301      	movs	r3, #1
 800730c:	77bb      	strb	r3, [r7, #30]
        break;
 800730e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007310:	69bb      	ldr	r3, [r7, #24]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d074      	beq.n	8007400 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007316:	69bb      	ldr	r3, [r7, #24]
 8007318:	005a      	lsls	r2, r3, #1
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	685b      	ldr	r3, [r3, #4]
 800731e:	085b      	lsrs	r3, r3, #1
 8007320:	441a      	add	r2, r3
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	685b      	ldr	r3, [r3, #4]
 8007326:	fbb2 f3f3 	udiv	r3, r2, r3
 800732a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800732c:	693b      	ldr	r3, [r7, #16]
 800732e:	2b0f      	cmp	r3, #15
 8007330:	d916      	bls.n	8007360 <UART_SetConfig+0x404>
 8007332:	693b      	ldr	r3, [r7, #16]
 8007334:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007338:	d212      	bcs.n	8007360 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800733a:	693b      	ldr	r3, [r7, #16]
 800733c:	b29b      	uxth	r3, r3
 800733e:	f023 030f 	bic.w	r3, r3, #15
 8007342:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007344:	693b      	ldr	r3, [r7, #16]
 8007346:	085b      	lsrs	r3, r3, #1
 8007348:	b29b      	uxth	r3, r3
 800734a:	f003 0307 	and.w	r3, r3, #7
 800734e:	b29a      	uxth	r2, r3
 8007350:	89fb      	ldrh	r3, [r7, #14]
 8007352:	4313      	orrs	r3, r2
 8007354:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	89fa      	ldrh	r2, [r7, #14]
 800735c:	60da      	str	r2, [r3, #12]
 800735e:	e04f      	b.n	8007400 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007360:	2301      	movs	r3, #1
 8007362:	77bb      	strb	r3, [r7, #30]
 8007364:	e04c      	b.n	8007400 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007366:	7ffb      	ldrb	r3, [r7, #31]
 8007368:	2b08      	cmp	r3, #8
 800736a:	d828      	bhi.n	80073be <UART_SetConfig+0x462>
 800736c:	a201      	add	r2, pc, #4	@ (adr r2, 8007374 <UART_SetConfig+0x418>)
 800736e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007372:	bf00      	nop
 8007374:	08007399 	.word	0x08007399
 8007378:	080073a1 	.word	0x080073a1
 800737c:	080073a9 	.word	0x080073a9
 8007380:	080073bf 	.word	0x080073bf
 8007384:	080073af 	.word	0x080073af
 8007388:	080073bf 	.word	0x080073bf
 800738c:	080073bf 	.word	0x080073bf
 8007390:	080073bf 	.word	0x080073bf
 8007394:	080073b7 	.word	0x080073b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007398:	f7fe fa08 	bl	80057ac <HAL_RCC_GetPCLK1Freq>
 800739c:	61b8      	str	r0, [r7, #24]
        break;
 800739e:	e013      	b.n	80073c8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80073a0:	f7fe fa18 	bl	80057d4 <HAL_RCC_GetPCLK2Freq>
 80073a4:	61b8      	str	r0, [r7, #24]
        break;
 80073a6:	e00f      	b.n	80073c8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80073a8:	4b1d      	ldr	r3, [pc, #116]	@ (8007420 <UART_SetConfig+0x4c4>)
 80073aa:	61bb      	str	r3, [r7, #24]
        break;
 80073ac:	e00c      	b.n	80073c8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80073ae:	f7fe f8eb 	bl	8005588 <HAL_RCC_GetSysClockFreq>
 80073b2:	61b8      	str	r0, [r7, #24]
        break;
 80073b4:	e008      	b.n	80073c8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80073b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80073ba:	61bb      	str	r3, [r7, #24]
        break;
 80073bc:	e004      	b.n	80073c8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80073be:	2300      	movs	r3, #0
 80073c0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80073c2:	2301      	movs	r3, #1
 80073c4:	77bb      	strb	r3, [r7, #30]
        break;
 80073c6:	bf00      	nop
    }

    if (pclk != 0U)
 80073c8:	69bb      	ldr	r3, [r7, #24]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d018      	beq.n	8007400 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	685b      	ldr	r3, [r3, #4]
 80073d2:	085a      	lsrs	r2, r3, #1
 80073d4:	69bb      	ldr	r3, [r7, #24]
 80073d6:	441a      	add	r2, r3
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	685b      	ldr	r3, [r3, #4]
 80073dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80073e0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80073e2:	693b      	ldr	r3, [r7, #16]
 80073e4:	2b0f      	cmp	r3, #15
 80073e6:	d909      	bls.n	80073fc <UART_SetConfig+0x4a0>
 80073e8:	693b      	ldr	r3, [r7, #16]
 80073ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80073ee:	d205      	bcs.n	80073fc <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80073f0:	693b      	ldr	r3, [r7, #16]
 80073f2:	b29a      	uxth	r2, r3
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	60da      	str	r2, [r3, #12]
 80073fa:	e001      	b.n	8007400 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80073fc:	2301      	movs	r3, #1
 80073fe:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2200      	movs	r2, #0
 8007404:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2200      	movs	r2, #0
 800740a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800740c:	7fbb      	ldrb	r3, [r7, #30]
}
 800740e:	4618      	mov	r0, r3
 8007410:	3720      	adds	r7, #32
 8007412:	46bd      	mov	sp, r7
 8007414:	bd80      	pop	{r7, pc}
 8007416:	bf00      	nop
 8007418:	40007c00 	.word	0x40007c00
 800741c:	40023800 	.word	0x40023800
 8007420:	00f42400 	.word	0x00f42400

08007424 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007424:	b480      	push	{r7}
 8007426:	b083      	sub	sp, #12
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007430:	f003 0308 	and.w	r3, r3, #8
 8007434:	2b00      	cmp	r3, #0
 8007436:	d00a      	beq.n	800744e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	685b      	ldr	r3, [r3, #4]
 800743e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	430a      	orrs	r2, r1
 800744c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007452:	f003 0301 	and.w	r3, r3, #1
 8007456:	2b00      	cmp	r3, #0
 8007458:	d00a      	beq.n	8007470 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	685b      	ldr	r3, [r3, #4]
 8007460:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	430a      	orrs	r2, r1
 800746e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007474:	f003 0302 	and.w	r3, r3, #2
 8007478:	2b00      	cmp	r3, #0
 800747a:	d00a      	beq.n	8007492 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	685b      	ldr	r3, [r3, #4]
 8007482:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	430a      	orrs	r2, r1
 8007490:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007496:	f003 0304 	and.w	r3, r3, #4
 800749a:	2b00      	cmp	r3, #0
 800749c:	d00a      	beq.n	80074b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	685b      	ldr	r3, [r3, #4]
 80074a4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	430a      	orrs	r2, r1
 80074b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074b8:	f003 0310 	and.w	r3, r3, #16
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d00a      	beq.n	80074d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	689b      	ldr	r3, [r3, #8]
 80074c6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	430a      	orrs	r2, r1
 80074d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074da:	f003 0320 	and.w	r3, r3, #32
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d00a      	beq.n	80074f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	689b      	ldr	r3, [r3, #8]
 80074e8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	430a      	orrs	r2, r1
 80074f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007500:	2b00      	cmp	r3, #0
 8007502:	d01a      	beq.n	800753a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	685b      	ldr	r3, [r3, #4]
 800750a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	430a      	orrs	r2, r1
 8007518:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800751e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007522:	d10a      	bne.n	800753a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	685b      	ldr	r3, [r3, #4]
 800752a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	430a      	orrs	r2, r1
 8007538:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800753e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007542:	2b00      	cmp	r3, #0
 8007544:	d00a      	beq.n	800755c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	685b      	ldr	r3, [r3, #4]
 800754c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	430a      	orrs	r2, r1
 800755a:	605a      	str	r2, [r3, #4]
  }
}
 800755c:	bf00      	nop
 800755e:	370c      	adds	r7, #12
 8007560:	46bd      	mov	sp, r7
 8007562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007566:	4770      	bx	lr

08007568 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b098      	sub	sp, #96	@ 0x60
 800756c:	af02      	add	r7, sp, #8
 800756e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2200      	movs	r2, #0
 8007574:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007578:	f7fb ffa2 	bl	80034c0 <HAL_GetTick>
 800757c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f003 0308 	and.w	r3, r3, #8
 8007588:	2b08      	cmp	r3, #8
 800758a:	d12e      	bne.n	80075ea <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800758c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007590:	9300      	str	r3, [sp, #0]
 8007592:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007594:	2200      	movs	r2, #0
 8007596:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800759a:	6878      	ldr	r0, [r7, #4]
 800759c:	f000 f88c 	bl	80076b8 <UART_WaitOnFlagUntilTimeout>
 80075a0:	4603      	mov	r3, r0
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d021      	beq.n	80075ea <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075ae:	e853 3f00 	ldrex	r3, [r3]
 80075b2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80075b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80075ba:	653b      	str	r3, [r7, #80]	@ 0x50
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	461a      	mov	r2, r3
 80075c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80075c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80075c6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075c8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80075ca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80075cc:	e841 2300 	strex	r3, r2, [r1]
 80075d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80075d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d1e6      	bne.n	80075a6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2220      	movs	r2, #32
 80075dc:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2200      	movs	r2, #0
 80075e2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80075e6:	2303      	movs	r3, #3
 80075e8:	e062      	b.n	80076b0 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f003 0304 	and.w	r3, r3, #4
 80075f4:	2b04      	cmp	r3, #4
 80075f6:	d149      	bne.n	800768c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80075f8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80075fc:	9300      	str	r3, [sp, #0]
 80075fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007600:	2200      	movs	r2, #0
 8007602:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f000 f856 	bl	80076b8 <UART_WaitOnFlagUntilTimeout>
 800760c:	4603      	mov	r3, r0
 800760e:	2b00      	cmp	r3, #0
 8007610:	d03c      	beq.n	800768c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800761a:	e853 3f00 	ldrex	r3, [r3]
 800761e:	623b      	str	r3, [r7, #32]
   return(result);
 8007620:	6a3b      	ldr	r3, [r7, #32]
 8007622:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007626:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	461a      	mov	r2, r3
 800762e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007630:	633b      	str	r3, [r7, #48]	@ 0x30
 8007632:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007634:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007636:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007638:	e841 2300 	strex	r3, r2, [r1]
 800763c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800763e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007640:	2b00      	cmp	r3, #0
 8007642:	d1e6      	bne.n	8007612 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	3308      	adds	r3, #8
 800764a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800764c:	693b      	ldr	r3, [r7, #16]
 800764e:	e853 3f00 	ldrex	r3, [r3]
 8007652:	60fb      	str	r3, [r7, #12]
   return(result);
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	f023 0301 	bic.w	r3, r3, #1
 800765a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	3308      	adds	r3, #8
 8007662:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007664:	61fa      	str	r2, [r7, #28]
 8007666:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007668:	69b9      	ldr	r1, [r7, #24]
 800766a:	69fa      	ldr	r2, [r7, #28]
 800766c:	e841 2300 	strex	r3, r2, [r1]
 8007670:	617b      	str	r3, [r7, #20]
   return(result);
 8007672:	697b      	ldr	r3, [r7, #20]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d1e5      	bne.n	8007644 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2220      	movs	r2, #32
 800767c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2200      	movs	r2, #0
 8007684:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007688:	2303      	movs	r3, #3
 800768a:	e011      	b.n	80076b0 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2220      	movs	r2, #32
 8007690:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	2220      	movs	r2, #32
 8007696:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2200      	movs	r2, #0
 800769e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2200      	movs	r2, #0
 80076a4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	2200      	movs	r2, #0
 80076aa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80076ae:	2300      	movs	r3, #0
}
 80076b0:	4618      	mov	r0, r3
 80076b2:	3758      	adds	r7, #88	@ 0x58
 80076b4:	46bd      	mov	sp, r7
 80076b6:	bd80      	pop	{r7, pc}

080076b8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b084      	sub	sp, #16
 80076bc:	af00      	add	r7, sp, #0
 80076be:	60f8      	str	r0, [r7, #12]
 80076c0:	60b9      	str	r1, [r7, #8]
 80076c2:	603b      	str	r3, [r7, #0]
 80076c4:	4613      	mov	r3, r2
 80076c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80076c8:	e04f      	b.n	800776a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80076ca:	69bb      	ldr	r3, [r7, #24]
 80076cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076d0:	d04b      	beq.n	800776a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80076d2:	f7fb fef5 	bl	80034c0 <HAL_GetTick>
 80076d6:	4602      	mov	r2, r0
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	1ad3      	subs	r3, r2, r3
 80076dc:	69ba      	ldr	r2, [r7, #24]
 80076de:	429a      	cmp	r2, r3
 80076e0:	d302      	bcc.n	80076e8 <UART_WaitOnFlagUntilTimeout+0x30>
 80076e2:	69bb      	ldr	r3, [r7, #24]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d101      	bne.n	80076ec <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80076e8:	2303      	movs	r3, #3
 80076ea:	e04e      	b.n	800778a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f003 0304 	and.w	r3, r3, #4
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d037      	beq.n	800776a <UART_WaitOnFlagUntilTimeout+0xb2>
 80076fa:	68bb      	ldr	r3, [r7, #8]
 80076fc:	2b80      	cmp	r3, #128	@ 0x80
 80076fe:	d034      	beq.n	800776a <UART_WaitOnFlagUntilTimeout+0xb2>
 8007700:	68bb      	ldr	r3, [r7, #8]
 8007702:	2b40      	cmp	r3, #64	@ 0x40
 8007704:	d031      	beq.n	800776a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	69db      	ldr	r3, [r3, #28]
 800770c:	f003 0308 	and.w	r3, r3, #8
 8007710:	2b08      	cmp	r3, #8
 8007712:	d110      	bne.n	8007736 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	2208      	movs	r2, #8
 800771a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800771c:	68f8      	ldr	r0, [r7, #12]
 800771e:	f000 f838 	bl	8007792 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	2208      	movs	r2, #8
 8007726:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	2200      	movs	r2, #0
 800772e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8007732:	2301      	movs	r3, #1
 8007734:	e029      	b.n	800778a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	69db      	ldr	r3, [r3, #28]
 800773c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007740:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007744:	d111      	bne.n	800776a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800774e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007750:	68f8      	ldr	r0, [r7, #12]
 8007752:	f000 f81e 	bl	8007792 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	2220      	movs	r2, #32
 800775a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	2200      	movs	r2, #0
 8007762:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8007766:	2303      	movs	r3, #3
 8007768:	e00f      	b.n	800778a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	69da      	ldr	r2, [r3, #28]
 8007770:	68bb      	ldr	r3, [r7, #8]
 8007772:	4013      	ands	r3, r2
 8007774:	68ba      	ldr	r2, [r7, #8]
 8007776:	429a      	cmp	r2, r3
 8007778:	bf0c      	ite	eq
 800777a:	2301      	moveq	r3, #1
 800777c:	2300      	movne	r3, #0
 800777e:	b2db      	uxtb	r3, r3
 8007780:	461a      	mov	r2, r3
 8007782:	79fb      	ldrb	r3, [r7, #7]
 8007784:	429a      	cmp	r2, r3
 8007786:	d0a0      	beq.n	80076ca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007788:	2300      	movs	r3, #0
}
 800778a:	4618      	mov	r0, r3
 800778c:	3710      	adds	r7, #16
 800778e:	46bd      	mov	sp, r7
 8007790:	bd80      	pop	{r7, pc}

08007792 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007792:	b480      	push	{r7}
 8007794:	b095      	sub	sp, #84	@ 0x54
 8007796:	af00      	add	r7, sp, #0
 8007798:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077a2:	e853 3f00 	ldrex	r3, [r3]
 80077a6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80077a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077aa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80077ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	461a      	mov	r2, r3
 80077b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80077b8:	643b      	str	r3, [r7, #64]	@ 0x40
 80077ba:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077bc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80077be:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80077c0:	e841 2300 	strex	r3, r2, [r1]
 80077c4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80077c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d1e6      	bne.n	800779a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	3308      	adds	r3, #8
 80077d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077d4:	6a3b      	ldr	r3, [r7, #32]
 80077d6:	e853 3f00 	ldrex	r3, [r3]
 80077da:	61fb      	str	r3, [r7, #28]
   return(result);
 80077dc:	69fb      	ldr	r3, [r7, #28]
 80077de:	f023 0301 	bic.w	r3, r3, #1
 80077e2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	3308      	adds	r3, #8
 80077ea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80077ec:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80077ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077f0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80077f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80077f4:	e841 2300 	strex	r3, r2, [r1]
 80077f8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80077fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d1e5      	bne.n	80077cc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007804:	2b01      	cmp	r3, #1
 8007806:	d118      	bne.n	800783a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	e853 3f00 	ldrex	r3, [r3]
 8007814:	60bb      	str	r3, [r7, #8]
   return(result);
 8007816:	68bb      	ldr	r3, [r7, #8]
 8007818:	f023 0310 	bic.w	r3, r3, #16
 800781c:	647b      	str	r3, [r7, #68]	@ 0x44
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	461a      	mov	r2, r3
 8007824:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007826:	61bb      	str	r3, [r7, #24]
 8007828:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800782a:	6979      	ldr	r1, [r7, #20]
 800782c:	69ba      	ldr	r2, [r7, #24]
 800782e:	e841 2300 	strex	r3, r2, [r1]
 8007832:	613b      	str	r3, [r7, #16]
   return(result);
 8007834:	693b      	ldr	r3, [r7, #16]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d1e6      	bne.n	8007808 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2220      	movs	r2, #32
 800783e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2200      	movs	r2, #0
 8007846:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2200      	movs	r2, #0
 800784c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800784e:	bf00      	nop
 8007850:	3754      	adds	r7, #84	@ 0x54
 8007852:	46bd      	mov	sp, r7
 8007854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007858:	4770      	bx	lr

0800785a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800785a:	b580      	push	{r7, lr}
 800785c:	b084      	sub	sp, #16
 800785e:	af00      	add	r7, sp, #0
 8007860:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007866:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	2200      	movs	r2, #0
 800786c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	2200      	movs	r2, #0
 8007874:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007878:	68f8      	ldr	r0, [r7, #12]
 800787a:	f7ff fb4f 	bl	8006f1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800787e:	bf00      	nop
 8007880:	3710      	adds	r7, #16
 8007882:	46bd      	mov	sp, r7
 8007884:	bd80      	pop	{r7, pc}

08007886 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007886:	b580      	push	{r7, lr}
 8007888:	b088      	sub	sp, #32
 800788a:	af00      	add	r7, sp, #0
 800788c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	e853 3f00 	ldrex	r3, [r3]
 800789a:	60bb      	str	r3, [r7, #8]
   return(result);
 800789c:	68bb      	ldr	r3, [r7, #8]
 800789e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80078a2:	61fb      	str	r3, [r7, #28]
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	461a      	mov	r2, r3
 80078aa:	69fb      	ldr	r3, [r7, #28]
 80078ac:	61bb      	str	r3, [r7, #24]
 80078ae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078b0:	6979      	ldr	r1, [r7, #20]
 80078b2:	69ba      	ldr	r2, [r7, #24]
 80078b4:	e841 2300 	strex	r3, r2, [r1]
 80078b8:	613b      	str	r3, [r7, #16]
   return(result);
 80078ba:	693b      	ldr	r3, [r7, #16]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d1e6      	bne.n	800788e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2220      	movs	r2, #32
 80078c4:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2200      	movs	r2, #0
 80078ca:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80078cc:	6878      	ldr	r0, [r7, #4]
 80078ce:	f7ff fb1b 	bl	8006f08 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80078d2:	bf00      	nop
 80078d4:	3720      	adds	r7, #32
 80078d6:	46bd      	mov	sp, r7
 80078d8:	bd80      	pop	{r7, pc}

080078da <atoi>:
 80078da:	220a      	movs	r2, #10
 80078dc:	2100      	movs	r1, #0
 80078de:	f000 b87b 	b.w	80079d8 <strtol>
	...

080078e4 <_strtol_l.constprop.0>:
 80078e4:	2b24      	cmp	r3, #36	@ 0x24
 80078e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078ea:	4686      	mov	lr, r0
 80078ec:	4690      	mov	r8, r2
 80078ee:	d801      	bhi.n	80078f4 <_strtol_l.constprop.0+0x10>
 80078f0:	2b01      	cmp	r3, #1
 80078f2:	d106      	bne.n	8007902 <_strtol_l.constprop.0+0x1e>
 80078f4:	f000 fa2a 	bl	8007d4c <__errno>
 80078f8:	2316      	movs	r3, #22
 80078fa:	6003      	str	r3, [r0, #0]
 80078fc:	2000      	movs	r0, #0
 80078fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007902:	4834      	ldr	r0, [pc, #208]	@ (80079d4 <_strtol_l.constprop.0+0xf0>)
 8007904:	460d      	mov	r5, r1
 8007906:	462a      	mov	r2, r5
 8007908:	f815 4b01 	ldrb.w	r4, [r5], #1
 800790c:	5d06      	ldrb	r6, [r0, r4]
 800790e:	f016 0608 	ands.w	r6, r6, #8
 8007912:	d1f8      	bne.n	8007906 <_strtol_l.constprop.0+0x22>
 8007914:	2c2d      	cmp	r4, #45	@ 0x2d
 8007916:	d12d      	bne.n	8007974 <_strtol_l.constprop.0+0x90>
 8007918:	782c      	ldrb	r4, [r5, #0]
 800791a:	2601      	movs	r6, #1
 800791c:	1c95      	adds	r5, r2, #2
 800791e:	f033 0210 	bics.w	r2, r3, #16
 8007922:	d109      	bne.n	8007938 <_strtol_l.constprop.0+0x54>
 8007924:	2c30      	cmp	r4, #48	@ 0x30
 8007926:	d12a      	bne.n	800797e <_strtol_l.constprop.0+0x9a>
 8007928:	782a      	ldrb	r2, [r5, #0]
 800792a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800792e:	2a58      	cmp	r2, #88	@ 0x58
 8007930:	d125      	bne.n	800797e <_strtol_l.constprop.0+0x9a>
 8007932:	786c      	ldrb	r4, [r5, #1]
 8007934:	2310      	movs	r3, #16
 8007936:	3502      	adds	r5, #2
 8007938:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800793c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007940:	2200      	movs	r2, #0
 8007942:	fbbc f9f3 	udiv	r9, ip, r3
 8007946:	4610      	mov	r0, r2
 8007948:	fb03 ca19 	mls	sl, r3, r9, ip
 800794c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007950:	2f09      	cmp	r7, #9
 8007952:	d81b      	bhi.n	800798c <_strtol_l.constprop.0+0xa8>
 8007954:	463c      	mov	r4, r7
 8007956:	42a3      	cmp	r3, r4
 8007958:	dd27      	ble.n	80079aa <_strtol_l.constprop.0+0xc6>
 800795a:	1c57      	adds	r7, r2, #1
 800795c:	d007      	beq.n	800796e <_strtol_l.constprop.0+0x8a>
 800795e:	4581      	cmp	r9, r0
 8007960:	d320      	bcc.n	80079a4 <_strtol_l.constprop.0+0xc0>
 8007962:	d101      	bne.n	8007968 <_strtol_l.constprop.0+0x84>
 8007964:	45a2      	cmp	sl, r4
 8007966:	db1d      	blt.n	80079a4 <_strtol_l.constprop.0+0xc0>
 8007968:	fb00 4003 	mla	r0, r0, r3, r4
 800796c:	2201      	movs	r2, #1
 800796e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007972:	e7eb      	b.n	800794c <_strtol_l.constprop.0+0x68>
 8007974:	2c2b      	cmp	r4, #43	@ 0x2b
 8007976:	bf04      	itt	eq
 8007978:	782c      	ldrbeq	r4, [r5, #0]
 800797a:	1c95      	addeq	r5, r2, #2
 800797c:	e7cf      	b.n	800791e <_strtol_l.constprop.0+0x3a>
 800797e:	2b00      	cmp	r3, #0
 8007980:	d1da      	bne.n	8007938 <_strtol_l.constprop.0+0x54>
 8007982:	2c30      	cmp	r4, #48	@ 0x30
 8007984:	bf0c      	ite	eq
 8007986:	2308      	moveq	r3, #8
 8007988:	230a      	movne	r3, #10
 800798a:	e7d5      	b.n	8007938 <_strtol_l.constprop.0+0x54>
 800798c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8007990:	2f19      	cmp	r7, #25
 8007992:	d801      	bhi.n	8007998 <_strtol_l.constprop.0+0xb4>
 8007994:	3c37      	subs	r4, #55	@ 0x37
 8007996:	e7de      	b.n	8007956 <_strtol_l.constprop.0+0x72>
 8007998:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800799c:	2f19      	cmp	r7, #25
 800799e:	d804      	bhi.n	80079aa <_strtol_l.constprop.0+0xc6>
 80079a0:	3c57      	subs	r4, #87	@ 0x57
 80079a2:	e7d8      	b.n	8007956 <_strtol_l.constprop.0+0x72>
 80079a4:	f04f 32ff 	mov.w	r2, #4294967295
 80079a8:	e7e1      	b.n	800796e <_strtol_l.constprop.0+0x8a>
 80079aa:	1c53      	adds	r3, r2, #1
 80079ac:	d108      	bne.n	80079c0 <_strtol_l.constprop.0+0xdc>
 80079ae:	2322      	movs	r3, #34	@ 0x22
 80079b0:	f8ce 3000 	str.w	r3, [lr]
 80079b4:	4660      	mov	r0, ip
 80079b6:	f1b8 0f00 	cmp.w	r8, #0
 80079ba:	d0a0      	beq.n	80078fe <_strtol_l.constprop.0+0x1a>
 80079bc:	1e69      	subs	r1, r5, #1
 80079be:	e006      	b.n	80079ce <_strtol_l.constprop.0+0xea>
 80079c0:	b106      	cbz	r6, 80079c4 <_strtol_l.constprop.0+0xe0>
 80079c2:	4240      	negs	r0, r0
 80079c4:	f1b8 0f00 	cmp.w	r8, #0
 80079c8:	d099      	beq.n	80078fe <_strtol_l.constprop.0+0x1a>
 80079ca:	2a00      	cmp	r2, #0
 80079cc:	d1f6      	bne.n	80079bc <_strtol_l.constprop.0+0xd8>
 80079ce:	f8c8 1000 	str.w	r1, [r8]
 80079d2:	e794      	b.n	80078fe <_strtol_l.constprop.0+0x1a>
 80079d4:	08008a6d 	.word	0x08008a6d

080079d8 <strtol>:
 80079d8:	4613      	mov	r3, r2
 80079da:	460a      	mov	r2, r1
 80079dc:	4601      	mov	r1, r0
 80079de:	4802      	ldr	r0, [pc, #8]	@ (80079e8 <strtol+0x10>)
 80079e0:	6800      	ldr	r0, [r0, #0]
 80079e2:	f7ff bf7f 	b.w	80078e4 <_strtol_l.constprop.0>
 80079e6:	bf00      	nop
 80079e8:	20000088 	.word	0x20000088

080079ec <std>:
 80079ec:	2300      	movs	r3, #0
 80079ee:	b510      	push	{r4, lr}
 80079f0:	4604      	mov	r4, r0
 80079f2:	e9c0 3300 	strd	r3, r3, [r0]
 80079f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80079fa:	6083      	str	r3, [r0, #8]
 80079fc:	8181      	strh	r1, [r0, #12]
 80079fe:	6643      	str	r3, [r0, #100]	@ 0x64
 8007a00:	81c2      	strh	r2, [r0, #14]
 8007a02:	6183      	str	r3, [r0, #24]
 8007a04:	4619      	mov	r1, r3
 8007a06:	2208      	movs	r2, #8
 8007a08:	305c      	adds	r0, #92	@ 0x5c
 8007a0a:	f000 f8f4 	bl	8007bf6 <memset>
 8007a0e:	4b0d      	ldr	r3, [pc, #52]	@ (8007a44 <std+0x58>)
 8007a10:	6263      	str	r3, [r4, #36]	@ 0x24
 8007a12:	4b0d      	ldr	r3, [pc, #52]	@ (8007a48 <std+0x5c>)
 8007a14:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007a16:	4b0d      	ldr	r3, [pc, #52]	@ (8007a4c <std+0x60>)
 8007a18:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007a1a:	4b0d      	ldr	r3, [pc, #52]	@ (8007a50 <std+0x64>)
 8007a1c:	6323      	str	r3, [r4, #48]	@ 0x30
 8007a1e:	4b0d      	ldr	r3, [pc, #52]	@ (8007a54 <std+0x68>)
 8007a20:	6224      	str	r4, [r4, #32]
 8007a22:	429c      	cmp	r4, r3
 8007a24:	d006      	beq.n	8007a34 <std+0x48>
 8007a26:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007a2a:	4294      	cmp	r4, r2
 8007a2c:	d002      	beq.n	8007a34 <std+0x48>
 8007a2e:	33d0      	adds	r3, #208	@ 0xd0
 8007a30:	429c      	cmp	r4, r3
 8007a32:	d105      	bne.n	8007a40 <std+0x54>
 8007a34:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007a38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a3c:	f000 b9b0 	b.w	8007da0 <__retarget_lock_init_recursive>
 8007a40:	bd10      	pop	{r4, pc}
 8007a42:	bf00      	nop
 8007a44:	08007b71 	.word	0x08007b71
 8007a48:	08007b93 	.word	0x08007b93
 8007a4c:	08007bcb 	.word	0x08007bcb
 8007a50:	08007bef 	.word	0x08007bef
 8007a54:	20000b6c 	.word	0x20000b6c

08007a58 <stdio_exit_handler>:
 8007a58:	4a02      	ldr	r2, [pc, #8]	@ (8007a64 <stdio_exit_handler+0xc>)
 8007a5a:	4903      	ldr	r1, [pc, #12]	@ (8007a68 <stdio_exit_handler+0x10>)
 8007a5c:	4803      	ldr	r0, [pc, #12]	@ (8007a6c <stdio_exit_handler+0x14>)
 8007a5e:	f000 b869 	b.w	8007b34 <_fwalk_sglue>
 8007a62:	bf00      	nop
 8007a64:	2000007c 	.word	0x2000007c
 8007a68:	080080fd 	.word	0x080080fd
 8007a6c:	2000008c 	.word	0x2000008c

08007a70 <cleanup_stdio>:
 8007a70:	6841      	ldr	r1, [r0, #4]
 8007a72:	4b0c      	ldr	r3, [pc, #48]	@ (8007aa4 <cleanup_stdio+0x34>)
 8007a74:	4299      	cmp	r1, r3
 8007a76:	b510      	push	{r4, lr}
 8007a78:	4604      	mov	r4, r0
 8007a7a:	d001      	beq.n	8007a80 <cleanup_stdio+0x10>
 8007a7c:	f000 fb3e 	bl	80080fc <_fflush_r>
 8007a80:	68a1      	ldr	r1, [r4, #8]
 8007a82:	4b09      	ldr	r3, [pc, #36]	@ (8007aa8 <cleanup_stdio+0x38>)
 8007a84:	4299      	cmp	r1, r3
 8007a86:	d002      	beq.n	8007a8e <cleanup_stdio+0x1e>
 8007a88:	4620      	mov	r0, r4
 8007a8a:	f000 fb37 	bl	80080fc <_fflush_r>
 8007a8e:	68e1      	ldr	r1, [r4, #12]
 8007a90:	4b06      	ldr	r3, [pc, #24]	@ (8007aac <cleanup_stdio+0x3c>)
 8007a92:	4299      	cmp	r1, r3
 8007a94:	d004      	beq.n	8007aa0 <cleanup_stdio+0x30>
 8007a96:	4620      	mov	r0, r4
 8007a98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a9c:	f000 bb2e 	b.w	80080fc <_fflush_r>
 8007aa0:	bd10      	pop	{r4, pc}
 8007aa2:	bf00      	nop
 8007aa4:	20000b6c 	.word	0x20000b6c
 8007aa8:	20000bd4 	.word	0x20000bd4
 8007aac:	20000c3c 	.word	0x20000c3c

08007ab0 <global_stdio_init.part.0>:
 8007ab0:	b510      	push	{r4, lr}
 8007ab2:	4b0b      	ldr	r3, [pc, #44]	@ (8007ae0 <global_stdio_init.part.0+0x30>)
 8007ab4:	4c0b      	ldr	r4, [pc, #44]	@ (8007ae4 <global_stdio_init.part.0+0x34>)
 8007ab6:	4a0c      	ldr	r2, [pc, #48]	@ (8007ae8 <global_stdio_init.part.0+0x38>)
 8007ab8:	601a      	str	r2, [r3, #0]
 8007aba:	4620      	mov	r0, r4
 8007abc:	2200      	movs	r2, #0
 8007abe:	2104      	movs	r1, #4
 8007ac0:	f7ff ff94 	bl	80079ec <std>
 8007ac4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007ac8:	2201      	movs	r2, #1
 8007aca:	2109      	movs	r1, #9
 8007acc:	f7ff ff8e 	bl	80079ec <std>
 8007ad0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007ad4:	2202      	movs	r2, #2
 8007ad6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ada:	2112      	movs	r1, #18
 8007adc:	f7ff bf86 	b.w	80079ec <std>
 8007ae0:	20000ca4 	.word	0x20000ca4
 8007ae4:	20000b6c 	.word	0x20000b6c
 8007ae8:	08007a59 	.word	0x08007a59

08007aec <__sfp_lock_acquire>:
 8007aec:	4801      	ldr	r0, [pc, #4]	@ (8007af4 <__sfp_lock_acquire+0x8>)
 8007aee:	f000 b958 	b.w	8007da2 <__retarget_lock_acquire_recursive>
 8007af2:	bf00      	nop
 8007af4:	20000cad 	.word	0x20000cad

08007af8 <__sfp_lock_release>:
 8007af8:	4801      	ldr	r0, [pc, #4]	@ (8007b00 <__sfp_lock_release+0x8>)
 8007afa:	f000 b953 	b.w	8007da4 <__retarget_lock_release_recursive>
 8007afe:	bf00      	nop
 8007b00:	20000cad 	.word	0x20000cad

08007b04 <__sinit>:
 8007b04:	b510      	push	{r4, lr}
 8007b06:	4604      	mov	r4, r0
 8007b08:	f7ff fff0 	bl	8007aec <__sfp_lock_acquire>
 8007b0c:	6a23      	ldr	r3, [r4, #32]
 8007b0e:	b11b      	cbz	r3, 8007b18 <__sinit+0x14>
 8007b10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b14:	f7ff bff0 	b.w	8007af8 <__sfp_lock_release>
 8007b18:	4b04      	ldr	r3, [pc, #16]	@ (8007b2c <__sinit+0x28>)
 8007b1a:	6223      	str	r3, [r4, #32]
 8007b1c:	4b04      	ldr	r3, [pc, #16]	@ (8007b30 <__sinit+0x2c>)
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d1f5      	bne.n	8007b10 <__sinit+0xc>
 8007b24:	f7ff ffc4 	bl	8007ab0 <global_stdio_init.part.0>
 8007b28:	e7f2      	b.n	8007b10 <__sinit+0xc>
 8007b2a:	bf00      	nop
 8007b2c:	08007a71 	.word	0x08007a71
 8007b30:	20000ca4 	.word	0x20000ca4

08007b34 <_fwalk_sglue>:
 8007b34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b38:	4607      	mov	r7, r0
 8007b3a:	4688      	mov	r8, r1
 8007b3c:	4614      	mov	r4, r2
 8007b3e:	2600      	movs	r6, #0
 8007b40:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007b44:	f1b9 0901 	subs.w	r9, r9, #1
 8007b48:	d505      	bpl.n	8007b56 <_fwalk_sglue+0x22>
 8007b4a:	6824      	ldr	r4, [r4, #0]
 8007b4c:	2c00      	cmp	r4, #0
 8007b4e:	d1f7      	bne.n	8007b40 <_fwalk_sglue+0xc>
 8007b50:	4630      	mov	r0, r6
 8007b52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b56:	89ab      	ldrh	r3, [r5, #12]
 8007b58:	2b01      	cmp	r3, #1
 8007b5a:	d907      	bls.n	8007b6c <_fwalk_sglue+0x38>
 8007b5c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007b60:	3301      	adds	r3, #1
 8007b62:	d003      	beq.n	8007b6c <_fwalk_sglue+0x38>
 8007b64:	4629      	mov	r1, r5
 8007b66:	4638      	mov	r0, r7
 8007b68:	47c0      	blx	r8
 8007b6a:	4306      	orrs	r6, r0
 8007b6c:	3568      	adds	r5, #104	@ 0x68
 8007b6e:	e7e9      	b.n	8007b44 <_fwalk_sglue+0x10>

08007b70 <__sread>:
 8007b70:	b510      	push	{r4, lr}
 8007b72:	460c      	mov	r4, r1
 8007b74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b78:	f000 f8c4 	bl	8007d04 <_read_r>
 8007b7c:	2800      	cmp	r0, #0
 8007b7e:	bfab      	itete	ge
 8007b80:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007b82:	89a3      	ldrhlt	r3, [r4, #12]
 8007b84:	181b      	addge	r3, r3, r0
 8007b86:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007b8a:	bfac      	ite	ge
 8007b8c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007b8e:	81a3      	strhlt	r3, [r4, #12]
 8007b90:	bd10      	pop	{r4, pc}

08007b92 <__swrite>:
 8007b92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b96:	461f      	mov	r7, r3
 8007b98:	898b      	ldrh	r3, [r1, #12]
 8007b9a:	05db      	lsls	r3, r3, #23
 8007b9c:	4605      	mov	r5, r0
 8007b9e:	460c      	mov	r4, r1
 8007ba0:	4616      	mov	r6, r2
 8007ba2:	d505      	bpl.n	8007bb0 <__swrite+0x1e>
 8007ba4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ba8:	2302      	movs	r3, #2
 8007baa:	2200      	movs	r2, #0
 8007bac:	f000 f898 	bl	8007ce0 <_lseek_r>
 8007bb0:	89a3      	ldrh	r3, [r4, #12]
 8007bb2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007bb6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007bba:	81a3      	strh	r3, [r4, #12]
 8007bbc:	4632      	mov	r2, r6
 8007bbe:	463b      	mov	r3, r7
 8007bc0:	4628      	mov	r0, r5
 8007bc2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007bc6:	f000 b8af 	b.w	8007d28 <_write_r>

08007bca <__sseek>:
 8007bca:	b510      	push	{r4, lr}
 8007bcc:	460c      	mov	r4, r1
 8007bce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bd2:	f000 f885 	bl	8007ce0 <_lseek_r>
 8007bd6:	1c43      	adds	r3, r0, #1
 8007bd8:	89a3      	ldrh	r3, [r4, #12]
 8007bda:	bf15      	itete	ne
 8007bdc:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007bde:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007be2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007be6:	81a3      	strheq	r3, [r4, #12]
 8007be8:	bf18      	it	ne
 8007bea:	81a3      	strhne	r3, [r4, #12]
 8007bec:	bd10      	pop	{r4, pc}

08007bee <__sclose>:
 8007bee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bf2:	f000 b865 	b.w	8007cc0 <_close_r>

08007bf6 <memset>:
 8007bf6:	4402      	add	r2, r0
 8007bf8:	4603      	mov	r3, r0
 8007bfa:	4293      	cmp	r3, r2
 8007bfc:	d100      	bne.n	8007c00 <memset+0xa>
 8007bfe:	4770      	bx	lr
 8007c00:	f803 1b01 	strb.w	r1, [r3], #1
 8007c04:	e7f9      	b.n	8007bfa <memset+0x4>
	...

08007c08 <strtok>:
 8007c08:	4b16      	ldr	r3, [pc, #88]	@ (8007c64 <strtok+0x5c>)
 8007c0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c0e:	681f      	ldr	r7, [r3, #0]
 8007c10:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8007c12:	4605      	mov	r5, r0
 8007c14:	460e      	mov	r6, r1
 8007c16:	b9ec      	cbnz	r4, 8007c54 <strtok+0x4c>
 8007c18:	2050      	movs	r0, #80	@ 0x50
 8007c1a:	f000 f935 	bl	8007e88 <malloc>
 8007c1e:	4602      	mov	r2, r0
 8007c20:	6478      	str	r0, [r7, #68]	@ 0x44
 8007c22:	b920      	cbnz	r0, 8007c2e <strtok+0x26>
 8007c24:	4b10      	ldr	r3, [pc, #64]	@ (8007c68 <strtok+0x60>)
 8007c26:	4811      	ldr	r0, [pc, #68]	@ (8007c6c <strtok+0x64>)
 8007c28:	215b      	movs	r1, #91	@ 0x5b
 8007c2a:	f000 f8c5 	bl	8007db8 <__assert_func>
 8007c2e:	e9c0 4400 	strd	r4, r4, [r0]
 8007c32:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8007c36:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8007c3a:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8007c3e:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8007c42:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8007c46:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8007c4a:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8007c4e:	6184      	str	r4, [r0, #24]
 8007c50:	7704      	strb	r4, [r0, #28]
 8007c52:	6244      	str	r4, [r0, #36]	@ 0x24
 8007c54:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007c56:	4631      	mov	r1, r6
 8007c58:	4628      	mov	r0, r5
 8007c5a:	2301      	movs	r3, #1
 8007c5c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007c60:	f000 b806 	b.w	8007c70 <__strtok_r>
 8007c64:	20000088 	.word	0x20000088
 8007c68:	08008b6d 	.word	0x08008b6d
 8007c6c:	08008b84 	.word	0x08008b84

08007c70 <__strtok_r>:
 8007c70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c72:	4604      	mov	r4, r0
 8007c74:	b908      	cbnz	r0, 8007c7a <__strtok_r+0xa>
 8007c76:	6814      	ldr	r4, [r2, #0]
 8007c78:	b144      	cbz	r4, 8007c8c <__strtok_r+0x1c>
 8007c7a:	4620      	mov	r0, r4
 8007c7c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8007c80:	460f      	mov	r7, r1
 8007c82:	f817 6b01 	ldrb.w	r6, [r7], #1
 8007c86:	b91e      	cbnz	r6, 8007c90 <__strtok_r+0x20>
 8007c88:	b965      	cbnz	r5, 8007ca4 <__strtok_r+0x34>
 8007c8a:	6015      	str	r5, [r2, #0]
 8007c8c:	2000      	movs	r0, #0
 8007c8e:	e005      	b.n	8007c9c <__strtok_r+0x2c>
 8007c90:	42b5      	cmp	r5, r6
 8007c92:	d1f6      	bne.n	8007c82 <__strtok_r+0x12>
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d1f0      	bne.n	8007c7a <__strtok_r+0xa>
 8007c98:	6014      	str	r4, [r2, #0]
 8007c9a:	7003      	strb	r3, [r0, #0]
 8007c9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c9e:	461c      	mov	r4, r3
 8007ca0:	e00c      	b.n	8007cbc <__strtok_r+0x4c>
 8007ca2:	b915      	cbnz	r5, 8007caa <__strtok_r+0x3a>
 8007ca4:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007ca8:	460e      	mov	r6, r1
 8007caa:	f816 5b01 	ldrb.w	r5, [r6], #1
 8007cae:	42ab      	cmp	r3, r5
 8007cb0:	d1f7      	bne.n	8007ca2 <__strtok_r+0x32>
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d0f3      	beq.n	8007c9e <__strtok_r+0x2e>
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	f804 3c01 	strb.w	r3, [r4, #-1]
 8007cbc:	6014      	str	r4, [r2, #0]
 8007cbe:	e7ed      	b.n	8007c9c <__strtok_r+0x2c>

08007cc0 <_close_r>:
 8007cc0:	b538      	push	{r3, r4, r5, lr}
 8007cc2:	4d06      	ldr	r5, [pc, #24]	@ (8007cdc <_close_r+0x1c>)
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	4604      	mov	r4, r0
 8007cc8:	4608      	mov	r0, r1
 8007cca:	602b      	str	r3, [r5, #0]
 8007ccc:	f7fa fe24 	bl	8002918 <_close>
 8007cd0:	1c43      	adds	r3, r0, #1
 8007cd2:	d102      	bne.n	8007cda <_close_r+0x1a>
 8007cd4:	682b      	ldr	r3, [r5, #0]
 8007cd6:	b103      	cbz	r3, 8007cda <_close_r+0x1a>
 8007cd8:	6023      	str	r3, [r4, #0]
 8007cda:	bd38      	pop	{r3, r4, r5, pc}
 8007cdc:	20000ca8 	.word	0x20000ca8

08007ce0 <_lseek_r>:
 8007ce0:	b538      	push	{r3, r4, r5, lr}
 8007ce2:	4d07      	ldr	r5, [pc, #28]	@ (8007d00 <_lseek_r+0x20>)
 8007ce4:	4604      	mov	r4, r0
 8007ce6:	4608      	mov	r0, r1
 8007ce8:	4611      	mov	r1, r2
 8007cea:	2200      	movs	r2, #0
 8007cec:	602a      	str	r2, [r5, #0]
 8007cee:	461a      	mov	r2, r3
 8007cf0:	f7fa fe39 	bl	8002966 <_lseek>
 8007cf4:	1c43      	adds	r3, r0, #1
 8007cf6:	d102      	bne.n	8007cfe <_lseek_r+0x1e>
 8007cf8:	682b      	ldr	r3, [r5, #0]
 8007cfa:	b103      	cbz	r3, 8007cfe <_lseek_r+0x1e>
 8007cfc:	6023      	str	r3, [r4, #0]
 8007cfe:	bd38      	pop	{r3, r4, r5, pc}
 8007d00:	20000ca8 	.word	0x20000ca8

08007d04 <_read_r>:
 8007d04:	b538      	push	{r3, r4, r5, lr}
 8007d06:	4d07      	ldr	r5, [pc, #28]	@ (8007d24 <_read_r+0x20>)
 8007d08:	4604      	mov	r4, r0
 8007d0a:	4608      	mov	r0, r1
 8007d0c:	4611      	mov	r1, r2
 8007d0e:	2200      	movs	r2, #0
 8007d10:	602a      	str	r2, [r5, #0]
 8007d12:	461a      	mov	r2, r3
 8007d14:	f7fa fdc7 	bl	80028a6 <_read>
 8007d18:	1c43      	adds	r3, r0, #1
 8007d1a:	d102      	bne.n	8007d22 <_read_r+0x1e>
 8007d1c:	682b      	ldr	r3, [r5, #0]
 8007d1e:	b103      	cbz	r3, 8007d22 <_read_r+0x1e>
 8007d20:	6023      	str	r3, [r4, #0]
 8007d22:	bd38      	pop	{r3, r4, r5, pc}
 8007d24:	20000ca8 	.word	0x20000ca8

08007d28 <_write_r>:
 8007d28:	b538      	push	{r3, r4, r5, lr}
 8007d2a:	4d07      	ldr	r5, [pc, #28]	@ (8007d48 <_write_r+0x20>)
 8007d2c:	4604      	mov	r4, r0
 8007d2e:	4608      	mov	r0, r1
 8007d30:	4611      	mov	r1, r2
 8007d32:	2200      	movs	r2, #0
 8007d34:	602a      	str	r2, [r5, #0]
 8007d36:	461a      	mov	r2, r3
 8007d38:	f7fa fdd2 	bl	80028e0 <_write>
 8007d3c:	1c43      	adds	r3, r0, #1
 8007d3e:	d102      	bne.n	8007d46 <_write_r+0x1e>
 8007d40:	682b      	ldr	r3, [r5, #0]
 8007d42:	b103      	cbz	r3, 8007d46 <_write_r+0x1e>
 8007d44:	6023      	str	r3, [r4, #0]
 8007d46:	bd38      	pop	{r3, r4, r5, pc}
 8007d48:	20000ca8 	.word	0x20000ca8

08007d4c <__errno>:
 8007d4c:	4b01      	ldr	r3, [pc, #4]	@ (8007d54 <__errno+0x8>)
 8007d4e:	6818      	ldr	r0, [r3, #0]
 8007d50:	4770      	bx	lr
 8007d52:	bf00      	nop
 8007d54:	20000088 	.word	0x20000088

08007d58 <__libc_init_array>:
 8007d58:	b570      	push	{r4, r5, r6, lr}
 8007d5a:	4d0d      	ldr	r5, [pc, #52]	@ (8007d90 <__libc_init_array+0x38>)
 8007d5c:	4c0d      	ldr	r4, [pc, #52]	@ (8007d94 <__libc_init_array+0x3c>)
 8007d5e:	1b64      	subs	r4, r4, r5
 8007d60:	10a4      	asrs	r4, r4, #2
 8007d62:	2600      	movs	r6, #0
 8007d64:	42a6      	cmp	r6, r4
 8007d66:	d109      	bne.n	8007d7c <__libc_init_array+0x24>
 8007d68:	4d0b      	ldr	r5, [pc, #44]	@ (8007d98 <__libc_init_array+0x40>)
 8007d6a:	4c0c      	ldr	r4, [pc, #48]	@ (8007d9c <__libc_init_array+0x44>)
 8007d6c:	f000 fe42 	bl	80089f4 <_init>
 8007d70:	1b64      	subs	r4, r4, r5
 8007d72:	10a4      	asrs	r4, r4, #2
 8007d74:	2600      	movs	r6, #0
 8007d76:	42a6      	cmp	r6, r4
 8007d78:	d105      	bne.n	8007d86 <__libc_init_array+0x2e>
 8007d7a:	bd70      	pop	{r4, r5, r6, pc}
 8007d7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d80:	4798      	blx	r3
 8007d82:	3601      	adds	r6, #1
 8007d84:	e7ee      	b.n	8007d64 <__libc_init_array+0xc>
 8007d86:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d8a:	4798      	blx	r3
 8007d8c:	3601      	adds	r6, #1
 8007d8e:	e7f2      	b.n	8007d76 <__libc_init_array+0x1e>
 8007d90:	08008c58 	.word	0x08008c58
 8007d94:	08008c58 	.word	0x08008c58
 8007d98:	08008c58 	.word	0x08008c58
 8007d9c:	08008c5c 	.word	0x08008c5c

08007da0 <__retarget_lock_init_recursive>:
 8007da0:	4770      	bx	lr

08007da2 <__retarget_lock_acquire_recursive>:
 8007da2:	4770      	bx	lr

08007da4 <__retarget_lock_release_recursive>:
 8007da4:	4770      	bx	lr

08007da6 <strcpy>:
 8007da6:	4603      	mov	r3, r0
 8007da8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007dac:	f803 2b01 	strb.w	r2, [r3], #1
 8007db0:	2a00      	cmp	r2, #0
 8007db2:	d1f9      	bne.n	8007da8 <strcpy+0x2>
 8007db4:	4770      	bx	lr
	...

08007db8 <__assert_func>:
 8007db8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007dba:	4614      	mov	r4, r2
 8007dbc:	461a      	mov	r2, r3
 8007dbe:	4b09      	ldr	r3, [pc, #36]	@ (8007de4 <__assert_func+0x2c>)
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	4605      	mov	r5, r0
 8007dc4:	68d8      	ldr	r0, [r3, #12]
 8007dc6:	b954      	cbnz	r4, 8007dde <__assert_func+0x26>
 8007dc8:	4b07      	ldr	r3, [pc, #28]	@ (8007de8 <__assert_func+0x30>)
 8007dca:	461c      	mov	r4, r3
 8007dcc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007dd0:	9100      	str	r1, [sp, #0]
 8007dd2:	462b      	mov	r3, r5
 8007dd4:	4905      	ldr	r1, [pc, #20]	@ (8007dec <__assert_func+0x34>)
 8007dd6:	f000 f9b9 	bl	800814c <fiprintf>
 8007dda:	f000 f9d9 	bl	8008190 <abort>
 8007dde:	4b04      	ldr	r3, [pc, #16]	@ (8007df0 <__assert_func+0x38>)
 8007de0:	e7f4      	b.n	8007dcc <__assert_func+0x14>
 8007de2:	bf00      	nop
 8007de4:	20000088 	.word	0x20000088
 8007de8:	08008c19 	.word	0x08008c19
 8007dec:	08008beb 	.word	0x08008beb
 8007df0:	08008bde 	.word	0x08008bde

08007df4 <_free_r>:
 8007df4:	b538      	push	{r3, r4, r5, lr}
 8007df6:	4605      	mov	r5, r0
 8007df8:	2900      	cmp	r1, #0
 8007dfa:	d041      	beq.n	8007e80 <_free_r+0x8c>
 8007dfc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e00:	1f0c      	subs	r4, r1, #4
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	bfb8      	it	lt
 8007e06:	18e4      	addlt	r4, r4, r3
 8007e08:	f000 f8e8 	bl	8007fdc <__malloc_lock>
 8007e0c:	4a1d      	ldr	r2, [pc, #116]	@ (8007e84 <_free_r+0x90>)
 8007e0e:	6813      	ldr	r3, [r2, #0]
 8007e10:	b933      	cbnz	r3, 8007e20 <_free_r+0x2c>
 8007e12:	6063      	str	r3, [r4, #4]
 8007e14:	6014      	str	r4, [r2, #0]
 8007e16:	4628      	mov	r0, r5
 8007e18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007e1c:	f000 b8e4 	b.w	8007fe8 <__malloc_unlock>
 8007e20:	42a3      	cmp	r3, r4
 8007e22:	d908      	bls.n	8007e36 <_free_r+0x42>
 8007e24:	6820      	ldr	r0, [r4, #0]
 8007e26:	1821      	adds	r1, r4, r0
 8007e28:	428b      	cmp	r3, r1
 8007e2a:	bf01      	itttt	eq
 8007e2c:	6819      	ldreq	r1, [r3, #0]
 8007e2e:	685b      	ldreq	r3, [r3, #4]
 8007e30:	1809      	addeq	r1, r1, r0
 8007e32:	6021      	streq	r1, [r4, #0]
 8007e34:	e7ed      	b.n	8007e12 <_free_r+0x1e>
 8007e36:	461a      	mov	r2, r3
 8007e38:	685b      	ldr	r3, [r3, #4]
 8007e3a:	b10b      	cbz	r3, 8007e40 <_free_r+0x4c>
 8007e3c:	42a3      	cmp	r3, r4
 8007e3e:	d9fa      	bls.n	8007e36 <_free_r+0x42>
 8007e40:	6811      	ldr	r1, [r2, #0]
 8007e42:	1850      	adds	r0, r2, r1
 8007e44:	42a0      	cmp	r0, r4
 8007e46:	d10b      	bne.n	8007e60 <_free_r+0x6c>
 8007e48:	6820      	ldr	r0, [r4, #0]
 8007e4a:	4401      	add	r1, r0
 8007e4c:	1850      	adds	r0, r2, r1
 8007e4e:	4283      	cmp	r3, r0
 8007e50:	6011      	str	r1, [r2, #0]
 8007e52:	d1e0      	bne.n	8007e16 <_free_r+0x22>
 8007e54:	6818      	ldr	r0, [r3, #0]
 8007e56:	685b      	ldr	r3, [r3, #4]
 8007e58:	6053      	str	r3, [r2, #4]
 8007e5a:	4408      	add	r0, r1
 8007e5c:	6010      	str	r0, [r2, #0]
 8007e5e:	e7da      	b.n	8007e16 <_free_r+0x22>
 8007e60:	d902      	bls.n	8007e68 <_free_r+0x74>
 8007e62:	230c      	movs	r3, #12
 8007e64:	602b      	str	r3, [r5, #0]
 8007e66:	e7d6      	b.n	8007e16 <_free_r+0x22>
 8007e68:	6820      	ldr	r0, [r4, #0]
 8007e6a:	1821      	adds	r1, r4, r0
 8007e6c:	428b      	cmp	r3, r1
 8007e6e:	bf04      	itt	eq
 8007e70:	6819      	ldreq	r1, [r3, #0]
 8007e72:	685b      	ldreq	r3, [r3, #4]
 8007e74:	6063      	str	r3, [r4, #4]
 8007e76:	bf04      	itt	eq
 8007e78:	1809      	addeq	r1, r1, r0
 8007e7a:	6021      	streq	r1, [r4, #0]
 8007e7c:	6054      	str	r4, [r2, #4]
 8007e7e:	e7ca      	b.n	8007e16 <_free_r+0x22>
 8007e80:	bd38      	pop	{r3, r4, r5, pc}
 8007e82:	bf00      	nop
 8007e84:	20000cb4 	.word	0x20000cb4

08007e88 <malloc>:
 8007e88:	4b02      	ldr	r3, [pc, #8]	@ (8007e94 <malloc+0xc>)
 8007e8a:	4601      	mov	r1, r0
 8007e8c:	6818      	ldr	r0, [r3, #0]
 8007e8e:	f000 b825 	b.w	8007edc <_malloc_r>
 8007e92:	bf00      	nop
 8007e94:	20000088 	.word	0x20000088

08007e98 <sbrk_aligned>:
 8007e98:	b570      	push	{r4, r5, r6, lr}
 8007e9a:	4e0f      	ldr	r6, [pc, #60]	@ (8007ed8 <sbrk_aligned+0x40>)
 8007e9c:	460c      	mov	r4, r1
 8007e9e:	6831      	ldr	r1, [r6, #0]
 8007ea0:	4605      	mov	r5, r0
 8007ea2:	b911      	cbnz	r1, 8007eaa <sbrk_aligned+0x12>
 8007ea4:	f000 f964 	bl	8008170 <_sbrk_r>
 8007ea8:	6030      	str	r0, [r6, #0]
 8007eaa:	4621      	mov	r1, r4
 8007eac:	4628      	mov	r0, r5
 8007eae:	f000 f95f 	bl	8008170 <_sbrk_r>
 8007eb2:	1c43      	adds	r3, r0, #1
 8007eb4:	d103      	bne.n	8007ebe <sbrk_aligned+0x26>
 8007eb6:	f04f 34ff 	mov.w	r4, #4294967295
 8007eba:	4620      	mov	r0, r4
 8007ebc:	bd70      	pop	{r4, r5, r6, pc}
 8007ebe:	1cc4      	adds	r4, r0, #3
 8007ec0:	f024 0403 	bic.w	r4, r4, #3
 8007ec4:	42a0      	cmp	r0, r4
 8007ec6:	d0f8      	beq.n	8007eba <sbrk_aligned+0x22>
 8007ec8:	1a21      	subs	r1, r4, r0
 8007eca:	4628      	mov	r0, r5
 8007ecc:	f000 f950 	bl	8008170 <_sbrk_r>
 8007ed0:	3001      	adds	r0, #1
 8007ed2:	d1f2      	bne.n	8007eba <sbrk_aligned+0x22>
 8007ed4:	e7ef      	b.n	8007eb6 <sbrk_aligned+0x1e>
 8007ed6:	bf00      	nop
 8007ed8:	20000cb0 	.word	0x20000cb0

08007edc <_malloc_r>:
 8007edc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ee0:	1ccd      	adds	r5, r1, #3
 8007ee2:	f025 0503 	bic.w	r5, r5, #3
 8007ee6:	3508      	adds	r5, #8
 8007ee8:	2d0c      	cmp	r5, #12
 8007eea:	bf38      	it	cc
 8007eec:	250c      	movcc	r5, #12
 8007eee:	2d00      	cmp	r5, #0
 8007ef0:	4606      	mov	r6, r0
 8007ef2:	db01      	blt.n	8007ef8 <_malloc_r+0x1c>
 8007ef4:	42a9      	cmp	r1, r5
 8007ef6:	d904      	bls.n	8007f02 <_malloc_r+0x26>
 8007ef8:	230c      	movs	r3, #12
 8007efa:	6033      	str	r3, [r6, #0]
 8007efc:	2000      	movs	r0, #0
 8007efe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f02:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007fd8 <_malloc_r+0xfc>
 8007f06:	f000 f869 	bl	8007fdc <__malloc_lock>
 8007f0a:	f8d8 3000 	ldr.w	r3, [r8]
 8007f0e:	461c      	mov	r4, r3
 8007f10:	bb44      	cbnz	r4, 8007f64 <_malloc_r+0x88>
 8007f12:	4629      	mov	r1, r5
 8007f14:	4630      	mov	r0, r6
 8007f16:	f7ff ffbf 	bl	8007e98 <sbrk_aligned>
 8007f1a:	1c43      	adds	r3, r0, #1
 8007f1c:	4604      	mov	r4, r0
 8007f1e:	d158      	bne.n	8007fd2 <_malloc_r+0xf6>
 8007f20:	f8d8 4000 	ldr.w	r4, [r8]
 8007f24:	4627      	mov	r7, r4
 8007f26:	2f00      	cmp	r7, #0
 8007f28:	d143      	bne.n	8007fb2 <_malloc_r+0xd6>
 8007f2a:	2c00      	cmp	r4, #0
 8007f2c:	d04b      	beq.n	8007fc6 <_malloc_r+0xea>
 8007f2e:	6823      	ldr	r3, [r4, #0]
 8007f30:	4639      	mov	r1, r7
 8007f32:	4630      	mov	r0, r6
 8007f34:	eb04 0903 	add.w	r9, r4, r3
 8007f38:	f000 f91a 	bl	8008170 <_sbrk_r>
 8007f3c:	4581      	cmp	r9, r0
 8007f3e:	d142      	bne.n	8007fc6 <_malloc_r+0xea>
 8007f40:	6821      	ldr	r1, [r4, #0]
 8007f42:	1a6d      	subs	r5, r5, r1
 8007f44:	4629      	mov	r1, r5
 8007f46:	4630      	mov	r0, r6
 8007f48:	f7ff ffa6 	bl	8007e98 <sbrk_aligned>
 8007f4c:	3001      	adds	r0, #1
 8007f4e:	d03a      	beq.n	8007fc6 <_malloc_r+0xea>
 8007f50:	6823      	ldr	r3, [r4, #0]
 8007f52:	442b      	add	r3, r5
 8007f54:	6023      	str	r3, [r4, #0]
 8007f56:	f8d8 3000 	ldr.w	r3, [r8]
 8007f5a:	685a      	ldr	r2, [r3, #4]
 8007f5c:	bb62      	cbnz	r2, 8007fb8 <_malloc_r+0xdc>
 8007f5e:	f8c8 7000 	str.w	r7, [r8]
 8007f62:	e00f      	b.n	8007f84 <_malloc_r+0xa8>
 8007f64:	6822      	ldr	r2, [r4, #0]
 8007f66:	1b52      	subs	r2, r2, r5
 8007f68:	d420      	bmi.n	8007fac <_malloc_r+0xd0>
 8007f6a:	2a0b      	cmp	r2, #11
 8007f6c:	d917      	bls.n	8007f9e <_malloc_r+0xc2>
 8007f6e:	1961      	adds	r1, r4, r5
 8007f70:	42a3      	cmp	r3, r4
 8007f72:	6025      	str	r5, [r4, #0]
 8007f74:	bf18      	it	ne
 8007f76:	6059      	strne	r1, [r3, #4]
 8007f78:	6863      	ldr	r3, [r4, #4]
 8007f7a:	bf08      	it	eq
 8007f7c:	f8c8 1000 	streq.w	r1, [r8]
 8007f80:	5162      	str	r2, [r4, r5]
 8007f82:	604b      	str	r3, [r1, #4]
 8007f84:	4630      	mov	r0, r6
 8007f86:	f000 f82f 	bl	8007fe8 <__malloc_unlock>
 8007f8a:	f104 000b 	add.w	r0, r4, #11
 8007f8e:	1d23      	adds	r3, r4, #4
 8007f90:	f020 0007 	bic.w	r0, r0, #7
 8007f94:	1ac2      	subs	r2, r0, r3
 8007f96:	bf1c      	itt	ne
 8007f98:	1a1b      	subne	r3, r3, r0
 8007f9a:	50a3      	strne	r3, [r4, r2]
 8007f9c:	e7af      	b.n	8007efe <_malloc_r+0x22>
 8007f9e:	6862      	ldr	r2, [r4, #4]
 8007fa0:	42a3      	cmp	r3, r4
 8007fa2:	bf0c      	ite	eq
 8007fa4:	f8c8 2000 	streq.w	r2, [r8]
 8007fa8:	605a      	strne	r2, [r3, #4]
 8007faa:	e7eb      	b.n	8007f84 <_malloc_r+0xa8>
 8007fac:	4623      	mov	r3, r4
 8007fae:	6864      	ldr	r4, [r4, #4]
 8007fb0:	e7ae      	b.n	8007f10 <_malloc_r+0x34>
 8007fb2:	463c      	mov	r4, r7
 8007fb4:	687f      	ldr	r7, [r7, #4]
 8007fb6:	e7b6      	b.n	8007f26 <_malloc_r+0x4a>
 8007fb8:	461a      	mov	r2, r3
 8007fba:	685b      	ldr	r3, [r3, #4]
 8007fbc:	42a3      	cmp	r3, r4
 8007fbe:	d1fb      	bne.n	8007fb8 <_malloc_r+0xdc>
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	6053      	str	r3, [r2, #4]
 8007fc4:	e7de      	b.n	8007f84 <_malloc_r+0xa8>
 8007fc6:	230c      	movs	r3, #12
 8007fc8:	6033      	str	r3, [r6, #0]
 8007fca:	4630      	mov	r0, r6
 8007fcc:	f000 f80c 	bl	8007fe8 <__malloc_unlock>
 8007fd0:	e794      	b.n	8007efc <_malloc_r+0x20>
 8007fd2:	6005      	str	r5, [r0, #0]
 8007fd4:	e7d6      	b.n	8007f84 <_malloc_r+0xa8>
 8007fd6:	bf00      	nop
 8007fd8:	20000cb4 	.word	0x20000cb4

08007fdc <__malloc_lock>:
 8007fdc:	4801      	ldr	r0, [pc, #4]	@ (8007fe4 <__malloc_lock+0x8>)
 8007fde:	f7ff bee0 	b.w	8007da2 <__retarget_lock_acquire_recursive>
 8007fe2:	bf00      	nop
 8007fe4:	20000cac 	.word	0x20000cac

08007fe8 <__malloc_unlock>:
 8007fe8:	4801      	ldr	r0, [pc, #4]	@ (8007ff0 <__malloc_unlock+0x8>)
 8007fea:	f7ff bedb 	b.w	8007da4 <__retarget_lock_release_recursive>
 8007fee:	bf00      	nop
 8007ff0:	20000cac 	.word	0x20000cac

08007ff4 <__sflush_r>:
 8007ff4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007ff8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ffc:	0716      	lsls	r6, r2, #28
 8007ffe:	4605      	mov	r5, r0
 8008000:	460c      	mov	r4, r1
 8008002:	d454      	bmi.n	80080ae <__sflush_r+0xba>
 8008004:	684b      	ldr	r3, [r1, #4]
 8008006:	2b00      	cmp	r3, #0
 8008008:	dc02      	bgt.n	8008010 <__sflush_r+0x1c>
 800800a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800800c:	2b00      	cmp	r3, #0
 800800e:	dd48      	ble.n	80080a2 <__sflush_r+0xae>
 8008010:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008012:	2e00      	cmp	r6, #0
 8008014:	d045      	beq.n	80080a2 <__sflush_r+0xae>
 8008016:	2300      	movs	r3, #0
 8008018:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800801c:	682f      	ldr	r7, [r5, #0]
 800801e:	6a21      	ldr	r1, [r4, #32]
 8008020:	602b      	str	r3, [r5, #0]
 8008022:	d030      	beq.n	8008086 <__sflush_r+0x92>
 8008024:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008026:	89a3      	ldrh	r3, [r4, #12]
 8008028:	0759      	lsls	r1, r3, #29
 800802a:	d505      	bpl.n	8008038 <__sflush_r+0x44>
 800802c:	6863      	ldr	r3, [r4, #4]
 800802e:	1ad2      	subs	r2, r2, r3
 8008030:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008032:	b10b      	cbz	r3, 8008038 <__sflush_r+0x44>
 8008034:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008036:	1ad2      	subs	r2, r2, r3
 8008038:	2300      	movs	r3, #0
 800803a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800803c:	6a21      	ldr	r1, [r4, #32]
 800803e:	4628      	mov	r0, r5
 8008040:	47b0      	blx	r6
 8008042:	1c43      	adds	r3, r0, #1
 8008044:	89a3      	ldrh	r3, [r4, #12]
 8008046:	d106      	bne.n	8008056 <__sflush_r+0x62>
 8008048:	6829      	ldr	r1, [r5, #0]
 800804a:	291d      	cmp	r1, #29
 800804c:	d82b      	bhi.n	80080a6 <__sflush_r+0xb2>
 800804e:	4a2a      	ldr	r2, [pc, #168]	@ (80080f8 <__sflush_r+0x104>)
 8008050:	410a      	asrs	r2, r1
 8008052:	07d6      	lsls	r6, r2, #31
 8008054:	d427      	bmi.n	80080a6 <__sflush_r+0xb2>
 8008056:	2200      	movs	r2, #0
 8008058:	6062      	str	r2, [r4, #4]
 800805a:	04d9      	lsls	r1, r3, #19
 800805c:	6922      	ldr	r2, [r4, #16]
 800805e:	6022      	str	r2, [r4, #0]
 8008060:	d504      	bpl.n	800806c <__sflush_r+0x78>
 8008062:	1c42      	adds	r2, r0, #1
 8008064:	d101      	bne.n	800806a <__sflush_r+0x76>
 8008066:	682b      	ldr	r3, [r5, #0]
 8008068:	b903      	cbnz	r3, 800806c <__sflush_r+0x78>
 800806a:	6560      	str	r0, [r4, #84]	@ 0x54
 800806c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800806e:	602f      	str	r7, [r5, #0]
 8008070:	b1b9      	cbz	r1, 80080a2 <__sflush_r+0xae>
 8008072:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008076:	4299      	cmp	r1, r3
 8008078:	d002      	beq.n	8008080 <__sflush_r+0x8c>
 800807a:	4628      	mov	r0, r5
 800807c:	f7ff feba 	bl	8007df4 <_free_r>
 8008080:	2300      	movs	r3, #0
 8008082:	6363      	str	r3, [r4, #52]	@ 0x34
 8008084:	e00d      	b.n	80080a2 <__sflush_r+0xae>
 8008086:	2301      	movs	r3, #1
 8008088:	4628      	mov	r0, r5
 800808a:	47b0      	blx	r6
 800808c:	4602      	mov	r2, r0
 800808e:	1c50      	adds	r0, r2, #1
 8008090:	d1c9      	bne.n	8008026 <__sflush_r+0x32>
 8008092:	682b      	ldr	r3, [r5, #0]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d0c6      	beq.n	8008026 <__sflush_r+0x32>
 8008098:	2b1d      	cmp	r3, #29
 800809a:	d001      	beq.n	80080a0 <__sflush_r+0xac>
 800809c:	2b16      	cmp	r3, #22
 800809e:	d11e      	bne.n	80080de <__sflush_r+0xea>
 80080a0:	602f      	str	r7, [r5, #0]
 80080a2:	2000      	movs	r0, #0
 80080a4:	e022      	b.n	80080ec <__sflush_r+0xf8>
 80080a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80080aa:	b21b      	sxth	r3, r3
 80080ac:	e01b      	b.n	80080e6 <__sflush_r+0xf2>
 80080ae:	690f      	ldr	r7, [r1, #16]
 80080b0:	2f00      	cmp	r7, #0
 80080b2:	d0f6      	beq.n	80080a2 <__sflush_r+0xae>
 80080b4:	0793      	lsls	r3, r2, #30
 80080b6:	680e      	ldr	r6, [r1, #0]
 80080b8:	bf08      	it	eq
 80080ba:	694b      	ldreq	r3, [r1, #20]
 80080bc:	600f      	str	r7, [r1, #0]
 80080be:	bf18      	it	ne
 80080c0:	2300      	movne	r3, #0
 80080c2:	eba6 0807 	sub.w	r8, r6, r7
 80080c6:	608b      	str	r3, [r1, #8]
 80080c8:	f1b8 0f00 	cmp.w	r8, #0
 80080cc:	dde9      	ble.n	80080a2 <__sflush_r+0xae>
 80080ce:	6a21      	ldr	r1, [r4, #32]
 80080d0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80080d2:	4643      	mov	r3, r8
 80080d4:	463a      	mov	r2, r7
 80080d6:	4628      	mov	r0, r5
 80080d8:	47b0      	blx	r6
 80080da:	2800      	cmp	r0, #0
 80080dc:	dc08      	bgt.n	80080f0 <__sflush_r+0xfc>
 80080de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80080e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80080e6:	81a3      	strh	r3, [r4, #12]
 80080e8:	f04f 30ff 	mov.w	r0, #4294967295
 80080ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80080f0:	4407      	add	r7, r0
 80080f2:	eba8 0800 	sub.w	r8, r8, r0
 80080f6:	e7e7      	b.n	80080c8 <__sflush_r+0xd4>
 80080f8:	dfbffffe 	.word	0xdfbffffe

080080fc <_fflush_r>:
 80080fc:	b538      	push	{r3, r4, r5, lr}
 80080fe:	690b      	ldr	r3, [r1, #16]
 8008100:	4605      	mov	r5, r0
 8008102:	460c      	mov	r4, r1
 8008104:	b913      	cbnz	r3, 800810c <_fflush_r+0x10>
 8008106:	2500      	movs	r5, #0
 8008108:	4628      	mov	r0, r5
 800810a:	bd38      	pop	{r3, r4, r5, pc}
 800810c:	b118      	cbz	r0, 8008116 <_fflush_r+0x1a>
 800810e:	6a03      	ldr	r3, [r0, #32]
 8008110:	b90b      	cbnz	r3, 8008116 <_fflush_r+0x1a>
 8008112:	f7ff fcf7 	bl	8007b04 <__sinit>
 8008116:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d0f3      	beq.n	8008106 <_fflush_r+0xa>
 800811e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008120:	07d0      	lsls	r0, r2, #31
 8008122:	d404      	bmi.n	800812e <_fflush_r+0x32>
 8008124:	0599      	lsls	r1, r3, #22
 8008126:	d402      	bmi.n	800812e <_fflush_r+0x32>
 8008128:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800812a:	f7ff fe3a 	bl	8007da2 <__retarget_lock_acquire_recursive>
 800812e:	4628      	mov	r0, r5
 8008130:	4621      	mov	r1, r4
 8008132:	f7ff ff5f 	bl	8007ff4 <__sflush_r>
 8008136:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008138:	07da      	lsls	r2, r3, #31
 800813a:	4605      	mov	r5, r0
 800813c:	d4e4      	bmi.n	8008108 <_fflush_r+0xc>
 800813e:	89a3      	ldrh	r3, [r4, #12]
 8008140:	059b      	lsls	r3, r3, #22
 8008142:	d4e1      	bmi.n	8008108 <_fflush_r+0xc>
 8008144:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008146:	f7ff fe2d 	bl	8007da4 <__retarget_lock_release_recursive>
 800814a:	e7dd      	b.n	8008108 <_fflush_r+0xc>

0800814c <fiprintf>:
 800814c:	b40e      	push	{r1, r2, r3}
 800814e:	b503      	push	{r0, r1, lr}
 8008150:	4601      	mov	r1, r0
 8008152:	ab03      	add	r3, sp, #12
 8008154:	4805      	ldr	r0, [pc, #20]	@ (800816c <fiprintf+0x20>)
 8008156:	f853 2b04 	ldr.w	r2, [r3], #4
 800815a:	6800      	ldr	r0, [r0, #0]
 800815c:	9301      	str	r3, [sp, #4]
 800815e:	f000 f847 	bl	80081f0 <_vfiprintf_r>
 8008162:	b002      	add	sp, #8
 8008164:	f85d eb04 	ldr.w	lr, [sp], #4
 8008168:	b003      	add	sp, #12
 800816a:	4770      	bx	lr
 800816c:	20000088 	.word	0x20000088

08008170 <_sbrk_r>:
 8008170:	b538      	push	{r3, r4, r5, lr}
 8008172:	4d06      	ldr	r5, [pc, #24]	@ (800818c <_sbrk_r+0x1c>)
 8008174:	2300      	movs	r3, #0
 8008176:	4604      	mov	r4, r0
 8008178:	4608      	mov	r0, r1
 800817a:	602b      	str	r3, [r5, #0]
 800817c:	f7fa fc00 	bl	8002980 <_sbrk>
 8008180:	1c43      	adds	r3, r0, #1
 8008182:	d102      	bne.n	800818a <_sbrk_r+0x1a>
 8008184:	682b      	ldr	r3, [r5, #0]
 8008186:	b103      	cbz	r3, 800818a <_sbrk_r+0x1a>
 8008188:	6023      	str	r3, [r4, #0]
 800818a:	bd38      	pop	{r3, r4, r5, pc}
 800818c:	20000ca8 	.word	0x20000ca8

08008190 <abort>:
 8008190:	b508      	push	{r3, lr}
 8008192:	2006      	movs	r0, #6
 8008194:	f000 fb8e 	bl	80088b4 <raise>
 8008198:	2001      	movs	r0, #1
 800819a:	f7fa fb79 	bl	8002890 <_exit>

0800819e <__sfputc_r>:
 800819e:	6893      	ldr	r3, [r2, #8]
 80081a0:	3b01      	subs	r3, #1
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	b410      	push	{r4}
 80081a6:	6093      	str	r3, [r2, #8]
 80081a8:	da08      	bge.n	80081bc <__sfputc_r+0x1e>
 80081aa:	6994      	ldr	r4, [r2, #24]
 80081ac:	42a3      	cmp	r3, r4
 80081ae:	db01      	blt.n	80081b4 <__sfputc_r+0x16>
 80081b0:	290a      	cmp	r1, #10
 80081b2:	d103      	bne.n	80081bc <__sfputc_r+0x1e>
 80081b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80081b8:	f000 bac0 	b.w	800873c <__swbuf_r>
 80081bc:	6813      	ldr	r3, [r2, #0]
 80081be:	1c58      	adds	r0, r3, #1
 80081c0:	6010      	str	r0, [r2, #0]
 80081c2:	7019      	strb	r1, [r3, #0]
 80081c4:	4608      	mov	r0, r1
 80081c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80081ca:	4770      	bx	lr

080081cc <__sfputs_r>:
 80081cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081ce:	4606      	mov	r6, r0
 80081d0:	460f      	mov	r7, r1
 80081d2:	4614      	mov	r4, r2
 80081d4:	18d5      	adds	r5, r2, r3
 80081d6:	42ac      	cmp	r4, r5
 80081d8:	d101      	bne.n	80081de <__sfputs_r+0x12>
 80081da:	2000      	movs	r0, #0
 80081dc:	e007      	b.n	80081ee <__sfputs_r+0x22>
 80081de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081e2:	463a      	mov	r2, r7
 80081e4:	4630      	mov	r0, r6
 80081e6:	f7ff ffda 	bl	800819e <__sfputc_r>
 80081ea:	1c43      	adds	r3, r0, #1
 80081ec:	d1f3      	bne.n	80081d6 <__sfputs_r+0xa>
 80081ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080081f0 <_vfiprintf_r>:
 80081f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081f4:	460d      	mov	r5, r1
 80081f6:	b09d      	sub	sp, #116	@ 0x74
 80081f8:	4614      	mov	r4, r2
 80081fa:	4698      	mov	r8, r3
 80081fc:	4606      	mov	r6, r0
 80081fe:	b118      	cbz	r0, 8008208 <_vfiprintf_r+0x18>
 8008200:	6a03      	ldr	r3, [r0, #32]
 8008202:	b90b      	cbnz	r3, 8008208 <_vfiprintf_r+0x18>
 8008204:	f7ff fc7e 	bl	8007b04 <__sinit>
 8008208:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800820a:	07d9      	lsls	r1, r3, #31
 800820c:	d405      	bmi.n	800821a <_vfiprintf_r+0x2a>
 800820e:	89ab      	ldrh	r3, [r5, #12]
 8008210:	059a      	lsls	r2, r3, #22
 8008212:	d402      	bmi.n	800821a <_vfiprintf_r+0x2a>
 8008214:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008216:	f7ff fdc4 	bl	8007da2 <__retarget_lock_acquire_recursive>
 800821a:	89ab      	ldrh	r3, [r5, #12]
 800821c:	071b      	lsls	r3, r3, #28
 800821e:	d501      	bpl.n	8008224 <_vfiprintf_r+0x34>
 8008220:	692b      	ldr	r3, [r5, #16]
 8008222:	b99b      	cbnz	r3, 800824c <_vfiprintf_r+0x5c>
 8008224:	4629      	mov	r1, r5
 8008226:	4630      	mov	r0, r6
 8008228:	f000 fac6 	bl	80087b8 <__swsetup_r>
 800822c:	b170      	cbz	r0, 800824c <_vfiprintf_r+0x5c>
 800822e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008230:	07dc      	lsls	r4, r3, #31
 8008232:	d504      	bpl.n	800823e <_vfiprintf_r+0x4e>
 8008234:	f04f 30ff 	mov.w	r0, #4294967295
 8008238:	b01d      	add	sp, #116	@ 0x74
 800823a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800823e:	89ab      	ldrh	r3, [r5, #12]
 8008240:	0598      	lsls	r0, r3, #22
 8008242:	d4f7      	bmi.n	8008234 <_vfiprintf_r+0x44>
 8008244:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008246:	f7ff fdad 	bl	8007da4 <__retarget_lock_release_recursive>
 800824a:	e7f3      	b.n	8008234 <_vfiprintf_r+0x44>
 800824c:	2300      	movs	r3, #0
 800824e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008250:	2320      	movs	r3, #32
 8008252:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008256:	f8cd 800c 	str.w	r8, [sp, #12]
 800825a:	2330      	movs	r3, #48	@ 0x30
 800825c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800840c <_vfiprintf_r+0x21c>
 8008260:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008264:	f04f 0901 	mov.w	r9, #1
 8008268:	4623      	mov	r3, r4
 800826a:	469a      	mov	sl, r3
 800826c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008270:	b10a      	cbz	r2, 8008276 <_vfiprintf_r+0x86>
 8008272:	2a25      	cmp	r2, #37	@ 0x25
 8008274:	d1f9      	bne.n	800826a <_vfiprintf_r+0x7a>
 8008276:	ebba 0b04 	subs.w	fp, sl, r4
 800827a:	d00b      	beq.n	8008294 <_vfiprintf_r+0xa4>
 800827c:	465b      	mov	r3, fp
 800827e:	4622      	mov	r2, r4
 8008280:	4629      	mov	r1, r5
 8008282:	4630      	mov	r0, r6
 8008284:	f7ff ffa2 	bl	80081cc <__sfputs_r>
 8008288:	3001      	adds	r0, #1
 800828a:	f000 80a7 	beq.w	80083dc <_vfiprintf_r+0x1ec>
 800828e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008290:	445a      	add	r2, fp
 8008292:	9209      	str	r2, [sp, #36]	@ 0x24
 8008294:	f89a 3000 	ldrb.w	r3, [sl]
 8008298:	2b00      	cmp	r3, #0
 800829a:	f000 809f 	beq.w	80083dc <_vfiprintf_r+0x1ec>
 800829e:	2300      	movs	r3, #0
 80082a0:	f04f 32ff 	mov.w	r2, #4294967295
 80082a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80082a8:	f10a 0a01 	add.w	sl, sl, #1
 80082ac:	9304      	str	r3, [sp, #16]
 80082ae:	9307      	str	r3, [sp, #28]
 80082b0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80082b4:	931a      	str	r3, [sp, #104]	@ 0x68
 80082b6:	4654      	mov	r4, sl
 80082b8:	2205      	movs	r2, #5
 80082ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082be:	4853      	ldr	r0, [pc, #332]	@ (800840c <_vfiprintf_r+0x21c>)
 80082c0:	f7f7 ffce 	bl	8000260 <memchr>
 80082c4:	9a04      	ldr	r2, [sp, #16]
 80082c6:	b9d8      	cbnz	r0, 8008300 <_vfiprintf_r+0x110>
 80082c8:	06d1      	lsls	r1, r2, #27
 80082ca:	bf44      	itt	mi
 80082cc:	2320      	movmi	r3, #32
 80082ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80082d2:	0713      	lsls	r3, r2, #28
 80082d4:	bf44      	itt	mi
 80082d6:	232b      	movmi	r3, #43	@ 0x2b
 80082d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80082dc:	f89a 3000 	ldrb.w	r3, [sl]
 80082e0:	2b2a      	cmp	r3, #42	@ 0x2a
 80082e2:	d015      	beq.n	8008310 <_vfiprintf_r+0x120>
 80082e4:	9a07      	ldr	r2, [sp, #28]
 80082e6:	4654      	mov	r4, sl
 80082e8:	2000      	movs	r0, #0
 80082ea:	f04f 0c0a 	mov.w	ip, #10
 80082ee:	4621      	mov	r1, r4
 80082f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80082f4:	3b30      	subs	r3, #48	@ 0x30
 80082f6:	2b09      	cmp	r3, #9
 80082f8:	d94b      	bls.n	8008392 <_vfiprintf_r+0x1a2>
 80082fa:	b1b0      	cbz	r0, 800832a <_vfiprintf_r+0x13a>
 80082fc:	9207      	str	r2, [sp, #28]
 80082fe:	e014      	b.n	800832a <_vfiprintf_r+0x13a>
 8008300:	eba0 0308 	sub.w	r3, r0, r8
 8008304:	fa09 f303 	lsl.w	r3, r9, r3
 8008308:	4313      	orrs	r3, r2
 800830a:	9304      	str	r3, [sp, #16]
 800830c:	46a2      	mov	sl, r4
 800830e:	e7d2      	b.n	80082b6 <_vfiprintf_r+0xc6>
 8008310:	9b03      	ldr	r3, [sp, #12]
 8008312:	1d19      	adds	r1, r3, #4
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	9103      	str	r1, [sp, #12]
 8008318:	2b00      	cmp	r3, #0
 800831a:	bfbb      	ittet	lt
 800831c:	425b      	neglt	r3, r3
 800831e:	f042 0202 	orrlt.w	r2, r2, #2
 8008322:	9307      	strge	r3, [sp, #28]
 8008324:	9307      	strlt	r3, [sp, #28]
 8008326:	bfb8      	it	lt
 8008328:	9204      	strlt	r2, [sp, #16]
 800832a:	7823      	ldrb	r3, [r4, #0]
 800832c:	2b2e      	cmp	r3, #46	@ 0x2e
 800832e:	d10a      	bne.n	8008346 <_vfiprintf_r+0x156>
 8008330:	7863      	ldrb	r3, [r4, #1]
 8008332:	2b2a      	cmp	r3, #42	@ 0x2a
 8008334:	d132      	bne.n	800839c <_vfiprintf_r+0x1ac>
 8008336:	9b03      	ldr	r3, [sp, #12]
 8008338:	1d1a      	adds	r2, r3, #4
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	9203      	str	r2, [sp, #12]
 800833e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008342:	3402      	adds	r4, #2
 8008344:	9305      	str	r3, [sp, #20]
 8008346:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800841c <_vfiprintf_r+0x22c>
 800834a:	7821      	ldrb	r1, [r4, #0]
 800834c:	2203      	movs	r2, #3
 800834e:	4650      	mov	r0, sl
 8008350:	f7f7 ff86 	bl	8000260 <memchr>
 8008354:	b138      	cbz	r0, 8008366 <_vfiprintf_r+0x176>
 8008356:	9b04      	ldr	r3, [sp, #16]
 8008358:	eba0 000a 	sub.w	r0, r0, sl
 800835c:	2240      	movs	r2, #64	@ 0x40
 800835e:	4082      	lsls	r2, r0
 8008360:	4313      	orrs	r3, r2
 8008362:	3401      	adds	r4, #1
 8008364:	9304      	str	r3, [sp, #16]
 8008366:	f814 1b01 	ldrb.w	r1, [r4], #1
 800836a:	4829      	ldr	r0, [pc, #164]	@ (8008410 <_vfiprintf_r+0x220>)
 800836c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008370:	2206      	movs	r2, #6
 8008372:	f7f7 ff75 	bl	8000260 <memchr>
 8008376:	2800      	cmp	r0, #0
 8008378:	d03f      	beq.n	80083fa <_vfiprintf_r+0x20a>
 800837a:	4b26      	ldr	r3, [pc, #152]	@ (8008414 <_vfiprintf_r+0x224>)
 800837c:	bb1b      	cbnz	r3, 80083c6 <_vfiprintf_r+0x1d6>
 800837e:	9b03      	ldr	r3, [sp, #12]
 8008380:	3307      	adds	r3, #7
 8008382:	f023 0307 	bic.w	r3, r3, #7
 8008386:	3308      	adds	r3, #8
 8008388:	9303      	str	r3, [sp, #12]
 800838a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800838c:	443b      	add	r3, r7
 800838e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008390:	e76a      	b.n	8008268 <_vfiprintf_r+0x78>
 8008392:	fb0c 3202 	mla	r2, ip, r2, r3
 8008396:	460c      	mov	r4, r1
 8008398:	2001      	movs	r0, #1
 800839a:	e7a8      	b.n	80082ee <_vfiprintf_r+0xfe>
 800839c:	2300      	movs	r3, #0
 800839e:	3401      	adds	r4, #1
 80083a0:	9305      	str	r3, [sp, #20]
 80083a2:	4619      	mov	r1, r3
 80083a4:	f04f 0c0a 	mov.w	ip, #10
 80083a8:	4620      	mov	r0, r4
 80083aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80083ae:	3a30      	subs	r2, #48	@ 0x30
 80083b0:	2a09      	cmp	r2, #9
 80083b2:	d903      	bls.n	80083bc <_vfiprintf_r+0x1cc>
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d0c6      	beq.n	8008346 <_vfiprintf_r+0x156>
 80083b8:	9105      	str	r1, [sp, #20]
 80083ba:	e7c4      	b.n	8008346 <_vfiprintf_r+0x156>
 80083bc:	fb0c 2101 	mla	r1, ip, r1, r2
 80083c0:	4604      	mov	r4, r0
 80083c2:	2301      	movs	r3, #1
 80083c4:	e7f0      	b.n	80083a8 <_vfiprintf_r+0x1b8>
 80083c6:	ab03      	add	r3, sp, #12
 80083c8:	9300      	str	r3, [sp, #0]
 80083ca:	462a      	mov	r2, r5
 80083cc:	4b12      	ldr	r3, [pc, #72]	@ (8008418 <_vfiprintf_r+0x228>)
 80083ce:	a904      	add	r1, sp, #16
 80083d0:	4630      	mov	r0, r6
 80083d2:	f3af 8000 	nop.w
 80083d6:	4607      	mov	r7, r0
 80083d8:	1c78      	adds	r0, r7, #1
 80083da:	d1d6      	bne.n	800838a <_vfiprintf_r+0x19a>
 80083dc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80083de:	07d9      	lsls	r1, r3, #31
 80083e0:	d405      	bmi.n	80083ee <_vfiprintf_r+0x1fe>
 80083e2:	89ab      	ldrh	r3, [r5, #12]
 80083e4:	059a      	lsls	r2, r3, #22
 80083e6:	d402      	bmi.n	80083ee <_vfiprintf_r+0x1fe>
 80083e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80083ea:	f7ff fcdb 	bl	8007da4 <__retarget_lock_release_recursive>
 80083ee:	89ab      	ldrh	r3, [r5, #12]
 80083f0:	065b      	lsls	r3, r3, #25
 80083f2:	f53f af1f 	bmi.w	8008234 <_vfiprintf_r+0x44>
 80083f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80083f8:	e71e      	b.n	8008238 <_vfiprintf_r+0x48>
 80083fa:	ab03      	add	r3, sp, #12
 80083fc:	9300      	str	r3, [sp, #0]
 80083fe:	462a      	mov	r2, r5
 8008400:	4b05      	ldr	r3, [pc, #20]	@ (8008418 <_vfiprintf_r+0x228>)
 8008402:	a904      	add	r1, sp, #16
 8008404:	4630      	mov	r0, r6
 8008406:	f000 f879 	bl	80084fc <_printf_i>
 800840a:	e7e4      	b.n	80083d6 <_vfiprintf_r+0x1e6>
 800840c:	08008c1a 	.word	0x08008c1a
 8008410:	08008c24 	.word	0x08008c24
 8008414:	00000000 	.word	0x00000000
 8008418:	080081cd 	.word	0x080081cd
 800841c:	08008c20 	.word	0x08008c20

08008420 <_printf_common>:
 8008420:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008424:	4616      	mov	r6, r2
 8008426:	4698      	mov	r8, r3
 8008428:	688a      	ldr	r2, [r1, #8]
 800842a:	690b      	ldr	r3, [r1, #16]
 800842c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008430:	4293      	cmp	r3, r2
 8008432:	bfb8      	it	lt
 8008434:	4613      	movlt	r3, r2
 8008436:	6033      	str	r3, [r6, #0]
 8008438:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800843c:	4607      	mov	r7, r0
 800843e:	460c      	mov	r4, r1
 8008440:	b10a      	cbz	r2, 8008446 <_printf_common+0x26>
 8008442:	3301      	adds	r3, #1
 8008444:	6033      	str	r3, [r6, #0]
 8008446:	6823      	ldr	r3, [r4, #0]
 8008448:	0699      	lsls	r1, r3, #26
 800844a:	bf42      	ittt	mi
 800844c:	6833      	ldrmi	r3, [r6, #0]
 800844e:	3302      	addmi	r3, #2
 8008450:	6033      	strmi	r3, [r6, #0]
 8008452:	6825      	ldr	r5, [r4, #0]
 8008454:	f015 0506 	ands.w	r5, r5, #6
 8008458:	d106      	bne.n	8008468 <_printf_common+0x48>
 800845a:	f104 0a19 	add.w	sl, r4, #25
 800845e:	68e3      	ldr	r3, [r4, #12]
 8008460:	6832      	ldr	r2, [r6, #0]
 8008462:	1a9b      	subs	r3, r3, r2
 8008464:	42ab      	cmp	r3, r5
 8008466:	dc26      	bgt.n	80084b6 <_printf_common+0x96>
 8008468:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800846c:	6822      	ldr	r2, [r4, #0]
 800846e:	3b00      	subs	r3, #0
 8008470:	bf18      	it	ne
 8008472:	2301      	movne	r3, #1
 8008474:	0692      	lsls	r2, r2, #26
 8008476:	d42b      	bmi.n	80084d0 <_printf_common+0xb0>
 8008478:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800847c:	4641      	mov	r1, r8
 800847e:	4638      	mov	r0, r7
 8008480:	47c8      	blx	r9
 8008482:	3001      	adds	r0, #1
 8008484:	d01e      	beq.n	80084c4 <_printf_common+0xa4>
 8008486:	6823      	ldr	r3, [r4, #0]
 8008488:	6922      	ldr	r2, [r4, #16]
 800848a:	f003 0306 	and.w	r3, r3, #6
 800848e:	2b04      	cmp	r3, #4
 8008490:	bf02      	ittt	eq
 8008492:	68e5      	ldreq	r5, [r4, #12]
 8008494:	6833      	ldreq	r3, [r6, #0]
 8008496:	1aed      	subeq	r5, r5, r3
 8008498:	68a3      	ldr	r3, [r4, #8]
 800849a:	bf0c      	ite	eq
 800849c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80084a0:	2500      	movne	r5, #0
 80084a2:	4293      	cmp	r3, r2
 80084a4:	bfc4      	itt	gt
 80084a6:	1a9b      	subgt	r3, r3, r2
 80084a8:	18ed      	addgt	r5, r5, r3
 80084aa:	2600      	movs	r6, #0
 80084ac:	341a      	adds	r4, #26
 80084ae:	42b5      	cmp	r5, r6
 80084b0:	d11a      	bne.n	80084e8 <_printf_common+0xc8>
 80084b2:	2000      	movs	r0, #0
 80084b4:	e008      	b.n	80084c8 <_printf_common+0xa8>
 80084b6:	2301      	movs	r3, #1
 80084b8:	4652      	mov	r2, sl
 80084ba:	4641      	mov	r1, r8
 80084bc:	4638      	mov	r0, r7
 80084be:	47c8      	blx	r9
 80084c0:	3001      	adds	r0, #1
 80084c2:	d103      	bne.n	80084cc <_printf_common+0xac>
 80084c4:	f04f 30ff 	mov.w	r0, #4294967295
 80084c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084cc:	3501      	adds	r5, #1
 80084ce:	e7c6      	b.n	800845e <_printf_common+0x3e>
 80084d0:	18e1      	adds	r1, r4, r3
 80084d2:	1c5a      	adds	r2, r3, #1
 80084d4:	2030      	movs	r0, #48	@ 0x30
 80084d6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80084da:	4422      	add	r2, r4
 80084dc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80084e0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80084e4:	3302      	adds	r3, #2
 80084e6:	e7c7      	b.n	8008478 <_printf_common+0x58>
 80084e8:	2301      	movs	r3, #1
 80084ea:	4622      	mov	r2, r4
 80084ec:	4641      	mov	r1, r8
 80084ee:	4638      	mov	r0, r7
 80084f0:	47c8      	blx	r9
 80084f2:	3001      	adds	r0, #1
 80084f4:	d0e6      	beq.n	80084c4 <_printf_common+0xa4>
 80084f6:	3601      	adds	r6, #1
 80084f8:	e7d9      	b.n	80084ae <_printf_common+0x8e>
	...

080084fc <_printf_i>:
 80084fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008500:	7e0f      	ldrb	r7, [r1, #24]
 8008502:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008504:	2f78      	cmp	r7, #120	@ 0x78
 8008506:	4691      	mov	r9, r2
 8008508:	4680      	mov	r8, r0
 800850a:	460c      	mov	r4, r1
 800850c:	469a      	mov	sl, r3
 800850e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008512:	d807      	bhi.n	8008524 <_printf_i+0x28>
 8008514:	2f62      	cmp	r7, #98	@ 0x62
 8008516:	d80a      	bhi.n	800852e <_printf_i+0x32>
 8008518:	2f00      	cmp	r7, #0
 800851a:	f000 80d2 	beq.w	80086c2 <_printf_i+0x1c6>
 800851e:	2f58      	cmp	r7, #88	@ 0x58
 8008520:	f000 80b9 	beq.w	8008696 <_printf_i+0x19a>
 8008524:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008528:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800852c:	e03a      	b.n	80085a4 <_printf_i+0xa8>
 800852e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008532:	2b15      	cmp	r3, #21
 8008534:	d8f6      	bhi.n	8008524 <_printf_i+0x28>
 8008536:	a101      	add	r1, pc, #4	@ (adr r1, 800853c <_printf_i+0x40>)
 8008538:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800853c:	08008595 	.word	0x08008595
 8008540:	080085a9 	.word	0x080085a9
 8008544:	08008525 	.word	0x08008525
 8008548:	08008525 	.word	0x08008525
 800854c:	08008525 	.word	0x08008525
 8008550:	08008525 	.word	0x08008525
 8008554:	080085a9 	.word	0x080085a9
 8008558:	08008525 	.word	0x08008525
 800855c:	08008525 	.word	0x08008525
 8008560:	08008525 	.word	0x08008525
 8008564:	08008525 	.word	0x08008525
 8008568:	080086a9 	.word	0x080086a9
 800856c:	080085d3 	.word	0x080085d3
 8008570:	08008663 	.word	0x08008663
 8008574:	08008525 	.word	0x08008525
 8008578:	08008525 	.word	0x08008525
 800857c:	080086cb 	.word	0x080086cb
 8008580:	08008525 	.word	0x08008525
 8008584:	080085d3 	.word	0x080085d3
 8008588:	08008525 	.word	0x08008525
 800858c:	08008525 	.word	0x08008525
 8008590:	0800866b 	.word	0x0800866b
 8008594:	6833      	ldr	r3, [r6, #0]
 8008596:	1d1a      	adds	r2, r3, #4
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	6032      	str	r2, [r6, #0]
 800859c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80085a0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80085a4:	2301      	movs	r3, #1
 80085a6:	e09d      	b.n	80086e4 <_printf_i+0x1e8>
 80085a8:	6833      	ldr	r3, [r6, #0]
 80085aa:	6820      	ldr	r0, [r4, #0]
 80085ac:	1d19      	adds	r1, r3, #4
 80085ae:	6031      	str	r1, [r6, #0]
 80085b0:	0606      	lsls	r6, r0, #24
 80085b2:	d501      	bpl.n	80085b8 <_printf_i+0xbc>
 80085b4:	681d      	ldr	r5, [r3, #0]
 80085b6:	e003      	b.n	80085c0 <_printf_i+0xc4>
 80085b8:	0645      	lsls	r5, r0, #25
 80085ba:	d5fb      	bpl.n	80085b4 <_printf_i+0xb8>
 80085bc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80085c0:	2d00      	cmp	r5, #0
 80085c2:	da03      	bge.n	80085cc <_printf_i+0xd0>
 80085c4:	232d      	movs	r3, #45	@ 0x2d
 80085c6:	426d      	negs	r5, r5
 80085c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80085cc:	4859      	ldr	r0, [pc, #356]	@ (8008734 <_printf_i+0x238>)
 80085ce:	230a      	movs	r3, #10
 80085d0:	e011      	b.n	80085f6 <_printf_i+0xfa>
 80085d2:	6821      	ldr	r1, [r4, #0]
 80085d4:	6833      	ldr	r3, [r6, #0]
 80085d6:	0608      	lsls	r0, r1, #24
 80085d8:	f853 5b04 	ldr.w	r5, [r3], #4
 80085dc:	d402      	bmi.n	80085e4 <_printf_i+0xe8>
 80085de:	0649      	lsls	r1, r1, #25
 80085e0:	bf48      	it	mi
 80085e2:	b2ad      	uxthmi	r5, r5
 80085e4:	2f6f      	cmp	r7, #111	@ 0x6f
 80085e6:	4853      	ldr	r0, [pc, #332]	@ (8008734 <_printf_i+0x238>)
 80085e8:	6033      	str	r3, [r6, #0]
 80085ea:	bf14      	ite	ne
 80085ec:	230a      	movne	r3, #10
 80085ee:	2308      	moveq	r3, #8
 80085f0:	2100      	movs	r1, #0
 80085f2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80085f6:	6866      	ldr	r6, [r4, #4]
 80085f8:	60a6      	str	r6, [r4, #8]
 80085fa:	2e00      	cmp	r6, #0
 80085fc:	bfa2      	ittt	ge
 80085fe:	6821      	ldrge	r1, [r4, #0]
 8008600:	f021 0104 	bicge.w	r1, r1, #4
 8008604:	6021      	strge	r1, [r4, #0]
 8008606:	b90d      	cbnz	r5, 800860c <_printf_i+0x110>
 8008608:	2e00      	cmp	r6, #0
 800860a:	d04b      	beq.n	80086a4 <_printf_i+0x1a8>
 800860c:	4616      	mov	r6, r2
 800860e:	fbb5 f1f3 	udiv	r1, r5, r3
 8008612:	fb03 5711 	mls	r7, r3, r1, r5
 8008616:	5dc7      	ldrb	r7, [r0, r7]
 8008618:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800861c:	462f      	mov	r7, r5
 800861e:	42bb      	cmp	r3, r7
 8008620:	460d      	mov	r5, r1
 8008622:	d9f4      	bls.n	800860e <_printf_i+0x112>
 8008624:	2b08      	cmp	r3, #8
 8008626:	d10b      	bne.n	8008640 <_printf_i+0x144>
 8008628:	6823      	ldr	r3, [r4, #0]
 800862a:	07df      	lsls	r7, r3, #31
 800862c:	d508      	bpl.n	8008640 <_printf_i+0x144>
 800862e:	6923      	ldr	r3, [r4, #16]
 8008630:	6861      	ldr	r1, [r4, #4]
 8008632:	4299      	cmp	r1, r3
 8008634:	bfde      	ittt	le
 8008636:	2330      	movle	r3, #48	@ 0x30
 8008638:	f806 3c01 	strble.w	r3, [r6, #-1]
 800863c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008640:	1b92      	subs	r2, r2, r6
 8008642:	6122      	str	r2, [r4, #16]
 8008644:	f8cd a000 	str.w	sl, [sp]
 8008648:	464b      	mov	r3, r9
 800864a:	aa03      	add	r2, sp, #12
 800864c:	4621      	mov	r1, r4
 800864e:	4640      	mov	r0, r8
 8008650:	f7ff fee6 	bl	8008420 <_printf_common>
 8008654:	3001      	adds	r0, #1
 8008656:	d14a      	bne.n	80086ee <_printf_i+0x1f2>
 8008658:	f04f 30ff 	mov.w	r0, #4294967295
 800865c:	b004      	add	sp, #16
 800865e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008662:	6823      	ldr	r3, [r4, #0]
 8008664:	f043 0320 	orr.w	r3, r3, #32
 8008668:	6023      	str	r3, [r4, #0]
 800866a:	4833      	ldr	r0, [pc, #204]	@ (8008738 <_printf_i+0x23c>)
 800866c:	2778      	movs	r7, #120	@ 0x78
 800866e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008672:	6823      	ldr	r3, [r4, #0]
 8008674:	6831      	ldr	r1, [r6, #0]
 8008676:	061f      	lsls	r7, r3, #24
 8008678:	f851 5b04 	ldr.w	r5, [r1], #4
 800867c:	d402      	bmi.n	8008684 <_printf_i+0x188>
 800867e:	065f      	lsls	r7, r3, #25
 8008680:	bf48      	it	mi
 8008682:	b2ad      	uxthmi	r5, r5
 8008684:	6031      	str	r1, [r6, #0]
 8008686:	07d9      	lsls	r1, r3, #31
 8008688:	bf44      	itt	mi
 800868a:	f043 0320 	orrmi.w	r3, r3, #32
 800868e:	6023      	strmi	r3, [r4, #0]
 8008690:	b11d      	cbz	r5, 800869a <_printf_i+0x19e>
 8008692:	2310      	movs	r3, #16
 8008694:	e7ac      	b.n	80085f0 <_printf_i+0xf4>
 8008696:	4827      	ldr	r0, [pc, #156]	@ (8008734 <_printf_i+0x238>)
 8008698:	e7e9      	b.n	800866e <_printf_i+0x172>
 800869a:	6823      	ldr	r3, [r4, #0]
 800869c:	f023 0320 	bic.w	r3, r3, #32
 80086a0:	6023      	str	r3, [r4, #0]
 80086a2:	e7f6      	b.n	8008692 <_printf_i+0x196>
 80086a4:	4616      	mov	r6, r2
 80086a6:	e7bd      	b.n	8008624 <_printf_i+0x128>
 80086a8:	6833      	ldr	r3, [r6, #0]
 80086aa:	6825      	ldr	r5, [r4, #0]
 80086ac:	6961      	ldr	r1, [r4, #20]
 80086ae:	1d18      	adds	r0, r3, #4
 80086b0:	6030      	str	r0, [r6, #0]
 80086b2:	062e      	lsls	r6, r5, #24
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	d501      	bpl.n	80086bc <_printf_i+0x1c0>
 80086b8:	6019      	str	r1, [r3, #0]
 80086ba:	e002      	b.n	80086c2 <_printf_i+0x1c6>
 80086bc:	0668      	lsls	r0, r5, #25
 80086be:	d5fb      	bpl.n	80086b8 <_printf_i+0x1bc>
 80086c0:	8019      	strh	r1, [r3, #0]
 80086c2:	2300      	movs	r3, #0
 80086c4:	6123      	str	r3, [r4, #16]
 80086c6:	4616      	mov	r6, r2
 80086c8:	e7bc      	b.n	8008644 <_printf_i+0x148>
 80086ca:	6833      	ldr	r3, [r6, #0]
 80086cc:	1d1a      	adds	r2, r3, #4
 80086ce:	6032      	str	r2, [r6, #0]
 80086d0:	681e      	ldr	r6, [r3, #0]
 80086d2:	6862      	ldr	r2, [r4, #4]
 80086d4:	2100      	movs	r1, #0
 80086d6:	4630      	mov	r0, r6
 80086d8:	f7f7 fdc2 	bl	8000260 <memchr>
 80086dc:	b108      	cbz	r0, 80086e2 <_printf_i+0x1e6>
 80086de:	1b80      	subs	r0, r0, r6
 80086e0:	6060      	str	r0, [r4, #4]
 80086e2:	6863      	ldr	r3, [r4, #4]
 80086e4:	6123      	str	r3, [r4, #16]
 80086e6:	2300      	movs	r3, #0
 80086e8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80086ec:	e7aa      	b.n	8008644 <_printf_i+0x148>
 80086ee:	6923      	ldr	r3, [r4, #16]
 80086f0:	4632      	mov	r2, r6
 80086f2:	4649      	mov	r1, r9
 80086f4:	4640      	mov	r0, r8
 80086f6:	47d0      	blx	sl
 80086f8:	3001      	adds	r0, #1
 80086fa:	d0ad      	beq.n	8008658 <_printf_i+0x15c>
 80086fc:	6823      	ldr	r3, [r4, #0]
 80086fe:	079b      	lsls	r3, r3, #30
 8008700:	d413      	bmi.n	800872a <_printf_i+0x22e>
 8008702:	68e0      	ldr	r0, [r4, #12]
 8008704:	9b03      	ldr	r3, [sp, #12]
 8008706:	4298      	cmp	r0, r3
 8008708:	bfb8      	it	lt
 800870a:	4618      	movlt	r0, r3
 800870c:	e7a6      	b.n	800865c <_printf_i+0x160>
 800870e:	2301      	movs	r3, #1
 8008710:	4632      	mov	r2, r6
 8008712:	4649      	mov	r1, r9
 8008714:	4640      	mov	r0, r8
 8008716:	47d0      	blx	sl
 8008718:	3001      	adds	r0, #1
 800871a:	d09d      	beq.n	8008658 <_printf_i+0x15c>
 800871c:	3501      	adds	r5, #1
 800871e:	68e3      	ldr	r3, [r4, #12]
 8008720:	9903      	ldr	r1, [sp, #12]
 8008722:	1a5b      	subs	r3, r3, r1
 8008724:	42ab      	cmp	r3, r5
 8008726:	dcf2      	bgt.n	800870e <_printf_i+0x212>
 8008728:	e7eb      	b.n	8008702 <_printf_i+0x206>
 800872a:	2500      	movs	r5, #0
 800872c:	f104 0619 	add.w	r6, r4, #25
 8008730:	e7f5      	b.n	800871e <_printf_i+0x222>
 8008732:	bf00      	nop
 8008734:	08008c2b 	.word	0x08008c2b
 8008738:	08008c3c 	.word	0x08008c3c

0800873c <__swbuf_r>:
 800873c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800873e:	460e      	mov	r6, r1
 8008740:	4614      	mov	r4, r2
 8008742:	4605      	mov	r5, r0
 8008744:	b118      	cbz	r0, 800874e <__swbuf_r+0x12>
 8008746:	6a03      	ldr	r3, [r0, #32]
 8008748:	b90b      	cbnz	r3, 800874e <__swbuf_r+0x12>
 800874a:	f7ff f9db 	bl	8007b04 <__sinit>
 800874e:	69a3      	ldr	r3, [r4, #24]
 8008750:	60a3      	str	r3, [r4, #8]
 8008752:	89a3      	ldrh	r3, [r4, #12]
 8008754:	071a      	lsls	r2, r3, #28
 8008756:	d501      	bpl.n	800875c <__swbuf_r+0x20>
 8008758:	6923      	ldr	r3, [r4, #16]
 800875a:	b943      	cbnz	r3, 800876e <__swbuf_r+0x32>
 800875c:	4621      	mov	r1, r4
 800875e:	4628      	mov	r0, r5
 8008760:	f000 f82a 	bl	80087b8 <__swsetup_r>
 8008764:	b118      	cbz	r0, 800876e <__swbuf_r+0x32>
 8008766:	f04f 37ff 	mov.w	r7, #4294967295
 800876a:	4638      	mov	r0, r7
 800876c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800876e:	6823      	ldr	r3, [r4, #0]
 8008770:	6922      	ldr	r2, [r4, #16]
 8008772:	1a98      	subs	r0, r3, r2
 8008774:	6963      	ldr	r3, [r4, #20]
 8008776:	b2f6      	uxtb	r6, r6
 8008778:	4283      	cmp	r3, r0
 800877a:	4637      	mov	r7, r6
 800877c:	dc05      	bgt.n	800878a <__swbuf_r+0x4e>
 800877e:	4621      	mov	r1, r4
 8008780:	4628      	mov	r0, r5
 8008782:	f7ff fcbb 	bl	80080fc <_fflush_r>
 8008786:	2800      	cmp	r0, #0
 8008788:	d1ed      	bne.n	8008766 <__swbuf_r+0x2a>
 800878a:	68a3      	ldr	r3, [r4, #8]
 800878c:	3b01      	subs	r3, #1
 800878e:	60a3      	str	r3, [r4, #8]
 8008790:	6823      	ldr	r3, [r4, #0]
 8008792:	1c5a      	adds	r2, r3, #1
 8008794:	6022      	str	r2, [r4, #0]
 8008796:	701e      	strb	r6, [r3, #0]
 8008798:	6962      	ldr	r2, [r4, #20]
 800879a:	1c43      	adds	r3, r0, #1
 800879c:	429a      	cmp	r2, r3
 800879e:	d004      	beq.n	80087aa <__swbuf_r+0x6e>
 80087a0:	89a3      	ldrh	r3, [r4, #12]
 80087a2:	07db      	lsls	r3, r3, #31
 80087a4:	d5e1      	bpl.n	800876a <__swbuf_r+0x2e>
 80087a6:	2e0a      	cmp	r6, #10
 80087a8:	d1df      	bne.n	800876a <__swbuf_r+0x2e>
 80087aa:	4621      	mov	r1, r4
 80087ac:	4628      	mov	r0, r5
 80087ae:	f7ff fca5 	bl	80080fc <_fflush_r>
 80087b2:	2800      	cmp	r0, #0
 80087b4:	d0d9      	beq.n	800876a <__swbuf_r+0x2e>
 80087b6:	e7d6      	b.n	8008766 <__swbuf_r+0x2a>

080087b8 <__swsetup_r>:
 80087b8:	b538      	push	{r3, r4, r5, lr}
 80087ba:	4b29      	ldr	r3, [pc, #164]	@ (8008860 <__swsetup_r+0xa8>)
 80087bc:	4605      	mov	r5, r0
 80087be:	6818      	ldr	r0, [r3, #0]
 80087c0:	460c      	mov	r4, r1
 80087c2:	b118      	cbz	r0, 80087cc <__swsetup_r+0x14>
 80087c4:	6a03      	ldr	r3, [r0, #32]
 80087c6:	b90b      	cbnz	r3, 80087cc <__swsetup_r+0x14>
 80087c8:	f7ff f99c 	bl	8007b04 <__sinit>
 80087cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80087d0:	0719      	lsls	r1, r3, #28
 80087d2:	d422      	bmi.n	800881a <__swsetup_r+0x62>
 80087d4:	06da      	lsls	r2, r3, #27
 80087d6:	d407      	bmi.n	80087e8 <__swsetup_r+0x30>
 80087d8:	2209      	movs	r2, #9
 80087da:	602a      	str	r2, [r5, #0]
 80087dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80087e0:	81a3      	strh	r3, [r4, #12]
 80087e2:	f04f 30ff 	mov.w	r0, #4294967295
 80087e6:	e033      	b.n	8008850 <__swsetup_r+0x98>
 80087e8:	0758      	lsls	r0, r3, #29
 80087ea:	d512      	bpl.n	8008812 <__swsetup_r+0x5a>
 80087ec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80087ee:	b141      	cbz	r1, 8008802 <__swsetup_r+0x4a>
 80087f0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80087f4:	4299      	cmp	r1, r3
 80087f6:	d002      	beq.n	80087fe <__swsetup_r+0x46>
 80087f8:	4628      	mov	r0, r5
 80087fa:	f7ff fafb 	bl	8007df4 <_free_r>
 80087fe:	2300      	movs	r3, #0
 8008800:	6363      	str	r3, [r4, #52]	@ 0x34
 8008802:	89a3      	ldrh	r3, [r4, #12]
 8008804:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008808:	81a3      	strh	r3, [r4, #12]
 800880a:	2300      	movs	r3, #0
 800880c:	6063      	str	r3, [r4, #4]
 800880e:	6923      	ldr	r3, [r4, #16]
 8008810:	6023      	str	r3, [r4, #0]
 8008812:	89a3      	ldrh	r3, [r4, #12]
 8008814:	f043 0308 	orr.w	r3, r3, #8
 8008818:	81a3      	strh	r3, [r4, #12]
 800881a:	6923      	ldr	r3, [r4, #16]
 800881c:	b94b      	cbnz	r3, 8008832 <__swsetup_r+0x7a>
 800881e:	89a3      	ldrh	r3, [r4, #12]
 8008820:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008824:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008828:	d003      	beq.n	8008832 <__swsetup_r+0x7a>
 800882a:	4621      	mov	r1, r4
 800882c:	4628      	mov	r0, r5
 800882e:	f000 f883 	bl	8008938 <__smakebuf_r>
 8008832:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008836:	f013 0201 	ands.w	r2, r3, #1
 800883a:	d00a      	beq.n	8008852 <__swsetup_r+0x9a>
 800883c:	2200      	movs	r2, #0
 800883e:	60a2      	str	r2, [r4, #8]
 8008840:	6962      	ldr	r2, [r4, #20]
 8008842:	4252      	negs	r2, r2
 8008844:	61a2      	str	r2, [r4, #24]
 8008846:	6922      	ldr	r2, [r4, #16]
 8008848:	b942      	cbnz	r2, 800885c <__swsetup_r+0xa4>
 800884a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800884e:	d1c5      	bne.n	80087dc <__swsetup_r+0x24>
 8008850:	bd38      	pop	{r3, r4, r5, pc}
 8008852:	0799      	lsls	r1, r3, #30
 8008854:	bf58      	it	pl
 8008856:	6962      	ldrpl	r2, [r4, #20]
 8008858:	60a2      	str	r2, [r4, #8]
 800885a:	e7f4      	b.n	8008846 <__swsetup_r+0x8e>
 800885c:	2000      	movs	r0, #0
 800885e:	e7f7      	b.n	8008850 <__swsetup_r+0x98>
 8008860:	20000088 	.word	0x20000088

08008864 <_raise_r>:
 8008864:	291f      	cmp	r1, #31
 8008866:	b538      	push	{r3, r4, r5, lr}
 8008868:	4605      	mov	r5, r0
 800886a:	460c      	mov	r4, r1
 800886c:	d904      	bls.n	8008878 <_raise_r+0x14>
 800886e:	2316      	movs	r3, #22
 8008870:	6003      	str	r3, [r0, #0]
 8008872:	f04f 30ff 	mov.w	r0, #4294967295
 8008876:	bd38      	pop	{r3, r4, r5, pc}
 8008878:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800887a:	b112      	cbz	r2, 8008882 <_raise_r+0x1e>
 800887c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008880:	b94b      	cbnz	r3, 8008896 <_raise_r+0x32>
 8008882:	4628      	mov	r0, r5
 8008884:	f000 f830 	bl	80088e8 <_getpid_r>
 8008888:	4622      	mov	r2, r4
 800888a:	4601      	mov	r1, r0
 800888c:	4628      	mov	r0, r5
 800888e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008892:	f000 b817 	b.w	80088c4 <_kill_r>
 8008896:	2b01      	cmp	r3, #1
 8008898:	d00a      	beq.n	80088b0 <_raise_r+0x4c>
 800889a:	1c59      	adds	r1, r3, #1
 800889c:	d103      	bne.n	80088a6 <_raise_r+0x42>
 800889e:	2316      	movs	r3, #22
 80088a0:	6003      	str	r3, [r0, #0]
 80088a2:	2001      	movs	r0, #1
 80088a4:	e7e7      	b.n	8008876 <_raise_r+0x12>
 80088a6:	2100      	movs	r1, #0
 80088a8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80088ac:	4620      	mov	r0, r4
 80088ae:	4798      	blx	r3
 80088b0:	2000      	movs	r0, #0
 80088b2:	e7e0      	b.n	8008876 <_raise_r+0x12>

080088b4 <raise>:
 80088b4:	4b02      	ldr	r3, [pc, #8]	@ (80088c0 <raise+0xc>)
 80088b6:	4601      	mov	r1, r0
 80088b8:	6818      	ldr	r0, [r3, #0]
 80088ba:	f7ff bfd3 	b.w	8008864 <_raise_r>
 80088be:	bf00      	nop
 80088c0:	20000088 	.word	0x20000088

080088c4 <_kill_r>:
 80088c4:	b538      	push	{r3, r4, r5, lr}
 80088c6:	4d07      	ldr	r5, [pc, #28]	@ (80088e4 <_kill_r+0x20>)
 80088c8:	2300      	movs	r3, #0
 80088ca:	4604      	mov	r4, r0
 80088cc:	4608      	mov	r0, r1
 80088ce:	4611      	mov	r1, r2
 80088d0:	602b      	str	r3, [r5, #0]
 80088d2:	f7f9 ffcd 	bl	8002870 <_kill>
 80088d6:	1c43      	adds	r3, r0, #1
 80088d8:	d102      	bne.n	80088e0 <_kill_r+0x1c>
 80088da:	682b      	ldr	r3, [r5, #0]
 80088dc:	b103      	cbz	r3, 80088e0 <_kill_r+0x1c>
 80088de:	6023      	str	r3, [r4, #0]
 80088e0:	bd38      	pop	{r3, r4, r5, pc}
 80088e2:	bf00      	nop
 80088e4:	20000ca8 	.word	0x20000ca8

080088e8 <_getpid_r>:
 80088e8:	f7f9 bfba 	b.w	8002860 <_getpid>

080088ec <__swhatbuf_r>:
 80088ec:	b570      	push	{r4, r5, r6, lr}
 80088ee:	460c      	mov	r4, r1
 80088f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088f4:	2900      	cmp	r1, #0
 80088f6:	b096      	sub	sp, #88	@ 0x58
 80088f8:	4615      	mov	r5, r2
 80088fa:	461e      	mov	r6, r3
 80088fc:	da0d      	bge.n	800891a <__swhatbuf_r+0x2e>
 80088fe:	89a3      	ldrh	r3, [r4, #12]
 8008900:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008904:	f04f 0100 	mov.w	r1, #0
 8008908:	bf14      	ite	ne
 800890a:	2340      	movne	r3, #64	@ 0x40
 800890c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008910:	2000      	movs	r0, #0
 8008912:	6031      	str	r1, [r6, #0]
 8008914:	602b      	str	r3, [r5, #0]
 8008916:	b016      	add	sp, #88	@ 0x58
 8008918:	bd70      	pop	{r4, r5, r6, pc}
 800891a:	466a      	mov	r2, sp
 800891c:	f000 f848 	bl	80089b0 <_fstat_r>
 8008920:	2800      	cmp	r0, #0
 8008922:	dbec      	blt.n	80088fe <__swhatbuf_r+0x12>
 8008924:	9901      	ldr	r1, [sp, #4]
 8008926:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800892a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800892e:	4259      	negs	r1, r3
 8008930:	4159      	adcs	r1, r3
 8008932:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008936:	e7eb      	b.n	8008910 <__swhatbuf_r+0x24>

08008938 <__smakebuf_r>:
 8008938:	898b      	ldrh	r3, [r1, #12]
 800893a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800893c:	079d      	lsls	r5, r3, #30
 800893e:	4606      	mov	r6, r0
 8008940:	460c      	mov	r4, r1
 8008942:	d507      	bpl.n	8008954 <__smakebuf_r+0x1c>
 8008944:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008948:	6023      	str	r3, [r4, #0]
 800894a:	6123      	str	r3, [r4, #16]
 800894c:	2301      	movs	r3, #1
 800894e:	6163      	str	r3, [r4, #20]
 8008950:	b003      	add	sp, #12
 8008952:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008954:	ab01      	add	r3, sp, #4
 8008956:	466a      	mov	r2, sp
 8008958:	f7ff ffc8 	bl	80088ec <__swhatbuf_r>
 800895c:	9f00      	ldr	r7, [sp, #0]
 800895e:	4605      	mov	r5, r0
 8008960:	4639      	mov	r1, r7
 8008962:	4630      	mov	r0, r6
 8008964:	f7ff faba 	bl	8007edc <_malloc_r>
 8008968:	b948      	cbnz	r0, 800897e <__smakebuf_r+0x46>
 800896a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800896e:	059a      	lsls	r2, r3, #22
 8008970:	d4ee      	bmi.n	8008950 <__smakebuf_r+0x18>
 8008972:	f023 0303 	bic.w	r3, r3, #3
 8008976:	f043 0302 	orr.w	r3, r3, #2
 800897a:	81a3      	strh	r3, [r4, #12]
 800897c:	e7e2      	b.n	8008944 <__smakebuf_r+0xc>
 800897e:	89a3      	ldrh	r3, [r4, #12]
 8008980:	6020      	str	r0, [r4, #0]
 8008982:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008986:	81a3      	strh	r3, [r4, #12]
 8008988:	9b01      	ldr	r3, [sp, #4]
 800898a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800898e:	b15b      	cbz	r3, 80089a8 <__smakebuf_r+0x70>
 8008990:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008994:	4630      	mov	r0, r6
 8008996:	f000 f81d 	bl	80089d4 <_isatty_r>
 800899a:	b128      	cbz	r0, 80089a8 <__smakebuf_r+0x70>
 800899c:	89a3      	ldrh	r3, [r4, #12]
 800899e:	f023 0303 	bic.w	r3, r3, #3
 80089a2:	f043 0301 	orr.w	r3, r3, #1
 80089a6:	81a3      	strh	r3, [r4, #12]
 80089a8:	89a3      	ldrh	r3, [r4, #12]
 80089aa:	431d      	orrs	r5, r3
 80089ac:	81a5      	strh	r5, [r4, #12]
 80089ae:	e7cf      	b.n	8008950 <__smakebuf_r+0x18>

080089b0 <_fstat_r>:
 80089b0:	b538      	push	{r3, r4, r5, lr}
 80089b2:	4d07      	ldr	r5, [pc, #28]	@ (80089d0 <_fstat_r+0x20>)
 80089b4:	2300      	movs	r3, #0
 80089b6:	4604      	mov	r4, r0
 80089b8:	4608      	mov	r0, r1
 80089ba:	4611      	mov	r1, r2
 80089bc:	602b      	str	r3, [r5, #0]
 80089be:	f7f9 ffb7 	bl	8002930 <_fstat>
 80089c2:	1c43      	adds	r3, r0, #1
 80089c4:	d102      	bne.n	80089cc <_fstat_r+0x1c>
 80089c6:	682b      	ldr	r3, [r5, #0]
 80089c8:	b103      	cbz	r3, 80089cc <_fstat_r+0x1c>
 80089ca:	6023      	str	r3, [r4, #0]
 80089cc:	bd38      	pop	{r3, r4, r5, pc}
 80089ce:	bf00      	nop
 80089d0:	20000ca8 	.word	0x20000ca8

080089d4 <_isatty_r>:
 80089d4:	b538      	push	{r3, r4, r5, lr}
 80089d6:	4d06      	ldr	r5, [pc, #24]	@ (80089f0 <_isatty_r+0x1c>)
 80089d8:	2300      	movs	r3, #0
 80089da:	4604      	mov	r4, r0
 80089dc:	4608      	mov	r0, r1
 80089de:	602b      	str	r3, [r5, #0]
 80089e0:	f7f9 ffb6 	bl	8002950 <_isatty>
 80089e4:	1c43      	adds	r3, r0, #1
 80089e6:	d102      	bne.n	80089ee <_isatty_r+0x1a>
 80089e8:	682b      	ldr	r3, [r5, #0]
 80089ea:	b103      	cbz	r3, 80089ee <_isatty_r+0x1a>
 80089ec:	6023      	str	r3, [r4, #0]
 80089ee:	bd38      	pop	{r3, r4, r5, pc}
 80089f0:	20000ca8 	.word	0x20000ca8

080089f4 <_init>:
 80089f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089f6:	bf00      	nop
 80089f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089fa:	bc08      	pop	{r3}
 80089fc:	469e      	mov	lr, r3
 80089fe:	4770      	bx	lr

08008a00 <_fini>:
 8008a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a02:	bf00      	nop
 8008a04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a06:	bc08      	pop	{r3}
 8008a08:	469e      	mov	lr, r3
 8008a0a:	4770      	bx	lr
